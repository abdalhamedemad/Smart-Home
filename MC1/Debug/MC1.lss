
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  00007b48  00007bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001d2  008001d2  00007d4e  2**0
                  ALLOC
  3 .stab         00007a64  00000000  00000000  00007d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022ed  00000000  00000000  0000f7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00011aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00011be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00011d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001399a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00014885  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00015634  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00015794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00015a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000161ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__vector_4>
      14:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_7>
      20:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__vector_8>
      24:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__vector_9>
      28:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_10>
      2c:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fb e7       	ldi	r31, 0x7B	; 123
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <main>
      8a:	0c 94 a2 3d 	jmp	0x7b44	; 0x7b44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 3d 	jmp	0x7ad6	; 0x7ad6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ec       	ldi	r26, 0xC8	; 200
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 3d 	jmp	0x7b0e	; 0x7b0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 3d 	jmp	0x7aee	; 0x7aee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 3d 	jmp	0x7aee	; 0x7aee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 3d 	jmp	0x7ad6	; 0x7ad6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ec       	ldi	r24, 0xC8	; 200
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 3d 	jmp	0x7b0e	; 0x7b0e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 77 3d 	jmp	0x7aee	; 0x7aee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 77 3d 	jmp	0x7aee	; 0x7aee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 77 3d 	jmp	0x7aee	; 0x7aee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7b 3d 	jmp	0x7af6	; 0x7af6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 97 3d 	jmp	0x7b2e	; 0x7b2e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Calculator_Run>:
#include "LCD.h"
#include "Calculator.h"

//u8 Calculator_GetRealNumber (Keypad_ButtonType button);

void Calculator_Run(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
     b5a:	19 86       	std	Y+9, r1	; 0x09
     b5c:	18 86       	std	Y+8, r1	; 0x08
     b5e:	1f 82       	std	Y+7, r1	; 0x07
     b60:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
     b62:	1d 82       	std	Y+5, r1	; 0x05
     b64:	1c 82       	std	Y+4, r1	; 0x04
     b66:	1b 82       	std	Y+3, r1	; 0x03
     b68:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
     b6a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
     b6e:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	80 31       	cpi	r24, 0x10	; 16
     b74:	d1 f3       	breq	.-12     	; 0xb6a <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	88 23       	and	r24, r24
     b7a:	39 f4       	brne	.+14     	; 0xb8a <Calculator_Run+0x44>
            num1_flag = 0;
     b7c:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
     b7e:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
     b80:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
     b82:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
     b84:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
     b88:	f0 cf       	rjmp	.-32     	; 0xb6a <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	88 23       	and	r24, r24
     b8e:	61 f4       	brne	.+24     	; 0xba8 <Calculator_Run+0x62>
            num1_flag = 1;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
     b9a:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
     b9c:	89 85       	ldd	r24, Y+9	; 0x09
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
     ba6:	e1 cf       	rjmp	.-62     	; 0xb6a <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	88 23       	and	r24, r24
     bac:	89 f5       	brne	.+98     	; 0xc10 <Calculator_Run+0xca>
            operation_flag = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3d 87       	std	Y+13, r19	; 0x0d
     bba:	2c 87       	std	Y+12, r18	; 0x0c
     bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc0:	87 30       	cpi	r24, 0x07	; 7
     bc2:	91 05       	cpc	r25, r1
     bc4:	c9 f0       	breq	.+50     	; 0xbf8 <Calculator_Run+0xb2>
     bc6:	2c 85       	ldd	r18, Y+12	; 0x0c
     bc8:	3d 85       	ldd	r19, Y+13	; 0x0d
     bca:	28 30       	cpi	r18, 0x08	; 8
     bcc:	31 05       	cpc	r19, r1
     bce:	34 f4       	brge	.+12     	; 0xbdc <Calculator_Run+0x96>
     bd0:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd2:	9d 85       	ldd	r25, Y+13	; 0x0d
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	91 05       	cpc	r25, r1
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <Calculator_Run+0xac>
     bda:	16 c0       	rjmp	.+44     	; 0xc08 <Calculator_Run+0xc2>
     bdc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bde:	3d 85       	ldd	r19, Y+13	; 0x0d
     be0:	2b 30       	cpi	r18, 0x0B	; 11
     be2:	31 05       	cpc	r19, r1
     be4:	61 f0       	breq	.+24     	; 0xbfe <Calculator_Run+0xb8>
     be6:	8c 85       	ldd	r24, Y+12	; 0x0c
     be8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bea:	8f 30       	cpi	r24, 0x0F	; 15
     bec:	91 05       	cpc	r25, r1
     bee:	51 f0       	breq	.+20     	; 0xc04 <Calculator_Run+0xbe>
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <Calculator_Run+0xc2>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
     bf2:	8b e2       	ldi	r24, 0x2B	; 43
     bf4:	8f 83       	std	Y+7, r24	; 0x07
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
     bf8:	8d e2       	ldi	r24, 0x2D	; 45
     bfa:	8f 83       	std	Y+7, r24	; 0x07
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
     bfe:	8a e2       	ldi	r24, 0x2A	; 42
     c00:	8f 83       	std	Y+7, r24	; 0x07
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
     c04:	8f e2       	ldi	r24, 0x2F	; 47
     c06:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
     c08:	8f 81       	ldd	r24, Y+7	; 0x07
     c0a:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCharacter>
     c0e:	ad cf       	rjmp	.-166    	; 0xb6a <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	88 23       	and	r24, r24
     c14:	61 f4       	brne	.+24     	; 0xc2e <Calculator_Run+0xe8>
            num2_flag = 1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
     c20:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
     c22:	88 85       	ldd	r24, Y+8	; 0x08
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
     c2c:	9e cf       	rjmp	.-196    	; 0xb6a <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	88 23       	and	r24, r24
     c32:	09 f0       	breq	.+2      	; 0xc36 <Calculator_Run+0xf0>
     c34:	9a cf       	rjmp	.-204    	; 0xb6a <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	09 f0       	breq	.+2      	; 0xc3e <Calculator_Run+0xf8>
     c3c:	96 cf       	rjmp	.-212    	; 0xb6a <Calculator_Run+0x24>
                result_flag = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
     c42:	8f 81       	ldd	r24, Y+7	; 0x07
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	3b 87       	std	Y+11, r19	; 0x0b
     c4a:	2a 87       	std	Y+10, r18	; 0x0a
     c4c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c4e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c50:	8b 32       	cpi	r24, 0x2B	; 43
     c52:	91 05       	cpc	r25, r1
     c54:	b1 f0       	breq	.+44     	; 0xc82 <Calculator_Run+0x13c>
     c56:	2a 85       	ldd	r18, Y+10	; 0x0a
     c58:	3b 85       	ldd	r19, Y+11	; 0x0b
     c5a:	2c 32       	cpi	r18, 0x2C	; 44
     c5c:	31 05       	cpc	r19, r1
     c5e:	34 f4       	brge	.+12     	; 0xc6c <Calculator_Run+0x126>
     c60:	8a 85       	ldd	r24, Y+10	; 0x0a
     c62:	9b 85       	ldd	r25, Y+11	; 0x0b
     c64:	8a 32       	cpi	r24, 0x2A	; 42
     c66:	91 05       	cpc	r25, r1
     c68:	b1 f0       	breq	.+44     	; 0xc96 <Calculator_Run+0x150>
     c6a:	22 c0       	rjmp	.+68     	; 0xcb0 <Calculator_Run+0x16a>
     c6c:	2a 85       	ldd	r18, Y+10	; 0x0a
     c6e:	3b 85       	ldd	r19, Y+11	; 0x0b
     c70:	2d 32       	cpi	r18, 0x2D	; 45
     c72:	31 05       	cpc	r19, r1
     c74:	59 f0       	breq	.+22     	; 0xc8c <Calculator_Run+0x146>
     c76:	8a 85       	ldd	r24, Y+10	; 0x0a
     c78:	9b 85       	ldd	r25, Y+11	; 0x0b
     c7a:	8f 32       	cpi	r24, 0x2F	; 47
     c7c:	91 05       	cpc	r25, r1
     c7e:	91 f0       	breq	.+36     	; 0xca4 <Calculator_Run+0x15e>
     c80:	17 c0       	rjmp	.+46     	; 0xcb0 <Calculator_Run+0x16a>
                {
                case '+':
                    result = num1 + num2;
     c82:	89 85       	ldd	r24, Y+9	; 0x09
     c84:	98 85       	ldd	r25, Y+8	; 0x08
     c86:	89 0f       	add	r24, r25
     c88:	8e 83       	std	Y+6, r24	; 0x06
     c8a:	12 c0       	rjmp	.+36     	; 0xcb0 <Calculator_Run+0x16a>
                    break;
                case '-':
                    result = num1 - num2;
     c8c:	89 85       	ldd	r24, Y+9	; 0x09
     c8e:	98 85       	ldd	r25, Y+8	; 0x08
     c90:	89 1b       	sub	r24, r25
     c92:	8e 83       	std	Y+6, r24	; 0x06
     c94:	0d c0       	rjmp	.+26     	; 0xcb0 <Calculator_Run+0x16a>
                    break;
                case '*':
                    result = num1 * num2;
     c96:	89 85       	ldd	r24, Y+9	; 0x09
     c98:	98 85       	ldd	r25, Y+8	; 0x08
     c9a:	89 9f       	mul	r24, r25
     c9c:	80 2d       	mov	r24, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8e 83       	std	Y+6, r24	; 0x06
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <Calculator_Run+0x16a>
                    break;
                case '/':
                    result = num1 / num2;
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	98 85       	ldd	r25, Y+8	; 0x08
     ca8:	69 2f       	mov	r22, r25
     caa:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
     cae:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
     cb0:	8d e3       	ldi	r24, 0x3D	; 61
     cb2:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
     cbe:	80 e6       	ldi	r24, 0x60	; 96
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
                LCD_DisplayNumber(result);
     cc6:	8e 81       	ldd	r24, Y+6	; 0x06
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
     cd0:	4c cf       	rjmp	.-360    	; 0xb6a <Calculator_Run+0x24>

00000cd2 <Calculator_GetRealNumber>:
            }
        }
    }
}

 u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <Calculator_GetRealNumber+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <Calculator_GetRealNumber+0x8>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
     ce0:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	3c 83       	std	Y+4, r19	; 0x04
     cea:	2b 83       	std	Y+3, r18	; 0x03
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	88 30       	cpi	r24, 0x08	; 8
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <Calculator_GetRealNumber+0x26>
     cf6:	4b c0       	rjmp	.+150    	; 0xd8e <Calculator_GetRealNumber+0xbc>
     cf8:	2b 81       	ldd	r18, Y+3	; 0x03
     cfa:	3c 81       	ldd	r19, Y+4	; 0x04
     cfc:	29 30       	cpi	r18, 0x09	; 9
     cfe:	31 05       	cpc	r19, r1
     d00:	dc f4       	brge	.+54     	; 0xd38 <Calculator_GetRealNumber+0x66>
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	91 05       	cpc	r25, r1
     d0a:	c1 f1       	breq	.+112    	; 0xd7c <Calculator_GetRealNumber+0xaa>
     d0c:	2b 81       	ldd	r18, Y+3	; 0x03
     d0e:	3c 81       	ldd	r19, Y+4	; 0x04
     d10:	25 30       	cpi	r18, 0x05	; 5
     d12:	31 05       	cpc	r19, r1
     d14:	34 f4       	brge	.+12     	; 0xd22 <Calculator_GetRealNumber+0x50>
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	61 f1       	breq	.+88     	; 0xd78 <Calculator_GetRealNumber+0xa6>
     d20:	47 c0       	rjmp	.+142    	; 0xdb0 <Calculator_GetRealNumber+0xde>
     d22:	2b 81       	ldd	r18, Y+3	; 0x03
     d24:	3c 81       	ldd	r19, Y+4	; 0x04
     d26:	25 30       	cpi	r18, 0x05	; 5
     d28:	31 05       	cpc	r19, r1
     d2a:	59 f1       	breq	.+86     	; 0xd82 <Calculator_GetRealNumber+0xb0>
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	86 30       	cpi	r24, 0x06	; 6
     d32:	91 05       	cpc	r25, r1
     d34:	49 f1       	breq	.+82     	; 0xd88 <Calculator_GetRealNumber+0xb6>
     d36:	3c c0       	rjmp	.+120    	; 0xdb0 <Calculator_GetRealNumber+0xde>
     d38:	2b 81       	ldd	r18, Y+3	; 0x03
     d3a:	3c 81       	ldd	r19, Y+4	; 0x04
     d3c:	2c 30       	cpi	r18, 0x0C	; 12
     d3e:	31 05       	cpc	r19, r1
     d40:	79 f1       	breq	.+94     	; 0xda0 <Calculator_GetRealNumber+0xce>
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	8d 30       	cpi	r24, 0x0D	; 13
     d48:	91 05       	cpc	r25, r1
     d4a:	5c f4       	brge	.+22     	; 0xd62 <Calculator_GetRealNumber+0x90>
     d4c:	2b 81       	ldd	r18, Y+3	; 0x03
     d4e:	3c 81       	ldd	r19, Y+4	; 0x04
     d50:	29 30       	cpi	r18, 0x09	; 9
     d52:	31 05       	cpc	r19, r1
     d54:	f9 f0       	breq	.+62     	; 0xd94 <Calculator_GetRealNumber+0xc2>
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	8a 30       	cpi	r24, 0x0A	; 10
     d5c:	91 05       	cpc	r25, r1
     d5e:	e9 f0       	breq	.+58     	; 0xd9a <Calculator_GetRealNumber+0xc8>
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <Calculator_GetRealNumber+0xde>
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	2d 30       	cpi	r18, 0x0D	; 13
     d68:	31 05       	cpc	r19, r1
     d6a:	e9 f0       	breq	.+58     	; 0xda6 <Calculator_GetRealNumber+0xd4>
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	8e 30       	cpi	r24, 0x0E	; 14
     d72:	91 05       	cpc	r25, r1
     d74:	d9 f0       	breq	.+54     	; 0xdac <Calculator_GetRealNumber+0xda>
     d76:	1c c0       	rjmp	.+56     	; 0xdb0 <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
     d78:	19 82       	std	Y+1, r1	; 0x01
     d7a:	1a c0       	rjmp	.+52     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	11 c0       	rjmp	.+34     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
     d8e:	84 e0       	ldi	r24, 0x04	; 4
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
     d94:	85 e0       	ldi	r24, 0x05	; 5
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
     da0:	87 e0       	ldi	r24, 0x07	; 7
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
     da6:	88 e0       	ldi	r24, 0x08	; 8
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
     dac:	89 e0       	ldi	r24, 0x09	; 9
     dae:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
     db0:	89 81       	ldd	r24, Y+1	; 0x01
}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	29 97       	sbiw	r28, 0x09	; 9
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	6a 83       	std	Y+2, r22	; 0x02
     dd8:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING) 
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	88 23       	and	r24, r24
     dde:	09 f0       	breq	.+2      	; 0xde2 <DIO_SetPinMode+0x22>
     de0:	c2 c0       	rjmp	.+388    	; 0xf66 <DIO_SetPinMode+0x1a6>
    {
        switch (port)
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	39 87       	std	Y+9, r19	; 0x09
     dea:	28 87       	std	Y+8, r18	; 0x08
     dec:	88 85       	ldd	r24, Y+8	; 0x08
     dee:	99 85       	ldd	r25, Y+9	; 0x09
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	91 05       	cpc	r25, r1
     df4:	09 f4       	brne	.+2      	; 0xdf8 <DIO_SetPinMode+0x38>
     df6:	3f c0       	rjmp	.+126    	; 0xe76 <DIO_SetPinMode+0xb6>
     df8:	28 85       	ldd	r18, Y+8	; 0x08
     dfa:	39 85       	ldd	r19, Y+9	; 0x09
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	2c f4       	brge	.+10     	; 0xe0c <DIO_SetPinMode+0x4c>
     e02:	88 85       	ldd	r24, Y+8	; 0x08
     e04:	99 85       	ldd	r25, Y+9	; 0x09
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	71 f0       	breq	.+28     	; 0xe26 <DIO_SetPinMode+0x66>
     e0a:	e1 c1       	rjmp	.+962    	; 0x11ce <DIO_SetPinMode+0x40e>
     e0c:	28 85       	ldd	r18, Y+8	; 0x08
     e0e:	39 85       	ldd	r19, Y+9	; 0x09
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <DIO_SetPinMode+0x58>
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_SetPinMode+0x106>
     e18:	88 85       	ldd	r24, Y+8	; 0x08
     e1a:	99 85       	ldd	r25, Y+9	; 0x09
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	91 05       	cpc	r25, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <DIO_SetPinMode+0x64>
     e22:	79 c0       	rjmp	.+242    	; 0xf16 <DIO_SetPinMode+0x156>
     e24:	d4 c1       	rjmp	.+936    	; 0x11ce <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     e26:	aa e3       	ldi	r26, 0x3A	; 58
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_SetPinMode+0x82>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	2a 95       	dec	r18
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_SetPinMode+0x7e>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
     e4c:	ab e3       	ldi	r26, 0x3B	; 59
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	eb e3       	ldi	r30, 0x3B	; 59
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_SetPinMode+0xaa>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_SetPinMode+0xa6>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	ac c1       	rjmp	.+856    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
     e76:	a7 e3       	ldi	r26, 0x37	; 55
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_SetPinMode+0xd2>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	2a 95       	dec	r18
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_SetPinMode+0xce>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
     e9c:	a8 e3       	ldi	r26, 0x38	; 56
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e8 e3       	ldi	r30, 0x38	; 56
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_SetPinMode+0xfa>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_SetPinMode+0xf6>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	84 c1       	rjmp	.+776    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
     ec6:	a4 e3       	ldi	r26, 0x34	; 52
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e4 e3       	ldi	r30, 0x34	; 52
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_SetPinMode+0x122>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	2a 95       	dec	r18
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_SetPinMode+0x11e>
     ee6:	80 95       	com	r24
     ee8:	84 23       	and	r24, r20
     eea:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
     eec:	a5 e3       	ldi	r26, 0x35	; 53
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e5 e3       	ldi	r30, 0x35	; 53
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_SetPinMode+0x14a>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_SetPinMode+0x146>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	5c c1       	rjmp	.+696    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
     f16:	a1 e3       	ldi	r26, 0x31	; 49
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e3       	ldi	r30, 0x31	; 49
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_SetPinMode+0x172>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	2a 95       	dec	r18
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_SetPinMode+0x16e>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
     f3c:	a2 e3       	ldi	r26, 0x32	; 50
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e2 e3       	ldi	r30, 0x32	; 50
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_SetPinMode+0x19a>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_SetPinMode+0x196>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	34 c1       	rjmp	.+616    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	09 f0       	breq	.+2      	; 0xf6e <DIO_SetPinMode+0x1ae>
     f6c:	be c0       	rjmp	.+380    	; 0x10ea <DIO_SetPinMode+0x32a>
    {
        switch (port)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3f 83       	std	Y+7, r19	; 0x07
     f76:	2e 83       	std	Y+6, r18	; 0x06
     f78:	8e 81       	ldd	r24, Y+6	; 0x06
     f7a:	9f 81       	ldd	r25, Y+7	; 0x07
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <DIO_SetPinMode+0x1c4>
     f82:	3e c0       	rjmp	.+124    	; 0x1000 <DIO_SetPinMode+0x240>
     f84:	2e 81       	ldd	r18, Y+6	; 0x06
     f86:	3f 81       	ldd	r19, Y+7	; 0x07
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <DIO_SetPinMode+0x1d8>
     f8e:	8e 81       	ldd	r24, Y+6	; 0x06
     f90:	9f 81       	ldd	r25, Y+7	; 0x07
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	71 f0       	breq	.+28     	; 0xfb2 <DIO_SetPinMode+0x1f2>
     f96:	1b c1       	rjmp	.+566    	; 0x11ce <DIO_SetPinMode+0x40e>
     f98:	2e 81       	ldd	r18, Y+6	; 0x06
     f9a:	3f 81       	ldd	r19, Y+7	; 0x07
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_SetPinMode+0x1e4>
     fa2:	55 c0       	rjmp	.+170    	; 0x104e <DIO_SetPinMode+0x28e>
     fa4:	8e 81       	ldd	r24, Y+6	; 0x06
     fa6:	9f 81       	ldd	r25, Y+7	; 0x07
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <DIO_SetPinMode+0x1f0>
     fae:	76 c0       	rjmp	.+236    	; 0x109c <DIO_SetPinMode+0x2dc>
     fb0:	0e c1       	rjmp	.+540    	; 0x11ce <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     fb2:	aa e3       	ldi	r26, 0x3A	; 58
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e3       	ldi	r30, 0x3A	; 58
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_SetPinMode+0x20e>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	2a 95       	dec	r18
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_SetPinMode+0x20a>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_SetPinMode+0x236>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_SetPinMode+0x232>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	e7 c0       	rjmp	.+462    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1000:	a7 e3       	ldi	r26, 0x37	; 55
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e7 e3       	ldi	r30, 0x37	; 55
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_SetPinMode+0x25c>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_SetPinMode+0x258>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_SetPinMode+0x284>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_SetPinMode+0x280>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	c0 c0       	rjmp	.+384    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    104e:	a4 e3       	ldi	r26, 0x34	; 52
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e4 e3       	ldi	r30, 0x34	; 52
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_SetPinMode+0x2aa>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	2a 95       	dec	r18
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_SetPinMode+0x2a6>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1074:	a5 e3       	ldi	r26, 0x35	; 53
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e3       	ldi	r30, 0x35	; 53
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_SetPinMode+0x2d2>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_SetPinMode+0x2ce>
    1096:	84 2b       	or	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	99 c0       	rjmp	.+306    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    109c:	a1 e3       	ldi	r26, 0x31	; 49
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e1 e3       	ldi	r30, 0x31	; 49
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_SetPinMode+0x2f8>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	2a 95       	dec	r18
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_SetPinMode+0x2f4>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    10c2:	a2 e3       	ldi	r26, 0x32	; 50
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e2 e3       	ldi	r30, 0x32	; 50
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_SetPinMode+0x320>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_SetPinMode+0x31c>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	72 c0       	rjmp	.+228    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <DIO_SetPinMode+0x332>
    10f0:	6e c0       	rjmp	.+220    	; 0x11ce <DIO_SetPinMode+0x40e>
    {
        switch (port)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	3d 83       	std	Y+5, r19	; 0x05
    10fa:	2c 83       	std	Y+4, r18	; 0x04
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	91 05       	cpc	r25, r1
    1104:	49 f1       	breq	.+82     	; 0x1158 <DIO_SetPinMode+0x398>
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	2c f4       	brge	.+10     	; 0x111a <DIO_SetPinMode+0x35a>
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	61 f0       	breq	.+24     	; 0x1130 <DIO_SetPinMode+0x370>
    1118:	5a c0       	rjmp	.+180    	; 0x11ce <DIO_SetPinMode+0x40e>
    111a:	2c 81       	ldd	r18, Y+4	; 0x04
    111c:	3d 81       	ldd	r19, Y+5	; 0x05
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	71 f1       	breq	.+92     	; 0x1180 <DIO_SetPinMode+0x3c0>
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	e9 f1       	breq	.+122    	; 0x11a8 <DIO_SetPinMode+0x3e8>
    112e:	4f c0       	rjmp	.+158    	; 0x11ce <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    1130:	aa e3       	ldi	r26, 0x3A	; 58
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ea e3       	ldi	r30, 0x3A	; 58
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_SetPinMode+0x38e>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_SetPinMode+0x38a>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	3b c0       	rjmp	.+118    	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    1158:	a7 e3       	ldi	r26, 0x37	; 55
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e7 e3       	ldi	r30, 0x37	; 55
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_SetPinMode+0x3b6>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_SetPinMode+0x3b2>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	27 c0       	rjmp	.+78     	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    1180:	a4 e3       	ldi	r26, 0x34	; 52
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e4 e3       	ldi	r30, 0x34	; 52
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_SetPinMode+0x3de>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_SetPinMode+0x3da>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_SetPinMode+0x406>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_SetPinMode+0x402>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    11ce:	29 96       	adiw	r28, 0x09	; 9
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	2a 97       	sbiw	r28, 0x0a	; 10
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING) 
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 23       	and	r24, r24
    11fc:	d9 f5       	brne	.+118    	; 0x1274 <DIO_SetPortMode+0x94>
    {
        switch (port)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3a 87       	std	Y+10, r19	; 0x0a
    1206:	29 87       	std	Y+9, r18	; 0x09
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	e1 f0       	breq	.+56     	; 0x124a <DIO_SetPortMode+0x6a>
    1212:	29 85       	ldd	r18, Y+9	; 0x09
    1214:	3a 85       	ldd	r19, Y+10	; 0x0a
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_SetPortMode+0x46>
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <DIO_SetPortMode+0x5c>
    1224:	d2 c0       	rjmp	.+420    	; 0x13ca <DIO_SetPortMode+0x1ea>
    1226:	29 85       	ldd	r18, Y+9	; 0x09
    1228:	3a 85       	ldd	r19, Y+10	; 0x0a
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	a1 f0       	breq	.+40     	; 0x1258 <DIO_SetPortMode+0x78>
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	b1 f0       	breq	.+44     	; 0x1266 <DIO_SetPortMode+0x86>
    123a:	c7 c0       	rjmp	.+398    	; 0x13ca <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	10 82       	st	Z, r1
            PORTA = 0x00;
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	10 82       	st	Z, r1
    1248:	c0 c0       	rjmp	.+384    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
            PORTB = 0x00;
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	10 82       	st	Z, r1
    1256:	b9 c0       	rjmp	.+370    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1258:	e4 e3       	ldi	r30, 0x34	; 52
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	10 82       	st	Z, r1
            PORTC = 0x00;
    125e:	e5 e3       	ldi	r30, 0x35	; 53
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	10 82       	st	Z, r1
    1264:	b2 c0       	rjmp	.+356    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1266:	e1 e3       	ldi	r30, 0x31	; 49
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	10 82       	st	Z, r1
            PORTD = 0x00;
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
    1272:	ab c0       	rjmp	.+342    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_SetPortMode+0x9c>
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <DIO_SetPortMode+0x11a>
    {
        switch (port)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	38 87       	std	Y+8, r19	; 0x08
    1284:	2f 83       	std	Y+7, r18	; 0x07
    1286:	8f 81       	ldd	r24, Y+7	; 0x07
    1288:	98 85       	ldd	r25, Y+8	; 0x08
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	e9 f0       	breq	.+58     	; 0x12ca <DIO_SetPortMode+0xea>
    1290:	2f 81       	ldd	r18, Y+7	; 0x07
    1292:	38 85       	ldd	r19, Y+8	; 0x08
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <DIO_SetPortMode+0xc4>
    129a:	8f 81       	ldd	r24, Y+7	; 0x07
    129c:	98 85       	ldd	r25, Y+8	; 0x08
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	61 f0       	breq	.+24     	; 0x12ba <DIO_SetPortMode+0xda>
    12a2:	93 c0       	rjmp	.+294    	; 0x13ca <DIO_SetPortMode+0x1ea>
    12a4:	2f 81       	ldd	r18, Y+7	; 0x07
    12a6:	38 85       	ldd	r19, Y+8	; 0x08
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	b1 f0       	breq	.+44     	; 0x12da <DIO_SetPortMode+0xfa>
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	98 85       	ldd	r25, Y+8	; 0x08
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	c9 f0       	breq	.+50     	; 0x12ea <DIO_SetPortMode+0x10a>
    12b8:	88 c0       	rjmp	.+272    	; 0x13ca <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    12ba:	ea e3       	ldi	r30, 0x3A	; 58
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	10 82       	st	Z, r1
            PORTA = 0xFF;
    12c0:	eb e3       	ldi	r30, 0x3B	; 59
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	80 83       	st	Z, r24
    12c8:	80 c0       	rjmp	.+256    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	10 82       	st	Z, r1
            PORTB = 0xFF;
    12d0:	e8 e3       	ldi	r30, 0x38	; 56
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	80 83       	st	Z, r24
    12d8:	78 c0       	rjmp	.+240    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    12da:	e4 e3       	ldi	r30, 0x34	; 52
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	10 82       	st	Z, r1
            PORTC = 0xFF;
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	80 83       	st	Z, r24
    12e8:	70 c0       	rjmp	.+224    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    12ea:	e1 e3       	ldi	r30, 0x31	; 49
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	10 82       	st	Z, r1
            PORTD = 0xFF;
    12f0:	e2 e3       	ldi	r30, 0x32	; 50
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	80 83       	st	Z, r24
    12f8:	68 c0       	rjmp	.+208    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	99 f5       	brne	.+102    	; 0x1366 <DIO_SetPortMode+0x186>
    {
        switch (port)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3e 83       	std	Y+6, r19	; 0x06
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <DIO_SetPortMode+0x168>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_SetPortMode+0x148>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_SetPortMode+0x15e>
    1326:	51 c0       	rjmp	.+162    	; 0x13ca <DIO_SetPortMode+0x1ea>
    1328:	2d 81       	ldd	r18, Y+5	; 0x05
    132a:	3e 81       	ldd	r19, Y+6	; 0x06
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_SetPortMode+0x172>
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <DIO_SetPortMode+0x17c>
    133c:	46 c0       	rjmp	.+140    	; 0x13ca <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	80 83       	st	Z, r24
    1346:	41 c0       	rjmp	.+130    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	80 83       	st	Z, r24
    1350:	3c c0       	rjmp	.+120    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	80 83       	st	Z, r24
    135a:	37 c0       	rjmp	.+110    	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	80 83       	st	Z, r24
    1364:	32 c0       	rjmp	.+100    	; 0x13ca <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3c 83       	std	Y+4, r19	; 0x04
    136e:	2b 83       	std	Y+3, r18	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	d1 f0       	breq	.+52     	; 0x13ae <DIO_SetPortMode+0x1ce>
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	3c 81       	ldd	r19, Y+4	; 0x04
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	2c f4       	brge	.+10     	; 0x138e <DIO_SetPortMode+0x1ae>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	61 f0       	breq	.+24     	; 0x13a4 <DIO_SetPortMode+0x1c4>
    138c:	1e c0       	rjmp	.+60     	; 0x13ca <DIO_SetPortMode+0x1ea>
    138e:	2b 81       	ldd	r18, Y+3	; 0x03
    1390:	3c 81       	ldd	r19, Y+4	; 0x04
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	81 f0       	breq	.+32     	; 0x13b8 <DIO_SetPortMode+0x1d8>
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <DIO_SetPortMode+0x1e2>
    13a2:	13 c0       	rjmp	.+38     	; 0x13ca <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    13a4:	ea e3       	ldi	r30, 0x3A	; 58
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	80 83       	st	Z, r24
    13ac:	0e c0       	rjmp	.+28     	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    13ae:	e7 e3       	ldi	r30, 0x37	; 55
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	80 83       	st	Z, r24
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    13b8:	e4 e3       	ldi	r30, 0x34	; 52
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	80 83       	st	Z, r24
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    13c2:	e1 e3       	ldi	r30, 0x31	; 49
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    13ca:	2a 96       	adiw	r28, 0x0a	; 10
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	27 97       	sbiw	r28, 0x07	; 7
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	6a 83       	std	Y+2, r22	; 0x02
    13f4:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH) 
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <DIO_SetPinLevel+0x22>
    13fc:	6f c0       	rjmp	.+222    	; 0x14dc <DIO_SetPinLevel+0x100>
    {
        switch (port)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3f 83       	std	Y+7, r19	; 0x07
    1406:	2e 83       	std	Y+6, r18	; 0x06
    1408:	8e 81       	ldd	r24, Y+6	; 0x06
    140a:	9f 81       	ldd	r25, Y+7	; 0x07
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	49 f1       	breq	.+82     	; 0x1464 <DIO_SetPinLevel+0x88>
    1412:	2e 81       	ldd	r18, Y+6	; 0x06
    1414:	3f 81       	ldd	r19, Y+7	; 0x07
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	2c f4       	brge	.+10     	; 0x1426 <DIO_SetPinLevel+0x4a>
    141c:	8e 81       	ldd	r24, Y+6	; 0x06
    141e:	9f 81       	ldd	r25, Y+7	; 0x07
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	61 f0       	breq	.+24     	; 0x143c <DIO_SetPinLevel+0x60>
    1424:	d2 c0       	rjmp	.+420    	; 0x15ca <DIO_SetPinLevel+0x1ee>
    1426:	2e 81       	ldd	r18, Y+6	; 0x06
    1428:	3f 81       	ldd	r19, Y+7	; 0x07
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	71 f1       	breq	.+92     	; 0x148c <DIO_SetPinLevel+0xb0>
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	e9 f1       	breq	.+122    	; 0x14b4 <DIO_SetPinLevel+0xd8>
    143a:	c7 c0       	rjmp	.+398    	; 0x15ca <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    143c:	ab e3       	ldi	r26, 0x3B	; 59
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	eb e3       	ldi	r30, 0x3B	; 59
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_SetPinLevel+0x7e>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_SetPinLevel+0x7a>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	b3 c0       	rjmp	.+358    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_SetPinLevel+0xa6>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_SetPinLevel+0xa2>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	9f c0       	rjmp	.+318    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    148c:	a5 e3       	ldi	r26, 0x35	; 53
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e3       	ldi	r30, 0x35	; 53
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_SetPinLevel+0xce>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_SetPinLevel+0xca>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	8b c0       	rjmp	.+278    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    14b4:	a2 e3       	ldi	r26, 0x32	; 50
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_SetPinLevel+0xf6>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_SetPinLevel+0xf2>
    14d6:	84 2b       	or	r24, r20
    14d8:	8c 93       	st	X, r24
    14da:	77 c0       	rjmp	.+238    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) 
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	88 23       	and	r24, r24
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <DIO_SetPinLevel+0x108>
    14e2:	73 c0       	rjmp	.+230    	; 0x15ca <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	3d 83       	std	Y+5, r19	; 0x05
    14ec:	2c 83       	std	Y+4, r18	; 0x04
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	59 f1       	breq	.+86     	; 0x154e <DIO_SetPinLevel+0x172>
    14f8:	2c 81       	ldd	r18, Y+4	; 0x04
    14fa:	3d 81       	ldd	r19, Y+5	; 0x05
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	2c f4       	brge	.+10     	; 0x150c <DIO_SetPinLevel+0x130>
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	69 f0       	breq	.+26     	; 0x1524 <DIO_SetPinLevel+0x148>
    150a:	5f c0       	rjmp	.+190    	; 0x15ca <DIO_SetPinLevel+0x1ee>
    150c:	2c 81       	ldd	r18, Y+4	; 0x04
    150e:	3d 81       	ldd	r19, Y+5	; 0x05
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	89 f1       	breq	.+98     	; 0x1578 <DIO_SetPinLevel+0x19c>
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <DIO_SetPinLevel+0x146>
    1520:	40 c0       	rjmp	.+128    	; 0x15a2 <DIO_SetPinLevel+0x1c6>
    1522:	53 c0       	rjmp	.+166    	; 0x15ca <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1524:	ab e3       	ldi	r26, 0x3B	; 59
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	eb e3       	ldi	r30, 0x3B	; 59
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_SetPinLevel+0x166>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_SetPinLevel+0x162>
    1546:	80 95       	com	r24
    1548:	84 23       	and	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	3e c0       	rjmp	.+124    	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    154e:	a8 e3       	ldi	r26, 0x38	; 56
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_SetPinLevel+0x190>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_SetPinLevel+0x18c>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	29 c0       	rjmp	.+82     	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1578:	a5 e3       	ldi	r26, 0x35	; 53
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_SetPinLevel+0x1ba>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_SetPinLevel+0x1b6>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    15a2:	a2 e3       	ldi	r26, 0x32	; 50
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e2 e3       	ldi	r30, 0x32	; 50
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_SetPinLevel+0x1e4>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_SetPinLevel+0x1e0>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    15ca:	27 96       	adiw	r28, 0x07	; 7
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	28 97       	sbiw	r28, 0x08	; 8
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	99 f5       	brne	.+102    	; 0x1660 <DIO_SetPortLevel+0x84>
        switch (port)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	38 87       	std	Y+8, r19	; 0x08
    1602:	2f 83       	std	Y+7, r18	; 0x07
    1604:	8f 81       	ldd	r24, Y+7	; 0x07
    1606:	98 85       	ldd	r25, Y+8	; 0x08
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	d1 f0       	breq	.+52     	; 0x1642 <DIO_SetPortLevel+0x66>
    160e:	2f 81       	ldd	r18, Y+7	; 0x07
    1610:	38 85       	ldd	r19, Y+8	; 0x08
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	2c f4       	brge	.+10     	; 0x1622 <DIO_SetPortLevel+0x46>
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 f0       	breq	.+24     	; 0x1638 <DIO_SetPortLevel+0x5c>
    1620:	83 c0       	rjmp	.+262    	; 0x1728 <DIO_SetPortLevel+0x14c>
    1622:	2f 81       	ldd	r18, Y+7	; 0x07
    1624:	38 85       	ldd	r19, Y+8	; 0x08
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	81 f0       	breq	.+32     	; 0x164c <DIO_SetPortLevel+0x70>
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	81 f0       	breq	.+32     	; 0x1656 <DIO_SetPortLevel+0x7a>
    1636:	78 c0       	rjmp	.+240    	; 0x1728 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    1638:	eb e3       	ldi	r30, 0x3B	; 59
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	80 83       	st	Z, r24
    1640:	73 c0       	rjmp	.+230    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	80 83       	st	Z, r24
    164a:	6e c0       	rjmp	.+220    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    164c:	e5 e3       	ldi	r30, 0x35	; 53
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	80 83       	st	Z, r24
    1654:	69 c0       	rjmp	.+210    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    1656:	e2 e3       	ldi	r30, 0x32	; 50
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	80 83       	st	Z, r24
    165e:	64 c0       	rjmp	.+200    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	88 23       	and	r24, r24
    1664:	79 f5       	brne	.+94     	; 0x16c4 <DIO_SetPortLevel+0xe8>
        switch (port)
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3e 83       	std	Y+6, r19	; 0x06
    166e:	2d 83       	std	Y+5, r18	; 0x05
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	c9 f0       	breq	.+50     	; 0x16ac <DIO_SetPortLevel+0xd0>
    167a:	2d 81       	ldd	r18, Y+5	; 0x05
    167c:	3e 81       	ldd	r19, Y+6	; 0x06
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	2c f4       	brge	.+10     	; 0x168e <DIO_SetPortLevel+0xb2>
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	61 f0       	breq	.+24     	; 0x16a4 <DIO_SetPortLevel+0xc8>
    168c:	4d c0       	rjmp	.+154    	; 0x1728 <DIO_SetPortLevel+0x14c>
    168e:	2d 81       	ldd	r18, Y+5	; 0x05
    1690:	3e 81       	ldd	r19, Y+6	; 0x06
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	71 f0       	breq	.+28     	; 0x16b4 <DIO_SetPortLevel+0xd8>
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	91 05       	cpc	r25, r1
    16a0:	69 f0       	breq	.+26     	; 0x16bc <DIO_SetPortLevel+0xe0>
    16a2:	42 c0       	rjmp	.+132    	; 0x1728 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	10 82       	st	Z, r1
    16aa:	3e c0       	rjmp	.+124    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    16ac:	e8 e3       	ldi	r30, 0x38	; 56
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	10 82       	st	Z, r1
    16b2:	3a c0       	rjmp	.+116    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    16b4:	e5 e3       	ldi	r30, 0x35	; 53
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	10 82       	st	Z, r1
    16ba:	36 c0       	rjmp	.+108    	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    16bc:	e2 e3       	ldi	r30, 0x32	; 50
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	10 82       	st	Z, r1
    16c2:	32 c0       	rjmp	.+100    	; 0x1728 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	3c 83       	std	Y+4, r19	; 0x04
    16cc:	2b 83       	std	Y+3, r18	; 0x03
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	d1 f0       	breq	.+52     	; 0x170c <DIO_SetPortLevel+0x130>
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	2c f4       	brge	.+10     	; 0x16ec <DIO_SetPortLevel+0x110>
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	61 f0       	breq	.+24     	; 0x1702 <DIO_SetPortLevel+0x126>
    16ea:	1e c0       	rjmp	.+60     	; 0x1728 <DIO_SetPortLevel+0x14c>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <DIO_SetPortLevel+0x13a>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <DIO_SetPortLevel+0x144>
    1700:	13 c0       	rjmp	.+38     	; 0x1728 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1702:	eb e3       	ldi	r30, 0x3B	; 59
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1716:	e5 e3       	ldi	r30, 0x35	; 53
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1728:	28 96       	adiw	r28, 0x08	; 8
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <DIO_ReadPinLevel+0x6>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <DIO_ReadPinLevel+0x8>
    1742:	0f 92       	push	r0
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    174c:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3d 83       	std	Y+5, r19	; 0x05
    1756:	2c 83       	std	Y+4, r18	; 0x04
    1758:	4c 81       	ldd	r20, Y+4	; 0x04
    175a:	5d 81       	ldd	r21, Y+5	; 0x05
    175c:	41 30       	cpi	r20, 0x01	; 1
    175e:	51 05       	cpc	r21, r1
    1760:	41 f1       	breq	.+80     	; 0x17b2 <DIO_ReadPinLevel+0x78>
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	91 05       	cpc	r25, r1
    176a:	34 f4       	brge	.+12     	; 0x1778 <DIO_ReadPinLevel+0x3e>
    176c:	2c 81       	ldd	r18, Y+4	; 0x04
    176e:	3d 81       	ldd	r19, Y+5	; 0x05
    1770:	21 15       	cp	r18, r1
    1772:	31 05       	cpc	r19, r1
    1774:	61 f0       	breq	.+24     	; 0x178e <DIO_ReadPinLevel+0x54>
    1776:	52 c0       	rjmp	.+164    	; 0x181c <DIO_ReadPinLevel+0xe2>
    1778:	4c 81       	ldd	r20, Y+4	; 0x04
    177a:	5d 81       	ldd	r21, Y+5	; 0x05
    177c:	42 30       	cpi	r20, 0x02	; 2
    177e:	51 05       	cpc	r21, r1
    1780:	51 f1       	breq	.+84     	; 0x17d6 <DIO_ReadPinLevel+0x9c>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	91 05       	cpc	r25, r1
    178a:	b9 f1       	breq	.+110    	; 0x17fa <DIO_ReadPinLevel+0xc0>
    178c:	47 c0       	rjmp	.+142    	; 0x181c <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    178e:	e9 e3       	ldi	r30, 0x39	; 57
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a9 01       	movw	r20, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_ReadPinLevel+0x6c>
    17a2:	55 95       	asr	r21
    17a4:	47 95       	ror	r20
    17a6:	8a 95       	dec	r24
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_ReadPinLevel+0x68>
    17aa:	ca 01       	movw	r24, r20
    17ac:	81 70       	andi	r24, 0x01	; 1
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	35 c0       	rjmp	.+106    	; 0x181c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    17b2:	e6 e3       	ldi	r30, 0x36	; 54
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	a9 01       	movw	r20, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_ReadPinLevel+0x90>
    17c6:	55 95       	asr	r21
    17c8:	47 95       	ror	r20
    17ca:	8a 95       	dec	r24
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_ReadPinLevel+0x8c>
    17ce:	ca 01       	movw	r24, r20
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	23 c0       	rjmp	.+70     	; 0x181c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    17d6:	e3 e3       	ldi	r30, 0x33	; 51
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_ReadPinLevel+0xb4>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_ReadPinLevel+0xb0>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	11 c0       	rjmp	.+34     	; 0x181c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    17fa:	e0 e3       	ldi	r30, 0x30	; 48
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_ReadPinLevel+0xd8>
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	8a 95       	dec	r24
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_ReadPinLevel+0xd4>
    1816:	ca 01       	movw	r24, r20
    1818:	81 70       	andi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_ReadPortLevel+0x6>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <DIO_ReadPortLevel+0x8>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    183c:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3c 83       	std	Y+4, r19	; 0x04
    1846:	2b 83       	std	Y+3, r18	; 0x03
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	49 f1       	breq	.+82     	; 0x18a4 <DIO_ReadPortLevel+0x76>
    1852:	2b 81       	ldd	r18, Y+3	; 0x03
    1854:	3c 81       	ldd	r19, Y+4	; 0x04
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <DIO_ReadPortLevel+0x38>
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	61 f0       	breq	.+24     	; 0x187c <DIO_ReadPortLevel+0x4e>
    1864:	5a c0       	rjmp	.+180    	; 0x191a <DIO_ReadPortLevel+0xec>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	71 f1       	breq	.+92     	; 0x18cc <DIO_ReadPortLevel+0x9e>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	e9 f1       	breq	.+122    	; 0x18f4 <DIO_ReadPortLevel+0xc6>
    187a:	4f c0       	rjmp	.+158    	; 0x191a <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    187c:	e9 e3       	ldi	r30, 0x39	; 57
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8f 3f       	cpi	r24, 0xFF	; 255
    1884:	19 f4       	brne	.+6      	; 0x188c <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	47 c0       	rjmp	.+142    	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    188c:	e9 e3       	ldi	r30, 0x39	; 57
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	11 f4       	brne	.+4      	; 0x189a <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1896:	19 82       	std	Y+1, r1	; 0x01
    1898:	40 c0       	rjmp	.+128    	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    189a:	e9 e3       	ldi	r30, 0x39	; 57
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	3b c0       	rjmp	.+118    	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    18a4:	e6 e3       	ldi	r30, 0x36	; 54
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 3f       	cpi	r24, 0xFF	; 255
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	33 c0       	rjmp	.+102    	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    18b4:	e6 e3       	ldi	r30, 0x36	; 54
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	88 23       	and	r24, r24
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    18be:	19 82       	std	Y+1, r1	; 0x01
    18c0:	2c c0       	rjmp	.+88     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    18c2:	e6 e3       	ldi	r30, 0x36	; 54
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	27 c0       	rjmp	.+78     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    18cc:	e3 e3       	ldi	r30, 0x33	; 51
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 3f       	cpi	r24, 0xFF	; 255
    18d4:	19 f4       	brne	.+6      	; 0x18dc <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	1f c0       	rjmp	.+62     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    18dc:	e3 e3       	ldi	r30, 0x33	; 51
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	88 23       	and	r24, r24
    18e4:	11 f4       	brne	.+4      	; 0x18ea <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    18e6:	19 82       	std	Y+1, r1	; 0x01
    18e8:	18 c0       	rjmp	.+48     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    18ea:	e3 e3       	ldi	r30, 0x33	; 51
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    18f4:	e0 e3       	ldi	r30, 0x30	; 48
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 3f       	cpi	r24, 0xFF	; 255
    18fc:	19 f4       	brne	.+6      	; 0x1904 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	0b c0       	rjmp	.+22     	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1904:	e0 e3       	ldi	r30, 0x30	; 48
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	88 23       	and	r24, r24
    190c:	11 f4       	brne	.+4      	; 0x1912 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	04 c0       	rjmp	.+8      	; 0x191a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1912:	e0 e3       	ldi	r30, 0x30	; 48
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <EEPROM_Init>:
#include "I2C.h"
#include "EEPROM.h"
#include "EEPROM_cfg.h"

void EEPROM_Init(void)
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
	I2C_InitMaster();
    1932:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <I2C_InitMaster>
}
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <EEPROM_Write_Byte>:

/*Send byte to EEPROM*/
void EEPROM_Write_Byte(u8 AddressSlave ,u8 AddressLocation,u8 Data)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <EEPROM_Write_Byte+0x6>
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	6a 83       	std	Y+2, r22	; 0x02
    194c:	4b 83       	std	Y+3, r20	; 0x03
	I2C_SendStartCondition();
    194e:	0e 94 65 17 	call	0x2eca	; 0x2eca <I2C_SendStartCondition>
	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	0e 94 80 17 	call	0x2f00	; 0x2f00 <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <I2C_MasterWriteDataByte>

	//write byte to eeprom
	I2C_MasterWriteDataByte(Data);
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	0e 94 80 17 	call	0x2f00	; 0x2f00 <I2C_MasterWriteDataByte>

	I2C_SendStopCondition();
    1964:	0e 94 75 17 	call	0x2eea	; 0x2eea <I2C_SendStopCondition>
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <EEPROM_Read_Byte>:

u8 EEPROM_Read_Byte(u8 AddressSlave ,u8 AddressLocation)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <EEPROM_Read_Byte+0x6>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	6a 83       	std	Y+2, r22	; 0x02

	I2C_SendStartCondition();
    1982:	0e 94 65 17 	call	0x2eca	; 0x2eca <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	0e 94 80 17 	call	0x2f00	; 0x2f00 <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <I2C_MasterWriteDataByte>

	//send a repeated start
	I2C_SendStartCondition();
    1992:	0e 94 65 17 	call	0x2eca	; 0x2eca <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=1 (Read)
	SET_BIT(AddressSlave,0);
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	81 60       	ori	r24, 0x01	; 1
    199a:	89 83       	std	Y+1, r24	; 0x01
	I2C_MasterWriteDataByte(AddressSlave);
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <I2C_MasterWriteDataByte>

	return I2C_MasterReadDataByteWith_NACK();
    19a2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <I2C_MasterReadDataByteWith_NACK>

	I2C_SendStopCondition();
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    19b8:	ab e5       	ldi	r26, 0x5B	; 91
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	eb e5       	ldi	r30, 0x5B	; 91
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	80 64       	ori	r24, 0x40	; 64
    19c4:	8c 93       	st	X, r24
    GlobalInterrupt_Enable(); // Global Interrupt Enable
    19c6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <GlobalInterrupt_Enable>
    SET_BIT(MCUCR, MCUCR_ISC01);
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_RISING_EDGE
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    19ca:	a5 e5       	ldi	r26, 0x55	; 85
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e5 e5       	ldi	r30, 0x55	; 85
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	81 60       	ori	r24, 0x01	; 1
    19d6:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    19d8:	a5 e5       	ldi	r26, 0x55	; 85
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e5       	ldi	r30, 0x55	; 85
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8d 7f       	andi	r24, 0xFD	; 253
    19e4:	8c 93       	st	X, r24
#endif
#endif



}
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    19f4:	af e5       	ldi	r26, 0x5F	; 95
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ef e5       	ldi	r30, 0x5F	; 95
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	8c 93       	st	X, r24
}
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1a10:	af e5       	ldi	r26, 0x5F	; 95
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	ef e5       	ldi	r30, 0x5F	; 95
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	8f 77       	andi	r24, 0x7F	; 127
    1a1c:	8c 93       	st	X, r24
}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <__vector_10>:
void (*Gpt_Timer2_Callback_Ctc)(void);
void (*Gpt_Timer2_Callback_Normal)(void);

/************ ISR ************/
ISR(VECTOR_TIMER0_CTC)
{
    1a24:	1f 92       	push	r1
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	0f 92       	push	r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Ctc();
    1a4e:	e0 91 df 01 	lds	r30, 0x01DF
    1a52:	f0 91 e0 01 	lds	r31, 0x01E0
    1a56:	09 95       	icall
}
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	ff 91       	pop	r31
    1a5e:	ef 91       	pop	r30
    1a60:	bf 91       	pop	r27
    1a62:	af 91       	pop	r26
    1a64:	9f 91       	pop	r25
    1a66:	8f 91       	pop	r24
    1a68:	7f 91       	pop	r23
    1a6a:	6f 91       	pop	r22
    1a6c:	5f 91       	pop	r21
    1a6e:	4f 91       	pop	r20
    1a70:	3f 91       	pop	r19
    1a72:	2f 91       	pop	r18
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__vector_11>:
ISR(VECTOR_TIMER0_NORM)
{
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	2f 93       	push	r18
    1a8a:	3f 93       	push	r19
    1a8c:	4f 93       	push	r20
    1a8e:	5f 93       	push	r21
    1a90:	6f 93       	push	r22
    1a92:	7f 93       	push	r23
    1a94:	8f 93       	push	r24
    1a96:	9f 93       	push	r25
    1a98:	af 93       	push	r26
    1a9a:	bf 93       	push	r27
    1a9c:	ef 93       	push	r30
    1a9e:	ff 93       	push	r31
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Normal();
    1aa8:	e0 91 e9 01 	lds	r30, 0x01E9
    1aac:	f0 91 ea 01 	lds	r31, 0x01EA
    1ab0:	09 95       	icall
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	ff 91       	pop	r31
    1ab8:	ef 91       	pop	r30
    1aba:	bf 91       	pop	r27
    1abc:	af 91       	pop	r26
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	7f 91       	pop	r23
    1ac4:	6f 91       	pop	r22
    1ac6:	5f 91       	pop	r21
    1ac8:	4f 91       	pop	r20
    1aca:	3f 91       	pop	r19
    1acc:	2f 91       	pop	r18
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	0f 90       	pop	r0
    1ad4:	1f 90       	pop	r1
    1ad6:	18 95       	reti

00001ad8 <__vector_9>:
ISR(VECTOR_TIMER1_NORM)
{
    1ad8:	1f 92       	push	r1
    1ada:	0f 92       	push	r0
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	0f 92       	push	r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	2f 93       	push	r18
    1ae4:	3f 93       	push	r19
    1ae6:	4f 93       	push	r20
    1ae8:	5f 93       	push	r21
    1aea:	6f 93       	push	r22
    1aec:	7f 93       	push	r23
    1aee:	8f 93       	push	r24
    1af0:	9f 93       	push	r25
    1af2:	af 93       	push	r26
    1af4:	bf 93       	push	r27
    1af6:	ef 93       	push	r30
    1af8:	ff 93       	push	r31
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1_Callback_Normal();
    1b02:	e0 91 eb 01 	lds	r30, 0x01EB
    1b06:	f0 91 ec 01 	lds	r31, 0x01EC
    1b0a:	09 95       	icall
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_7>:
ISR(VECTOR_TIMER1A_CTC)
{
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	2f 93       	push	r18
    1b3e:	3f 93       	push	r19
    1b40:	4f 93       	push	r20
    1b42:	5f 93       	push	r21
    1b44:	6f 93       	push	r22
    1b46:	7f 93       	push	r23
    1b48:	8f 93       	push	r24
    1b4a:	9f 93       	push	r25
    1b4c:	af 93       	push	r26
    1b4e:	bf 93       	push	r27
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1A_Callback_Ctc();
    1b5c:	e0 91 e7 01 	lds	r30, 0x01E7
    1b60:	f0 91 e8 01 	lds	r31, 0x01E8
    1b64:	09 95       	icall
}
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	ff 91       	pop	r31
    1b6c:	ef 91       	pop	r30
    1b6e:	bf 91       	pop	r27
    1b70:	af 91       	pop	r26
    1b72:	9f 91       	pop	r25
    1b74:	8f 91       	pop	r24
    1b76:	7f 91       	pop	r23
    1b78:	6f 91       	pop	r22
    1b7a:	5f 91       	pop	r21
    1b7c:	4f 91       	pop	r20
    1b7e:	3f 91       	pop	r19
    1b80:	2f 91       	pop	r18
    1b82:	0f 90       	pop	r0
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	0f 90       	pop	r0
    1b88:	1f 90       	pop	r1
    1b8a:	18 95       	reti

00001b8c <__vector_8>:
ISR(VECTOR_TIMER1B_CTC)
{
    1b8c:	1f 92       	push	r1
    1b8e:	0f 92       	push	r0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	0f 92       	push	r0
    1b94:	11 24       	eor	r1, r1
    1b96:	2f 93       	push	r18
    1b98:	3f 93       	push	r19
    1b9a:	4f 93       	push	r20
    1b9c:	5f 93       	push	r21
    1b9e:	6f 93       	push	r22
    1ba0:	7f 93       	push	r23
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	af 93       	push	r26
    1ba8:	bf 93       	push	r27
    1baa:	ef 93       	push	r30
    1bac:	ff 93       	push	r31
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1B_Callback_Ctc();
    1bb6:	e0 91 e3 01 	lds	r30, 0x01E3
    1bba:	f0 91 e4 01 	lds	r31, 0x01E4
    1bbe:	09 95       	icall
}
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	ff 91       	pop	r31
    1bc6:	ef 91       	pop	r30
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	0f 90       	pop	r0
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	0f 90       	pop	r0
    1be2:	1f 90       	pop	r1
    1be4:	18 95       	reti

00001be6 <__vector_5>:
ISR(VECTOR_TIMER2_NORM)
{
    1be6:	1f 92       	push	r1
    1be8:	0f 92       	push	r0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Normal();
    1c10:	e0 91 e5 01 	lds	r30, 0x01E5
    1c14:	f0 91 e6 01 	lds	r31, 0x01E6
    1c18:	09 95       	icall
}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	ff 91       	pop	r31
    1c20:	ef 91       	pop	r30
    1c22:	bf 91       	pop	r27
    1c24:	af 91       	pop	r26
    1c26:	9f 91       	pop	r25
    1c28:	8f 91       	pop	r24
    1c2a:	7f 91       	pop	r23
    1c2c:	6f 91       	pop	r22
    1c2e:	5f 91       	pop	r21
    1c30:	4f 91       	pop	r20
    1c32:	3f 91       	pop	r19
    1c34:	2f 91       	pop	r18
    1c36:	0f 90       	pop	r0
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	0f 90       	pop	r0
    1c3c:	1f 90       	pop	r1
    1c3e:	18 95       	reti

00001c40 <__vector_4>:
ISR(VECTOR_TIMER2_CTC)
{
    1c40:	1f 92       	push	r1
    1c42:	0f 92       	push	r0
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	0f 92       	push	r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	2f 93       	push	r18
    1c4c:	3f 93       	push	r19
    1c4e:	4f 93       	push	r20
    1c50:	5f 93       	push	r21
    1c52:	6f 93       	push	r22
    1c54:	7f 93       	push	r23
    1c56:	8f 93       	push	r24
    1c58:	9f 93       	push	r25
    1c5a:	af 93       	push	r26
    1c5c:	bf 93       	push	r27
    1c5e:	ef 93       	push	r30
    1c60:	ff 93       	push	r31
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Ctc();
    1c6a:	e0 91 e1 01 	lds	r30, 0x01E1
    1c6e:	f0 91 e2 01 	lds	r31, 0x01E2
    1c72:	09 95       	icall
}
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	ff 91       	pop	r31
    1c7a:	ef 91       	pop	r30
    1c7c:	bf 91       	pop	r27
    1c7e:	af 91       	pop	r26
    1c80:	9f 91       	pop	r25
    1c82:	8f 91       	pop	r24
    1c84:	7f 91       	pop	r23
    1c86:	6f 91       	pop	r22
    1c88:	5f 91       	pop	r21
    1c8a:	4f 91       	pop	r20
    1c8c:	3f 91       	pop	r19
    1c8e:	2f 91       	pop	r18
    1c90:	0f 90       	pop	r0
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	0f 90       	pop	r0
    1c96:	1f 90       	pop	r1
    1c98:	18 95       	reti

00001c9a <Gpt_Init>:

Gpt_ReturnType Gpt_Init(Gpt_ConfigType *config)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	65 97       	sbiw	r28, 0x15	; 21
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	9b 83       	std	Y+3, r25	; 0x03
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    Gpt_ReturnType returnValue = GPT_OK;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    1cb6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cb8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cba:	80 81       	ld	r24, Z
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	3d 8b       	std	Y+21, r19	; 0x15
    1cc2:	2c 8b       	std	Y+20, r18	; 0x14
    1cc4:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc6:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	91 05       	cpc	r25, r1
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <Gpt_Init+0x36>
    1cce:	92 c1       	rjmp	.+804    	; 0x1ff4 <Gpt_Init+0x35a>
    1cd0:	2c 89       	ldd	r18, Y+20	; 0x14
    1cd2:	3d 89       	ldd	r19, Y+21	; 0x15
    1cd4:	22 30       	cpi	r18, 0x02	; 2
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <Gpt_Init+0x4a>
    1cda:	8c 89       	ldd	r24, Y+20	; 0x14
    1cdc:	9d 89       	ldd	r25, Y+21	; 0x15
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	71 f0       	breq	.+28     	; 0x1cfe <Gpt_Init+0x64>
    1ce2:	2a c6       	rjmp	.+3156   	; 0x2938 <Gpt_Init+0xc9e>
    1ce4:	2c 89       	ldd	r18, Y+20	; 0x14
    1ce6:	3d 89       	ldd	r19, Y+21	; 0x15
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <Gpt_Init+0x56>
    1cee:	19 c3       	rjmp	.+1586   	; 0x2322 <Gpt_Init+0x688>
    1cf0:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf2:	9d 89       	ldd	r25, Y+21	; 0x15
    1cf4:	83 30       	cpi	r24, 0x03	; 3
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <Gpt_Init+0x62>
    1cfa:	aa c4       	rjmp	.+2388   	; 0x2650 <Gpt_Init+0x9b6>
    1cfc:	1d c6       	rjmp	.+3130   	; 0x2938 <Gpt_Init+0xc9e>
    {

    case GPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    1cfe:	ea 81       	ldd	r30, Y+2	; 0x02
    1d00:	fb 81       	ldd	r31, Y+3	; 0x03
    1d02:	81 81       	ldd	r24, Z+1	; 0x01
    1d04:	88 23       	and	r24, r24
    1d06:	79 f4       	brne	.+30     	; 0x1d26 <Gpt_Init+0x8c>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    1d08:	a3 e5       	ldi	r26, 0x53	; 83
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e3 e5       	ldi	r30, 0x53	; 83
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	8f 7b       	andi	r24, 0xBF	; 191
    1d14:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    1d16:	a3 e5       	ldi	r26, 0x53	; 83
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e3 e5       	ldi	r30, 0x53	; 83
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	87 7f       	andi	r24, 0xF7	; 247
    1d22:	8c 93       	st	X, r24
    1d24:	15 c0       	rjmp	.+42     	; 0x1d50 <Gpt_Init+0xb6>
        }
        else if (config->mode == GPT_MODE_CTC)
    1d26:	ea 81       	ldd	r30, Y+2	; 0x02
    1d28:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2a:	81 81       	ldd	r24, Z+1	; 0x01
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	79 f4       	brne	.+30     	; 0x1d4e <Gpt_Init+0xb4>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    1d30:	a3 e5       	ldi	r26, 0x53	; 83
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e3 e5       	ldi	r30, 0x53	; 83
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 7b       	andi	r24, 0xBF	; 191
    1d3c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    1d3e:	a3 e5       	ldi	r26, 0x53	; 83
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e3 e5       	ldi	r30, 0x53	; 83
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	88 60       	ori	r24, 0x08	; 8
    1d4a:	8c 93       	st	X, r24
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <Gpt_Init+0xb6>
        }
        else
        {
            returnValue = GPT_ERROR;
    1d4e:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    1d50:	ea 81       	ldd	r30, Y+2	; 0x02
    1d52:	fb 81       	ldd	r31, Y+3	; 0x03
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3b 8b       	std	Y+19, r19	; 0x13
    1d5c:	2a 8b       	std	Y+18, r18	; 0x12
    1d5e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d60:	9b 89       	ldd	r25, Y+19	; 0x13
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	21 f1       	breq	.+72     	; 0x1db0 <Gpt_Init+0x116>
    1d68:	2a 89       	ldd	r18, Y+18	; 0x12
    1d6a:	3b 89       	ldd	r19, Y+19	; 0x13
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <Gpt_Init+0xe2>
    1d72:	8a 89       	ldd	r24, Y+18	; 0x12
    1d74:	9b 89       	ldd	r25, Y+19	; 0x13
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	61 f0       	breq	.+24     	; 0x1d92 <Gpt_Init+0xf8>
    1d7a:	47 c0       	rjmp	.+142    	; 0x1e0a <Gpt_Init+0x170>
    1d7c:	2a 89       	ldd	r18, Y+18	; 0x12
    1d7e:	3b 89       	ldd	r19, Y+19	; 0x13
    1d80:	22 30       	cpi	r18, 0x02	; 2
    1d82:	31 05       	cpc	r19, r1
    1d84:	21 f1       	breq	.+72     	; 0x1dce <Gpt_Init+0x134>
    1d86:	8a 89       	ldd	r24, Y+18	; 0x12
    1d88:	9b 89       	ldd	r25, Y+19	; 0x13
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	71 f1       	breq	.+92     	; 0x1dec <Gpt_Init+0x152>
    1d90:	3c c0       	rjmp	.+120    	; 0x1e0a <Gpt_Init+0x170>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    1d92:	a3 e5       	ldi	r26, 0x53	; 83
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e3 e5       	ldi	r30, 0x53	; 83
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8f 7e       	andi	r24, 0xEF	; 239
    1d9e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    1da0:	a3 e5       	ldi	r26, 0x53	; 83
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e3 e5       	ldi	r30, 0x53	; 83
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	8f 7d       	andi	r24, 0xDF	; 223
    1dac:	8c 93       	st	X, r24
    1dae:	2e c0       	rjmp	.+92     	; 0x1e0c <Gpt_Init+0x172>
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR0, TCCR0_COM00);
    1db0:	a3 e5       	ldi	r26, 0x53	; 83
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e3 e5       	ldi	r30, 0x53	; 83
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	80 61       	ori	r24, 0x10	; 16
    1dbc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    1dbe:	a3 e5       	ldi	r26, 0x53	; 83
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e3 e5       	ldi	r30, 0x53	; 83
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8f 7d       	andi	r24, 0xDF	; 223
    1dca:	8c 93       	st	X, r24
    1dcc:	1f c0       	rjmp	.+62     	; 0x1e0c <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    1dce:	a3 e5       	ldi	r26, 0x53	; 83
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e3 e5       	ldi	r30, 0x53	; 83
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 61       	ori	r24, 0x10	; 16
    1dda:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    1ddc:	a3 e5       	ldi	r26, 0x53	; 83
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e3 e5       	ldi	r30, 0x53	; 83
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	80 62       	ori	r24, 0x20	; 32
    1de8:	8c 93       	st	X, r24
    1dea:	10 c0       	rjmp	.+32     	; 0x1e0c <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    1dec:	a3 e5       	ldi	r26, 0x53	; 83
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e3 e5       	ldi	r30, 0x53	; 83
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 7e       	andi	r24, 0xEF	; 239
    1df8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    1dfa:	a3 e5       	ldi	r26, 0x53	; 83
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e3 e5       	ldi	r30, 0x53	; 83
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	80 62       	ori	r24, 0x20	; 32
    1e06:	8c 93       	st	X, r24
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <Gpt_Init+0x172>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    1e0c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e0e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e10:	83 81       	ldd	r24, Z+3	; 0x03
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	39 8b       	std	Y+17, r19	; 0x11
    1e18:	28 8b       	std	Y+16, r18	; 0x10
    1e1a:	88 89       	ldd	r24, Y+16	; 0x10
    1e1c:	99 89       	ldd	r25, Y+17	; 0x11
    1e1e:	84 30       	cpi	r24, 0x04	; 4
    1e20:	91 05       	cpc	r25, r1
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <Gpt_Init+0x18c>
    1e24:	77 c0       	rjmp	.+238    	; 0x1f14 <Gpt_Init+0x27a>
    1e26:	28 89       	ldd	r18, Y+16	; 0x10
    1e28:	39 89       	ldd	r19, Y+17	; 0x11
    1e2a:	25 30       	cpi	r18, 0x05	; 5
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	8c f4       	brge	.+34     	; 0x1e52 <Gpt_Init+0x1b8>
    1e30:	88 89       	ldd	r24, Y+16	; 0x10
    1e32:	99 89       	ldd	r25, Y+17	; 0x11
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	91 05       	cpc	r25, r1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <Gpt_Init+0x1a2>
    1e3a:	40 c0       	rjmp	.+128    	; 0x1ebc <Gpt_Init+0x222>
    1e3c:	28 89       	ldd	r18, Y+16	; 0x10
    1e3e:	39 89       	ldd	r19, Y+17	; 0x11
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	31 05       	cpc	r19, r1
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <Gpt_Init+0x1ae>
    1e46:	50 c0       	rjmp	.+160    	; 0x1ee8 <Gpt_Init+0x24e>
    1e48:	88 89       	ldd	r24, Y+16	; 0x10
    1e4a:	99 89       	ldd	r25, Y+17	; 0x11
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	01 f1       	breq	.+64     	; 0x1e90 <Gpt_Init+0x1f6>
    1e50:	cf c0       	rjmp	.+414    	; 0x1ff0 <Gpt_Init+0x356>
    1e52:	28 89       	ldd	r18, Y+16	; 0x10
    1e54:	39 89       	ldd	r19, Y+17	; 0x11
    1e56:	27 30       	cpi	r18, 0x07	; 7
    1e58:	31 05       	cpc	r19, r1
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <Gpt_Init+0x1c4>
    1e5c:	87 c0       	rjmp	.+270    	; 0x1f6c <Gpt_Init+0x2d2>
    1e5e:	88 89       	ldd	r24, Y+16	; 0x10
    1e60:	99 89       	ldd	r25, Y+17	; 0x11
    1e62:	88 30       	cpi	r24, 0x08	; 8
    1e64:	91 05       	cpc	r25, r1
    1e66:	3c f4       	brge	.+14     	; 0x1e76 <Gpt_Init+0x1dc>
    1e68:	28 89       	ldd	r18, Y+16	; 0x10
    1e6a:	39 89       	ldd	r19, Y+17	; 0x11
    1e6c:	26 30       	cpi	r18, 0x06	; 6
    1e6e:	31 05       	cpc	r19, r1
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <Gpt_Init+0x1da>
    1e72:	66 c0       	rjmp	.+204    	; 0x1f40 <Gpt_Init+0x2a6>
    1e74:	bd c0       	rjmp	.+378    	; 0x1ff0 <Gpt_Init+0x356>
    1e76:	88 89       	ldd	r24, Y+16	; 0x10
    1e78:	99 89       	ldd	r25, Y+17	; 0x11
    1e7a:	88 30       	cpi	r24, 0x08	; 8
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <Gpt_Init+0x1e8>
    1e80:	8b c0       	rjmp	.+278    	; 0x1f98 <Gpt_Init+0x2fe>
    1e82:	28 89       	ldd	r18, Y+16	; 0x10
    1e84:	39 89       	ldd	r19, Y+17	; 0x11
    1e86:	29 30       	cpi	r18, 0x09	; 9
    1e88:	31 05       	cpc	r19, r1
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <Gpt_Init+0x1f4>
    1e8c:	9b c0       	rjmp	.+310    	; 0x1fc4 <Gpt_Init+0x32a>
    1e8e:	b0 c0       	rjmp	.+352    	; 0x1ff0 <Gpt_Init+0x356>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    1e90:	a3 e5       	ldi	r26, 0x53	; 83
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e3 e5       	ldi	r30, 0x53	; 83
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	8e 7f       	andi	r24, 0xFE	; 254
    1e9c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    1e9e:	a3 e5       	ldi	r26, 0x53	; 83
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e3 e5       	ldi	r30, 0x53	; 83
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8d 7f       	andi	r24, 0xFD	; 253
    1eaa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    1eac:	a3 e5       	ldi	r26, 0x53	; 83
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e3 e5       	ldi	r30, 0x53	; 83
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8b 7f       	andi	r24, 0xFB	; 251
    1eb8:	8c 93       	st	X, r24
    1eba:	3f c5       	rjmp	.+2686   	; 0x293a <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    1ebc:	a3 e5       	ldi	r26, 0x53	; 83
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e3 e5       	ldi	r30, 0x53	; 83
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	81 60       	ori	r24, 0x01	; 1
    1ec8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    1eca:	a3 e5       	ldi	r26, 0x53	; 83
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e3 e5       	ldi	r30, 0x53	; 83
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8d 7f       	andi	r24, 0xFD	; 253
    1ed6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    1ed8:	a3 e5       	ldi	r26, 0x53	; 83
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e3 e5       	ldi	r30, 0x53	; 83
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8b 7f       	andi	r24, 0xFB	; 251
    1ee4:	8c 93       	st	X, r24
    1ee6:	29 c5       	rjmp	.+2642   	; 0x293a <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    1ee8:	a3 e5       	ldi	r26, 0x53	; 83
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e3 e5       	ldi	r30, 0x53	; 83
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8e 7f       	andi	r24, 0xFE	; 254
    1ef4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    1ef6:	a3 e5       	ldi	r26, 0x53	; 83
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e3 e5       	ldi	r30, 0x53	; 83
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	82 60       	ori	r24, 0x02	; 2
    1f02:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    1f04:	a3 e5       	ldi	r26, 0x53	; 83
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e3 e5       	ldi	r30, 0x53	; 83
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8b 7f       	andi	r24, 0xFB	; 251
    1f10:	8c 93       	st	X, r24
    1f12:	13 c5       	rjmp	.+2598   	; 0x293a <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    1f14:	a3 e5       	ldi	r26, 0x53	; 83
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e3 e5       	ldi	r30, 0x53	; 83
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	81 60       	ori	r24, 0x01	; 1
    1f20:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    1f22:	a3 e5       	ldi	r26, 0x53	; 83
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e3 e5       	ldi	r30, 0x53	; 83
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	82 60       	ori	r24, 0x02	; 2
    1f2e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    1f30:	a3 e5       	ldi	r26, 0x53	; 83
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e3 e5       	ldi	r30, 0x53	; 83
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8b 7f       	andi	r24, 0xFB	; 251
    1f3c:	8c 93       	st	X, r24
    1f3e:	fd c4       	rjmp	.+2554   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    1f40:	a3 e5       	ldi	r26, 0x53	; 83
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e3 e5       	ldi	r30, 0x53	; 83
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8e 7f       	andi	r24, 0xFE	; 254
    1f4c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    1f4e:	a3 e5       	ldi	r26, 0x53	; 83
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e3 e5       	ldi	r30, 0x53	; 83
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8d 7f       	andi	r24, 0xFD	; 253
    1f5a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    1f5c:	a3 e5       	ldi	r26, 0x53	; 83
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e3 e5       	ldi	r30, 0x53	; 83
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	84 60       	ori	r24, 0x04	; 4
    1f68:	8c 93       	st	X, r24
    1f6a:	e7 c4       	rjmp	.+2510   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    1f6c:	a3 e5       	ldi	r26, 0x53	; 83
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e3 e5       	ldi	r30, 0x53	; 83
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	81 60       	ori	r24, 0x01	; 1
    1f78:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    1f7a:	a3 e5       	ldi	r26, 0x53	; 83
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 e5       	ldi	r30, 0x53	; 83
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8d 7f       	andi	r24, 0xFD	; 253
    1f86:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    1f88:	a3 e5       	ldi	r26, 0x53	; 83
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e3 e5       	ldi	r30, 0x53	; 83
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	84 60       	ori	r24, 0x04	; 4
    1f94:	8c 93       	st	X, r24
    1f96:	d1 c4       	rjmp	.+2466   	; 0x293a <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    1f98:	a3 e5       	ldi	r26, 0x53	; 83
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e3 e5       	ldi	r30, 0x53	; 83
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	8e 7f       	andi	r24, 0xFE	; 254
    1fa4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    1fa6:	a3 e5       	ldi	r26, 0x53	; 83
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e3 e5       	ldi	r30, 0x53	; 83
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	82 60       	ori	r24, 0x02	; 2
    1fb2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    1fb4:	a3 e5       	ldi	r26, 0x53	; 83
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e3 e5       	ldi	r30, 0x53	; 83
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	84 60       	ori	r24, 0x04	; 4
    1fc0:	8c 93       	st	X, r24
    1fc2:	bb c4       	rjmp	.+2422   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    1fc4:	a3 e5       	ldi	r26, 0x53	; 83
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e3 e5       	ldi	r30, 0x53	; 83
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	81 60       	ori	r24, 0x01	; 1
    1fd0:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    1fd2:	a3 e5       	ldi	r26, 0x53	; 83
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e3 e5       	ldi	r30, 0x53	; 83
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	82 60       	ori	r24, 0x02	; 2
    1fde:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    1fe0:	a3 e5       	ldi	r26, 0x53	; 83
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e3 e5       	ldi	r30, 0x53	; 83
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	84 60       	ori	r24, 0x04	; 4
    1fec:	8c 93       	st	X, r24
    1fee:	a5 c4       	rjmp	.+2378   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    1ff0:	19 82       	std	Y+1, r1	; 0x01
    1ff2:	a3 c4       	rjmp	.+2374   	; 0x293a <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    1ff4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ff6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ff8:	81 81       	ldd	r24, Z+1	; 0x01
    1ffa:	88 23       	and	r24, r24
    1ffc:	e9 f4       	brne	.+58     	; 0x2038 <Gpt_Init+0x39e>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1ffe:	af e4       	ldi	r26, 0x4F	; 79
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ef e4       	ldi	r30, 0x4F	; 79
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8e 7f       	andi	r24, 0xFE	; 254
    200a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    200c:	af e4       	ldi	r26, 0x4F	; 79
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	ef e4       	ldi	r30, 0x4F	; 79
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8d 7f       	andi	r24, 0xFD	; 253
    2018:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    201a:	ae e4       	ldi	r26, 0x4E	; 78
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	ee e4       	ldi	r30, 0x4E	; 78
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	87 7f       	andi	r24, 0xF7	; 247
    2026:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2028:	ae e4       	ldi	r26, 0x4E	; 78
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	ee e4       	ldi	r30, 0x4E	; 78
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 7e       	andi	r24, 0xEF	; 239
    2034:	8c 93       	st	X, r24
    2036:	23 c0       	rjmp	.+70     	; 0x207e <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2038:	ea 81       	ldd	r30, Y+2	; 0x02
    203a:	fb 81       	ldd	r31, Y+3	; 0x03
    203c:	81 81       	ldd	r24, Z+1	; 0x01
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	e9 f4       	brne	.+58     	; 0x207c <Gpt_Init+0x3e2>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2042:	af e4       	ldi	r26, 0x4F	; 79
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	ef e4       	ldi	r30, 0x4F	; 79
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	8e 7f       	andi	r24, 0xFE	; 254
    204e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2050:	af e4       	ldi	r26, 0x4F	; 79
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	ef e4       	ldi	r30, 0x4F	; 79
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8d 7f       	andi	r24, 0xFD	; 253
    205c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    205e:	ae e4       	ldi	r26, 0x4E	; 78
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	ee e4       	ldi	r30, 0x4E	; 78
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	88 60       	ori	r24, 0x08	; 8
    206a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    206c:	ae e4       	ldi	r26, 0x4E	; 78
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ee e4       	ldi	r30, 0x4E	; 78
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8f 7e       	andi	r24, 0xEF	; 239
    2078:	8c 93       	st	X, r24
    207a:	01 c0       	rjmp	.+2      	; 0x207e <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    207c:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    207e:	ea 81       	ldd	r30, Y+2	; 0x02
    2080:	fb 81       	ldd	r31, Y+3	; 0x03
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	3f 87       	std	Y+15, r19	; 0x0f
    208a:	2e 87       	std	Y+14, r18	; 0x0e
    208c:	8e 85       	ldd	r24, Y+14	; 0x0e
    208e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	91 05       	cpc	r25, r1
    2094:	21 f1       	breq	.+72     	; 0x20de <Gpt_Init+0x444>
    2096:	2e 85       	ldd	r18, Y+14	; 0x0e
    2098:	3f 85       	ldd	r19, Y+15	; 0x0f
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	2c f4       	brge	.+10     	; 0x20aa <Gpt_Init+0x410>
    20a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <Gpt_Init+0x426>
    20a8:	47 c0       	rjmp	.+142    	; 0x2138 <Gpt_Init+0x49e>
    20aa:	2e 85       	ldd	r18, Y+14	; 0x0e
    20ac:	3f 85       	ldd	r19, Y+15	; 0x0f
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	31 05       	cpc	r19, r1
    20b2:	21 f1       	breq	.+72     	; 0x20fc <Gpt_Init+0x462>
    20b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	91 05       	cpc	r25, r1
    20bc:	71 f1       	breq	.+92     	; 0x211a <Gpt_Init+0x480>
    20be:	3c c0       	rjmp	.+120    	; 0x2138 <Gpt_Init+0x49e>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    20c0:	af e4       	ldi	r26, 0x4F	; 79
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	ef e4       	ldi	r30, 0x4F	; 79
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8f 7b       	andi	r24, 0xBF	; 191
    20cc:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    20ce:	af e4       	ldi	r26, 0x4F	; 79
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ef e4       	ldi	r30, 0x4F	; 79
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8f 77       	andi	r24, 0x7F	; 127
    20da:	8c 93       	st	X, r24
    20dc:	2e c0       	rjmp	.+92     	; 0x213a <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    20de:	af e4       	ldi	r26, 0x4F	; 79
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	ef e4       	ldi	r30, 0x4F	; 79
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	80 64       	ori	r24, 0x40	; 64
    20ea:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    20ec:	af e4       	ldi	r26, 0x4F	; 79
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	ef e4       	ldi	r30, 0x4F	; 79
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8f 77       	andi	r24, 0x7F	; 127
    20f8:	8c 93       	st	X, r24
    20fa:	1f c0       	rjmp	.+62     	; 0x213a <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    20fc:	af e4       	ldi	r26, 0x4F	; 79
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	ef e4       	ldi	r30, 0x4F	; 79
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	80 64       	ori	r24, 0x40	; 64
    2108:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    210a:	af e4       	ldi	r26, 0x4F	; 79
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	ef e4       	ldi	r30, 0x4F	; 79
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	80 68       	ori	r24, 0x80	; 128
    2116:	8c 93       	st	X, r24
    2118:	10 c0       	rjmp	.+32     	; 0x213a <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    211a:	af e4       	ldi	r26, 0x4F	; 79
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	ef e4       	ldi	r30, 0x4F	; 79
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	8f 7b       	andi	r24, 0xBF	; 191
    2126:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2128:	af e4       	ldi	r26, 0x4F	; 79
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	ef e4       	ldi	r30, 0x4F	; 79
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	80 68       	ori	r24, 0x80	; 128
    2134:	8c 93       	st	X, r24
    2136:	01 c0       	rjmp	.+2      	; 0x213a <Gpt_Init+0x4a0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2138:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    213a:	ea 81       	ldd	r30, Y+2	; 0x02
    213c:	fb 81       	ldd	r31, Y+3	; 0x03
    213e:	83 81       	ldd	r24, Z+3	; 0x03
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3d 87       	std	Y+13, r19	; 0x0d
    2146:	2c 87       	std	Y+12, r18	; 0x0c
    2148:	8c 85       	ldd	r24, Y+12	; 0x0c
    214a:	9d 85       	ldd	r25, Y+13	; 0x0d
    214c:	84 30       	cpi	r24, 0x04	; 4
    214e:	91 05       	cpc	r25, r1
    2150:	09 f4       	brne	.+2      	; 0x2154 <Gpt_Init+0x4ba>
    2152:	77 c0       	rjmp	.+238    	; 0x2242 <Gpt_Init+0x5a8>
    2154:	2c 85       	ldd	r18, Y+12	; 0x0c
    2156:	3d 85       	ldd	r19, Y+13	; 0x0d
    2158:	25 30       	cpi	r18, 0x05	; 5
    215a:	31 05       	cpc	r19, r1
    215c:	8c f4       	brge	.+34     	; 0x2180 <Gpt_Init+0x4e6>
    215e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2160:	9d 85       	ldd	r25, Y+13	; 0x0d
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	91 05       	cpc	r25, r1
    2166:	09 f4       	brne	.+2      	; 0x216a <Gpt_Init+0x4d0>
    2168:	40 c0       	rjmp	.+128    	; 0x21ea <Gpt_Init+0x550>
    216a:	2c 85       	ldd	r18, Y+12	; 0x0c
    216c:	3d 85       	ldd	r19, Y+13	; 0x0d
    216e:	22 30       	cpi	r18, 0x02	; 2
    2170:	31 05       	cpc	r19, r1
    2172:	09 f4       	brne	.+2      	; 0x2176 <Gpt_Init+0x4dc>
    2174:	50 c0       	rjmp	.+160    	; 0x2216 <Gpt_Init+0x57c>
    2176:	8c 85       	ldd	r24, Y+12	; 0x0c
    2178:	9d 85       	ldd	r25, Y+13	; 0x0d
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	01 f1       	breq	.+64     	; 0x21be <Gpt_Init+0x524>
    217e:	cf c0       	rjmp	.+414    	; 0x231e <Gpt_Init+0x684>
    2180:	2c 85       	ldd	r18, Y+12	; 0x0c
    2182:	3d 85       	ldd	r19, Y+13	; 0x0d
    2184:	27 30       	cpi	r18, 0x07	; 7
    2186:	31 05       	cpc	r19, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <Gpt_Init+0x4f2>
    218a:	87 c0       	rjmp	.+270    	; 0x229a <Gpt_Init+0x600>
    218c:	8c 85       	ldd	r24, Y+12	; 0x0c
    218e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2190:	88 30       	cpi	r24, 0x08	; 8
    2192:	91 05       	cpc	r25, r1
    2194:	3c f4       	brge	.+14     	; 0x21a4 <Gpt_Init+0x50a>
    2196:	2c 85       	ldd	r18, Y+12	; 0x0c
    2198:	3d 85       	ldd	r19, Y+13	; 0x0d
    219a:	26 30       	cpi	r18, 0x06	; 6
    219c:	31 05       	cpc	r19, r1
    219e:	09 f4       	brne	.+2      	; 0x21a2 <Gpt_Init+0x508>
    21a0:	66 c0       	rjmp	.+204    	; 0x226e <Gpt_Init+0x5d4>
    21a2:	bd c0       	rjmp	.+378    	; 0x231e <Gpt_Init+0x684>
    21a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    21a8:	88 30       	cpi	r24, 0x08	; 8
    21aa:	91 05       	cpc	r25, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <Gpt_Init+0x516>
    21ae:	8b c0       	rjmp	.+278    	; 0x22c6 <Gpt_Init+0x62c>
    21b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    21b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    21b4:	29 30       	cpi	r18, 0x09	; 9
    21b6:	31 05       	cpc	r19, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <Gpt_Init+0x522>
    21ba:	9b c0       	rjmp	.+310    	; 0x22f2 <Gpt_Init+0x658>
    21bc:	b0 c0       	rjmp	.+352    	; 0x231e <Gpt_Init+0x684>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    21be:	ae e4       	ldi	r26, 0x4E	; 78
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	ee e4       	ldi	r30, 0x4E	; 78
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8e 7f       	andi	r24, 0xFE	; 254
    21ca:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    21cc:	ae e4       	ldi	r26, 0x4E	; 78
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	ee e4       	ldi	r30, 0x4E	; 78
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	8d 7f       	andi	r24, 0xFD	; 253
    21d8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    21da:	ae e4       	ldi	r26, 0x4E	; 78
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	ee e4       	ldi	r30, 0x4E	; 78
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8b 7f       	andi	r24, 0xFB	; 251
    21e6:	8c 93       	st	X, r24
    21e8:	a8 c3       	rjmp	.+1872   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    21ea:	ae e4       	ldi	r26, 0x4E	; 78
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	ee e4       	ldi	r30, 0x4E	; 78
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	81 60       	ori	r24, 0x01	; 1
    21f6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    21f8:	ae e4       	ldi	r26, 0x4E	; 78
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	ee e4       	ldi	r30, 0x4E	; 78
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	8d 7f       	andi	r24, 0xFD	; 253
    2204:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2206:	ae e4       	ldi	r26, 0x4E	; 78
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	ee e4       	ldi	r30, 0x4E	; 78
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8b 7f       	andi	r24, 0xFB	; 251
    2212:	8c 93       	st	X, r24
    2214:	92 c3       	rjmp	.+1828   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2216:	ae e4       	ldi	r26, 0x4E	; 78
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	ee e4       	ldi	r30, 0x4E	; 78
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8e 7f       	andi	r24, 0xFE	; 254
    2222:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2224:	ae e4       	ldi	r26, 0x4E	; 78
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	ee e4       	ldi	r30, 0x4E	; 78
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	82 60       	ori	r24, 0x02	; 2
    2230:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2232:	ae e4       	ldi	r26, 0x4E	; 78
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	ee e4       	ldi	r30, 0x4E	; 78
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8b 7f       	andi	r24, 0xFB	; 251
    223e:	8c 93       	st	X, r24
    2240:	7c c3       	rjmp	.+1784   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2242:	ae e4       	ldi	r26, 0x4E	; 78
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	ee e4       	ldi	r30, 0x4E	; 78
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	81 60       	ori	r24, 0x01	; 1
    224e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2250:	ae e4       	ldi	r26, 0x4E	; 78
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ee e4       	ldi	r30, 0x4E	; 78
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	82 60       	ori	r24, 0x02	; 2
    225c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    225e:	ae e4       	ldi	r26, 0x4E	; 78
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ee e4       	ldi	r30, 0x4E	; 78
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8b 7f       	andi	r24, 0xFB	; 251
    226a:	8c 93       	st	X, r24
    226c:	66 c3       	rjmp	.+1740   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    226e:	ae e4       	ldi	r26, 0x4E	; 78
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	ee e4       	ldi	r30, 0x4E	; 78
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8e 7f       	andi	r24, 0xFE	; 254
    227a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    227c:	ae e4       	ldi	r26, 0x4E	; 78
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	ee e4       	ldi	r30, 0x4E	; 78
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	8d 7f       	andi	r24, 0xFD	; 253
    2288:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    228a:	ae e4       	ldi	r26, 0x4E	; 78
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	ee e4       	ldi	r30, 0x4E	; 78
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	84 60       	ori	r24, 0x04	; 4
    2296:	8c 93       	st	X, r24
    2298:	50 c3       	rjmp	.+1696   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    229a:	ae e4       	ldi	r26, 0x4E	; 78
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	ee e4       	ldi	r30, 0x4E	; 78
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	81 60       	ori	r24, 0x01	; 1
    22a6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    22a8:	ae e4       	ldi	r26, 0x4E	; 78
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ee e4       	ldi	r30, 0x4E	; 78
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	8d 7f       	andi	r24, 0xFD	; 253
    22b4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    22b6:	ae e4       	ldi	r26, 0x4E	; 78
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ee e4       	ldi	r30, 0x4E	; 78
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	84 60       	ori	r24, 0x04	; 4
    22c2:	8c 93       	st	X, r24
    22c4:	3a c3       	rjmp	.+1652   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    22c6:	ae e4       	ldi	r26, 0x4E	; 78
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	ee e4       	ldi	r30, 0x4E	; 78
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	8e 7f       	andi	r24, 0xFE	; 254
    22d2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    22d4:	ae e4       	ldi	r26, 0x4E	; 78
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	ee e4       	ldi	r30, 0x4E	; 78
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	82 60       	ori	r24, 0x02	; 2
    22e0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    22e2:	ae e4       	ldi	r26, 0x4E	; 78
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	ee e4       	ldi	r30, 0x4E	; 78
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	84 60       	ori	r24, 0x04	; 4
    22ee:	8c 93       	st	X, r24
    22f0:	24 c3       	rjmp	.+1608   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    22f2:	ae e4       	ldi	r26, 0x4E	; 78
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	ee e4       	ldi	r30, 0x4E	; 78
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	81 60       	ori	r24, 0x01	; 1
    22fe:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2300:	ae e4       	ldi	r26, 0x4E	; 78
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	ee e4       	ldi	r30, 0x4E	; 78
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	82 60       	ori	r24, 0x02	; 2
    230c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    230e:	ae e4       	ldi	r26, 0x4E	; 78
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	ee e4       	ldi	r30, 0x4E	; 78
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	84 60       	ori	r24, 0x04	; 4
    231a:	8c 93       	st	X, r24
    231c:	0e c3       	rjmp	.+1564   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	0c c3       	rjmp	.+1560   	; 0x293a <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2322:	ea 81       	ldd	r30, Y+2	; 0x02
    2324:	fb 81       	ldd	r31, Y+3	; 0x03
    2326:	81 81       	ldd	r24, Z+1	; 0x01
    2328:	88 23       	and	r24, r24
    232a:	e9 f4       	brne	.+58     	; 0x2366 <Gpt_Init+0x6cc>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    232c:	af e4       	ldi	r26, 0x4F	; 79
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ef e4       	ldi	r30, 0x4F	; 79
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	8e 7f       	andi	r24, 0xFE	; 254
    2338:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    233a:	af e4       	ldi	r26, 0x4F	; 79
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	ef e4       	ldi	r30, 0x4F	; 79
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	8d 7f       	andi	r24, 0xFD	; 253
    2346:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2348:	ae e4       	ldi	r26, 0x4E	; 78
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	ee e4       	ldi	r30, 0x4E	; 78
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	87 7f       	andi	r24, 0xF7	; 247
    2354:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2356:	ae e4       	ldi	r26, 0x4E	; 78
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	ee e4       	ldi	r30, 0x4E	; 78
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8f 7e       	andi	r24, 0xEF	; 239
    2362:	8c 93       	st	X, r24
    2364:	23 c0       	rjmp	.+70     	; 0x23ac <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2366:	ea 81       	ldd	r30, Y+2	; 0x02
    2368:	fb 81       	ldd	r31, Y+3	; 0x03
    236a:	81 81       	ldd	r24, Z+1	; 0x01
    236c:	81 30       	cpi	r24, 0x01	; 1
    236e:	e9 f4       	brne	.+58     	; 0x23aa <Gpt_Init+0x710>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2370:	af e4       	ldi	r26, 0x4F	; 79
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	ef e4       	ldi	r30, 0x4F	; 79
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8e 7f       	andi	r24, 0xFE	; 254
    237c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    237e:	af e4       	ldi	r26, 0x4F	; 79
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	ef e4       	ldi	r30, 0x4F	; 79
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	8d 7f       	andi	r24, 0xFD	; 253
    238a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    238c:	ae e4       	ldi	r26, 0x4E	; 78
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	ee e4       	ldi	r30, 0x4E	; 78
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	88 60       	ori	r24, 0x08	; 8
    2398:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    239a:	ae e4       	ldi	r26, 0x4E	; 78
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	ee e4       	ldi	r30, 0x4E	; 78
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8f 7e       	andi	r24, 0xEF	; 239
    23a6:	8c 93       	st	X, r24
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    23aa:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    23ac:	ea 81       	ldd	r30, Y+2	; 0x02
    23ae:	fb 81       	ldd	r31, Y+3	; 0x03
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	3b 87       	std	Y+11, r19	; 0x0b
    23b8:	2a 87       	std	Y+10, r18	; 0x0a
    23ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    23bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	91 05       	cpc	r25, r1
    23c2:	21 f1       	breq	.+72     	; 0x240c <Gpt_Init+0x772>
    23c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    23c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    23c8:	22 30       	cpi	r18, 0x02	; 2
    23ca:	31 05       	cpc	r19, r1
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <Gpt_Init+0x73e>
    23ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	61 f0       	breq	.+24     	; 0x23ee <Gpt_Init+0x754>
    23d6:	47 c0       	rjmp	.+142    	; 0x2466 <Gpt_Init+0x7cc>
    23d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    23da:	3b 85       	ldd	r19, Y+11	; 0x0b
    23dc:	22 30       	cpi	r18, 0x02	; 2
    23de:	31 05       	cpc	r19, r1
    23e0:	21 f1       	breq	.+72     	; 0x242a <Gpt_Init+0x790>
    23e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e6:	83 30       	cpi	r24, 0x03	; 3
    23e8:	91 05       	cpc	r25, r1
    23ea:	71 f1       	breq	.+92     	; 0x2448 <Gpt_Init+0x7ae>
    23ec:	3c c0       	rjmp	.+120    	; 0x2466 <Gpt_Init+0x7cc>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    23ee:	af e4       	ldi	r26, 0x4F	; 79
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	ef e4       	ldi	r30, 0x4F	; 79
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	8f 7e       	andi	r24, 0xEF	; 239
    23fa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    23fc:	af e4       	ldi	r26, 0x4F	; 79
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	ef e4       	ldi	r30, 0x4F	; 79
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	8f 7d       	andi	r24, 0xDF	; 223
    2408:	8c 93       	st	X, r24
    240a:	2e c0       	rjmp	.+92     	; 0x2468 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    240c:	af e4       	ldi	r26, 0x4F	; 79
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	ef e4       	ldi	r30, 0x4F	; 79
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	80 61       	ori	r24, 0x10	; 16
    2418:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    241a:	af e4       	ldi	r26, 0x4F	; 79
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	ef e4       	ldi	r30, 0x4F	; 79
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	8f 7d       	andi	r24, 0xDF	; 223
    2426:	8c 93       	st	X, r24
    2428:	1f c0       	rjmp	.+62     	; 0x2468 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    242a:	af e4       	ldi	r26, 0x4F	; 79
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	ef e4       	ldi	r30, 0x4F	; 79
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	80 61       	ori	r24, 0x10	; 16
    2436:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2438:	af e4       	ldi	r26, 0x4F	; 79
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	ef e4       	ldi	r30, 0x4F	; 79
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	80 62       	ori	r24, 0x20	; 32
    2444:	8c 93       	st	X, r24
    2446:	10 c0       	rjmp	.+32     	; 0x2468 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2448:	af e4       	ldi	r26, 0x4F	; 79
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	ef e4       	ldi	r30, 0x4F	; 79
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8f 7e       	andi	r24, 0xEF	; 239
    2454:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2456:	af e4       	ldi	r26, 0x4F	; 79
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	ef e4       	ldi	r30, 0x4F	; 79
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	80 62       	ori	r24, 0x20	; 32
    2462:	8c 93       	st	X, r24
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <Gpt_Init+0x7ce>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2466:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2468:	ea 81       	ldd	r30, Y+2	; 0x02
    246a:	fb 81       	ldd	r31, Y+3	; 0x03
    246c:	83 81       	ldd	r24, Z+3	; 0x03
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	39 87       	std	Y+9, r19	; 0x09
    2474:	28 87       	std	Y+8, r18	; 0x08
    2476:	88 85       	ldd	r24, Y+8	; 0x08
    2478:	99 85       	ldd	r25, Y+9	; 0x09
    247a:	84 30       	cpi	r24, 0x04	; 4
    247c:	91 05       	cpc	r25, r1
    247e:	09 f4       	brne	.+2      	; 0x2482 <Gpt_Init+0x7e8>
    2480:	77 c0       	rjmp	.+238    	; 0x2570 <Gpt_Init+0x8d6>
    2482:	28 85       	ldd	r18, Y+8	; 0x08
    2484:	39 85       	ldd	r19, Y+9	; 0x09
    2486:	25 30       	cpi	r18, 0x05	; 5
    2488:	31 05       	cpc	r19, r1
    248a:	8c f4       	brge	.+34     	; 0x24ae <Gpt_Init+0x814>
    248c:	88 85       	ldd	r24, Y+8	; 0x08
    248e:	99 85       	ldd	r25, Y+9	; 0x09
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	91 05       	cpc	r25, r1
    2494:	09 f4       	brne	.+2      	; 0x2498 <Gpt_Init+0x7fe>
    2496:	40 c0       	rjmp	.+128    	; 0x2518 <Gpt_Init+0x87e>
    2498:	28 85       	ldd	r18, Y+8	; 0x08
    249a:	39 85       	ldd	r19, Y+9	; 0x09
    249c:	22 30       	cpi	r18, 0x02	; 2
    249e:	31 05       	cpc	r19, r1
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <Gpt_Init+0x80a>
    24a2:	50 c0       	rjmp	.+160    	; 0x2544 <Gpt_Init+0x8aa>
    24a4:	88 85       	ldd	r24, Y+8	; 0x08
    24a6:	99 85       	ldd	r25, Y+9	; 0x09
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	01 f1       	breq	.+64     	; 0x24ec <Gpt_Init+0x852>
    24ac:	cf c0       	rjmp	.+414    	; 0x264c <Gpt_Init+0x9b2>
    24ae:	28 85       	ldd	r18, Y+8	; 0x08
    24b0:	39 85       	ldd	r19, Y+9	; 0x09
    24b2:	27 30       	cpi	r18, 0x07	; 7
    24b4:	31 05       	cpc	r19, r1
    24b6:	09 f4       	brne	.+2      	; 0x24ba <Gpt_Init+0x820>
    24b8:	87 c0       	rjmp	.+270    	; 0x25c8 <Gpt_Init+0x92e>
    24ba:	88 85       	ldd	r24, Y+8	; 0x08
    24bc:	99 85       	ldd	r25, Y+9	; 0x09
    24be:	88 30       	cpi	r24, 0x08	; 8
    24c0:	91 05       	cpc	r25, r1
    24c2:	3c f4       	brge	.+14     	; 0x24d2 <Gpt_Init+0x838>
    24c4:	28 85       	ldd	r18, Y+8	; 0x08
    24c6:	39 85       	ldd	r19, Y+9	; 0x09
    24c8:	26 30       	cpi	r18, 0x06	; 6
    24ca:	31 05       	cpc	r19, r1
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <Gpt_Init+0x836>
    24ce:	66 c0       	rjmp	.+204    	; 0x259c <Gpt_Init+0x902>
    24d0:	bd c0       	rjmp	.+378    	; 0x264c <Gpt_Init+0x9b2>
    24d2:	88 85       	ldd	r24, Y+8	; 0x08
    24d4:	99 85       	ldd	r25, Y+9	; 0x09
    24d6:	88 30       	cpi	r24, 0x08	; 8
    24d8:	91 05       	cpc	r25, r1
    24da:	09 f4       	brne	.+2      	; 0x24de <Gpt_Init+0x844>
    24dc:	8b c0       	rjmp	.+278    	; 0x25f4 <Gpt_Init+0x95a>
    24de:	28 85       	ldd	r18, Y+8	; 0x08
    24e0:	39 85       	ldd	r19, Y+9	; 0x09
    24e2:	29 30       	cpi	r18, 0x09	; 9
    24e4:	31 05       	cpc	r19, r1
    24e6:	09 f4       	brne	.+2      	; 0x24ea <Gpt_Init+0x850>
    24e8:	9b c0       	rjmp	.+310    	; 0x2620 <Gpt_Init+0x986>
    24ea:	b0 c0       	rjmp	.+352    	; 0x264c <Gpt_Init+0x9b2>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    24ec:	ae e4       	ldi	r26, 0x4E	; 78
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	ee e4       	ldi	r30, 0x4E	; 78
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	8e 7f       	andi	r24, 0xFE	; 254
    24f8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    24fa:	ae e4       	ldi	r26, 0x4E	; 78
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	ee e4       	ldi	r30, 0x4E	; 78
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	8d 7f       	andi	r24, 0xFD	; 253
    2506:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2508:	ae e4       	ldi	r26, 0x4E	; 78
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ee e4       	ldi	r30, 0x4E	; 78
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	8b 7f       	andi	r24, 0xFB	; 251
    2514:	8c 93       	st	X, r24
    2516:	11 c2       	rjmp	.+1058   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2518:	ae e4       	ldi	r26, 0x4E	; 78
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	ee e4       	ldi	r30, 0x4E	; 78
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	81 60       	ori	r24, 0x01	; 1
    2524:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2526:	ae e4       	ldi	r26, 0x4E	; 78
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	ee e4       	ldi	r30, 0x4E	; 78
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8d 7f       	andi	r24, 0xFD	; 253
    2532:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2534:	ae e4       	ldi	r26, 0x4E	; 78
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	ee e4       	ldi	r30, 0x4E	; 78
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	8b 7f       	andi	r24, 0xFB	; 251
    2540:	8c 93       	st	X, r24
    2542:	fb c1       	rjmp	.+1014   	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2544:	ae e4       	ldi	r26, 0x4E	; 78
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	ee e4       	ldi	r30, 0x4E	; 78
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	8e 7f       	andi	r24, 0xFE	; 254
    2550:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2552:	ae e4       	ldi	r26, 0x4E	; 78
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	ee e4       	ldi	r30, 0x4E	; 78
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	82 60       	ori	r24, 0x02	; 2
    255e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2560:	ae e4       	ldi	r26, 0x4E	; 78
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	ee e4       	ldi	r30, 0x4E	; 78
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	8b 7f       	andi	r24, 0xFB	; 251
    256c:	8c 93       	st	X, r24
    256e:	e5 c1       	rjmp	.+970    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2570:	ae e4       	ldi	r26, 0x4E	; 78
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	ee e4       	ldi	r30, 0x4E	; 78
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	81 60       	ori	r24, 0x01	; 1
    257c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    257e:	ae e4       	ldi	r26, 0x4E	; 78
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	ee e4       	ldi	r30, 0x4E	; 78
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	82 60       	ori	r24, 0x02	; 2
    258a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    258c:	ae e4       	ldi	r26, 0x4E	; 78
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	ee e4       	ldi	r30, 0x4E	; 78
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8b 7f       	andi	r24, 0xFB	; 251
    2598:	8c 93       	st	X, r24
    259a:	cf c1       	rjmp	.+926    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    259c:	ae e4       	ldi	r26, 0x4E	; 78
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	ee e4       	ldi	r30, 0x4E	; 78
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	8e 7f       	andi	r24, 0xFE	; 254
    25a8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    25aa:	ae e4       	ldi	r26, 0x4E	; 78
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	ee e4       	ldi	r30, 0x4E	; 78
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	8d 7f       	andi	r24, 0xFD	; 253
    25b6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    25b8:	ae e4       	ldi	r26, 0x4E	; 78
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	ee e4       	ldi	r30, 0x4E	; 78
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	84 60       	ori	r24, 0x04	; 4
    25c4:	8c 93       	st	X, r24
    25c6:	b9 c1       	rjmp	.+882    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    25c8:	ae e4       	ldi	r26, 0x4E	; 78
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	ee e4       	ldi	r30, 0x4E	; 78
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	81 60       	ori	r24, 0x01	; 1
    25d4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    25d6:	ae e4       	ldi	r26, 0x4E	; 78
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	ee e4       	ldi	r30, 0x4E	; 78
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	8d 7f       	andi	r24, 0xFD	; 253
    25e2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    25e4:	ae e4       	ldi	r26, 0x4E	; 78
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	ee e4       	ldi	r30, 0x4E	; 78
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	84 60       	ori	r24, 0x04	; 4
    25f0:	8c 93       	st	X, r24
    25f2:	a3 c1       	rjmp	.+838    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    25f4:	ae e4       	ldi	r26, 0x4E	; 78
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	ee e4       	ldi	r30, 0x4E	; 78
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	8e 7f       	andi	r24, 0xFE	; 254
    2600:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2602:	ae e4       	ldi	r26, 0x4E	; 78
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	ee e4       	ldi	r30, 0x4E	; 78
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	82 60       	ori	r24, 0x02	; 2
    260e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2610:	ae e4       	ldi	r26, 0x4E	; 78
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	ee e4       	ldi	r30, 0x4E	; 78
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	84 60       	ori	r24, 0x04	; 4
    261c:	8c 93       	st	X, r24
    261e:	8d c1       	rjmp	.+794    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2620:	ae e4       	ldi	r26, 0x4E	; 78
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	ee e4       	ldi	r30, 0x4E	; 78
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	81 60       	ori	r24, 0x01	; 1
    262c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    262e:	ae e4       	ldi	r26, 0x4E	; 78
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	ee e4       	ldi	r30, 0x4E	; 78
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	82 60       	ori	r24, 0x02	; 2
    263a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    263c:	ae e4       	ldi	r26, 0x4E	; 78
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	ee e4       	ldi	r30, 0x4E	; 78
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	84 60       	ori	r24, 0x04	; 4
    2648:	8c 93       	st	X, r24
    264a:	77 c1       	rjmp	.+750    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    264c:	19 82       	std	Y+1, r1	; 0x01
    264e:	75 c1       	rjmp	.+746    	; 0x293a <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER2:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2650:	ea 81       	ldd	r30, Y+2	; 0x02
    2652:	fb 81       	ldd	r31, Y+3	; 0x03
    2654:	81 81       	ldd	r24, Z+1	; 0x01
    2656:	88 23       	and	r24, r24
    2658:	79 f4       	brne	.+30     	; 0x2678 <Gpt_Init+0x9de>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    265a:	a5 e4       	ldi	r26, 0x45	; 69
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e5 e4       	ldi	r30, 0x45	; 69
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	8f 7e       	andi	r24, 0xEF	; 239
    2666:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2668:	a5 e4       	ldi	r26, 0x45	; 69
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	e5 e4       	ldi	r30, 0x45	; 69
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	8f 7d       	andi	r24, 0xDF	; 223
    2674:	8c 93       	st	X, r24
    2676:	15 c0       	rjmp	.+42     	; 0x26a2 <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2678:	ea 81       	ldd	r30, Y+2	; 0x02
    267a:	fb 81       	ldd	r31, Y+3	; 0x03
    267c:	81 81       	ldd	r24, Z+1	; 0x01
    267e:	81 30       	cpi	r24, 0x01	; 1
    2680:	79 f4       	brne	.+30     	; 0x26a0 <Gpt_Init+0xa06>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    2682:	a5 e4       	ldi	r26, 0x45	; 69
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	e5 e4       	ldi	r30, 0x45	; 69
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	8f 7e       	andi	r24, 0xEF	; 239
    268e:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2690:	a5 e4       	ldi	r26, 0x45	; 69
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e5 e4       	ldi	r30, 0x45	; 69
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	80 62       	ori	r24, 0x20	; 32
    269c:	8c 93       	st	X, r24
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    26a0:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    26a2:	ea 81       	ldd	r30, Y+2	; 0x02
    26a4:	fb 81       	ldd	r31, Y+3	; 0x03
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	3f 83       	std	Y+7, r19	; 0x07
    26ae:	2e 83       	std	Y+6, r18	; 0x06
    26b0:	8e 81       	ldd	r24, Y+6	; 0x06
    26b2:	9f 81       	ldd	r25, Y+7	; 0x07
    26b4:	81 30       	cpi	r24, 0x01	; 1
    26b6:	91 05       	cpc	r25, r1
    26b8:	21 f1       	breq	.+72     	; 0x2702 <Gpt_Init+0xa68>
    26ba:	2e 81       	ldd	r18, Y+6	; 0x06
    26bc:	3f 81       	ldd	r19, Y+7	; 0x07
    26be:	22 30       	cpi	r18, 0x02	; 2
    26c0:	31 05       	cpc	r19, r1
    26c2:	2c f4       	brge	.+10     	; 0x26ce <Gpt_Init+0xa34>
    26c4:	8e 81       	ldd	r24, Y+6	; 0x06
    26c6:	9f 81       	ldd	r25, Y+7	; 0x07
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	61 f0       	breq	.+24     	; 0x26e4 <Gpt_Init+0xa4a>
    26cc:	47 c0       	rjmp	.+142    	; 0x275c <Gpt_Init+0xac2>
    26ce:	2e 81       	ldd	r18, Y+6	; 0x06
    26d0:	3f 81       	ldd	r19, Y+7	; 0x07
    26d2:	22 30       	cpi	r18, 0x02	; 2
    26d4:	31 05       	cpc	r19, r1
    26d6:	21 f1       	breq	.+72     	; 0x2720 <Gpt_Init+0xa86>
    26d8:	8e 81       	ldd	r24, Y+6	; 0x06
    26da:	9f 81       	ldd	r25, Y+7	; 0x07
    26dc:	83 30       	cpi	r24, 0x03	; 3
    26de:	91 05       	cpc	r25, r1
    26e0:	71 f1       	breq	.+92     	; 0x273e <Gpt_Init+0xaa4>
    26e2:	3c c0       	rjmp	.+120    	; 0x275c <Gpt_Init+0xac2>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR2,TCCR2_COM20);
    26e4:	a5 e4       	ldi	r26, 0x45	; 69
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e5 e4       	ldi	r30, 0x45	; 69
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	8f 7e       	andi	r24, 0xEF	; 239
    26f0:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    26f2:	a5 e4       	ldi	r26, 0x45	; 69
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e5 e4       	ldi	r30, 0x45	; 69
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	8f 7d       	andi	r24, 0xDF	; 223
    26fe:	8c 93       	st	X, r24
    2700:	2e c0       	rjmp	.+92     	; 0x275e <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR2,TCCR2_COM20);
    2702:	a5 e4       	ldi	r26, 0x45	; 69
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e5 e4       	ldi	r30, 0x45	; 69
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	80 61       	ori	r24, 0x10	; 16
    270e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2710:	a5 e4       	ldi	r26, 0x45	; 69
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e5 e4       	ldi	r30, 0x45	; 69
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8f 7d       	andi	r24, 0xDF	; 223
    271c:	8c 93       	st	X, r24
    271e:	1f c0       	rjmp	.+62     	; 0x275e <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR2,TCCR2_COM20);
    2720:	a5 e4       	ldi	r26, 0x45	; 69
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e5 e4       	ldi	r30, 0x45	; 69
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	80 61       	ori	r24, 0x10	; 16
    272c:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    272e:	a5 e4       	ldi	r26, 0x45	; 69
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e5 e4       	ldi	r30, 0x45	; 69
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	80 62       	ori	r24, 0x20	; 32
    273a:	8c 93       	st	X, r24
    273c:	10 c0       	rjmp	.+32     	; 0x275e <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR2,TCCR2_COM20);
    273e:	a5 e4       	ldi	r26, 0x45	; 69
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e5 e4       	ldi	r30, 0x45	; 69
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8f 7e       	andi	r24, 0xEF	; 239
    274a:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    274c:	a5 e4       	ldi	r26, 0x45	; 69
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e5 e4       	ldi	r30, 0x45	; 69
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	80 62       	ori	r24, 0x20	; 32
    2758:	8c 93       	st	X, r24
    275a:	01 c0       	rjmp	.+2      	; 0x275e <Gpt_Init+0xac4>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    275c:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    275e:	ea 81       	ldd	r30, Y+2	; 0x02
    2760:	fb 81       	ldd	r31, Y+3	; 0x03
    2762:	83 81       	ldd	r24, Z+3	; 0x03
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	3d 83       	std	Y+5, r19	; 0x05
    276a:	2c 83       	std	Y+4, r18	; 0x04
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	9d 81       	ldd	r25, Y+5	; 0x05
    2770:	83 30       	cpi	r24, 0x03	; 3
    2772:	91 05       	cpc	r25, r1
    2774:	09 f4       	brne	.+2      	; 0x2778 <Gpt_Init+0xade>
    2776:	70 c0       	rjmp	.+224    	; 0x2858 <Gpt_Init+0xbbe>
    2778:	2c 81       	ldd	r18, Y+4	; 0x04
    277a:	3d 81       	ldd	r19, Y+5	; 0x05
    277c:	24 30       	cpi	r18, 0x04	; 4
    277e:	31 05       	cpc	r19, r1
    2780:	84 f4       	brge	.+32     	; 0x27a2 <Gpt_Init+0xb08>
    2782:	8c 81       	ldd	r24, Y+4	; 0x04
    2784:	9d 81       	ldd	r25, Y+5	; 0x05
    2786:	81 30       	cpi	r24, 0x01	; 1
    2788:	91 05       	cpc	r25, r1
    278a:	d1 f1       	breq	.+116    	; 0x2800 <Gpt_Init+0xb66>
    278c:	2c 81       	ldd	r18, Y+4	; 0x04
    278e:	3d 81       	ldd	r19, Y+5	; 0x05
    2790:	22 30       	cpi	r18, 0x02	; 2
    2792:	31 05       	cpc	r19, r1
    2794:	0c f0       	brlt	.+2      	; 0x2798 <Gpt_Init+0xafe>
    2796:	4a c0       	rjmp	.+148    	; 0x282c <Gpt_Init+0xb92>
    2798:	8c 81       	ldd	r24, Y+4	; 0x04
    279a:	9d 81       	ldd	r25, Y+5	; 0x05
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	d1 f0       	breq	.+52     	; 0x27d4 <Gpt_Init+0xb3a>
    27a0:	c9 c0       	rjmp	.+402    	; 0x2934 <Gpt_Init+0xc9a>
    27a2:	2c 81       	ldd	r18, Y+4	; 0x04
    27a4:	3d 81       	ldd	r19, Y+5	; 0x05
    27a6:	25 30       	cpi	r18, 0x05	; 5
    27a8:	31 05       	cpc	r19, r1
    27aa:	09 f4       	brne	.+2      	; 0x27ae <Gpt_Init+0xb14>
    27ac:	81 c0       	rjmp	.+258    	; 0x28b0 <Gpt_Init+0xc16>
    27ae:	8c 81       	ldd	r24, Y+4	; 0x04
    27b0:	9d 81       	ldd	r25, Y+5	; 0x05
    27b2:	85 30       	cpi	r24, 0x05	; 5
    27b4:	91 05       	cpc	r25, r1
    27b6:	0c f4       	brge	.+2      	; 0x27ba <Gpt_Init+0xb20>
    27b8:	65 c0       	rjmp	.+202    	; 0x2884 <Gpt_Init+0xbea>
    27ba:	2c 81       	ldd	r18, Y+4	; 0x04
    27bc:	3d 81       	ldd	r19, Y+5	; 0x05
    27be:	26 30       	cpi	r18, 0x06	; 6
    27c0:	31 05       	cpc	r19, r1
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <Gpt_Init+0xb2c>
    27c4:	8b c0       	rjmp	.+278    	; 0x28dc <Gpt_Init+0xc42>
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ca:	87 30       	cpi	r24, 0x07	; 7
    27cc:	91 05       	cpc	r25, r1
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <Gpt_Init+0xb38>
    27d0:	9b c0       	rjmp	.+310    	; 0x2908 <Gpt_Init+0xc6e>
    27d2:	b0 c0       	rjmp	.+352    	; 0x2934 <Gpt_Init+0xc9a>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR2,TCCR2_CS20);
    27d4:	a5 e4       	ldi	r26, 0x45	; 69
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e5 e4       	ldi	r30, 0x45	; 69
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8e 7f       	andi	r24, 0xFE	; 254
    27e0:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    27e2:	a5 e4       	ldi	r26, 0x45	; 69
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e5 e4       	ldi	r30, 0x45	; 69
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	8d 7f       	andi	r24, 0xFD	; 253
    27ee:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    27f0:	a5 e4       	ldi	r26, 0x45	; 69
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e5 e4       	ldi	r30, 0x45	; 69
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	8b 7f       	andi	r24, 0xFB	; 251
    27fc:	8c 93       	st	X, r24
    27fe:	9d c0       	rjmp	.+314    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR2,TCCR2_CS20);
    2800:	a5 e4       	ldi	r26, 0x45	; 69
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e5 e4       	ldi	r30, 0x45	; 69
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	81 60       	ori	r24, 0x01	; 1
    280c:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    280e:	a5 e4       	ldi	r26, 0x45	; 69
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e5 e4       	ldi	r30, 0x45	; 69
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8d 7f       	andi	r24, 0xFD	; 253
    281a:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    281c:	a5 e4       	ldi	r26, 0x45	; 69
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e5 e4       	ldi	r30, 0x45	; 69
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	8b 7f       	andi	r24, 0xFB	; 251
    2828:	8c 93       	st	X, r24
    282a:	87 c0       	rjmp	.+270    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR2,TCCR2_CS20);
    282c:	a5 e4       	ldi	r26, 0x45	; 69
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e5 e4       	ldi	r30, 0x45	; 69
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	8e 7f       	andi	r24, 0xFE	; 254
    2838:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    283a:	a5 e4       	ldi	r26, 0x45	; 69
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e5 e4       	ldi	r30, 0x45	; 69
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	82 60       	ori	r24, 0x02	; 2
    2846:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2848:	a5 e4       	ldi	r26, 0x45	; 69
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e5 e4       	ldi	r30, 0x45	; 69
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	8b 7f       	andi	r24, 0xFB	; 251
    2854:	8c 93       	st	X, r24
    2856:	71 c0       	rjmp	.+226    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_32:
            SET_BIT(TCCR2,TCCR2_CS20);
    2858:	a5 e4       	ldi	r26, 0x45	; 69
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e5 e4       	ldi	r30, 0x45	; 69
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	81 60       	ori	r24, 0x01	; 1
    2864:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2866:	a5 e4       	ldi	r26, 0x45	; 69
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e5 e4       	ldi	r30, 0x45	; 69
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	82 60       	ori	r24, 0x02	; 2
    2872:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2874:	a5 e4       	ldi	r26, 0x45	; 69
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e5 e4       	ldi	r30, 0x45	; 69
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8b 7f       	andi	r24, 0xFB	; 251
    2880:	8c 93       	st	X, r24
    2882:	5b c0       	rjmp	.+182    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2884:	a5 e4       	ldi	r26, 0x45	; 69
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e5 e4       	ldi	r30, 0x45	; 69
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	8e 7f       	andi	r24, 0xFE	; 254
    2890:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2892:	a5 e4       	ldi	r26, 0x45	; 69
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	e5 e4       	ldi	r30, 0x45	; 69
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	8d 7f       	andi	r24, 0xFD	; 253
    289e:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    28a0:	a5 e4       	ldi	r26, 0x45	; 69
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e5 e4       	ldi	r30, 0x45	; 69
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	84 60       	ori	r24, 0x04	; 4
    28ac:	8c 93       	st	X, r24
    28ae:	45 c0       	rjmp	.+138    	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_128:
            SET_BIT(TCCR2,TCCR2_CS20);
    28b0:	a5 e4       	ldi	r26, 0x45	; 69
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e5 e4       	ldi	r30, 0x45	; 69
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	81 60       	ori	r24, 0x01	; 1
    28bc:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    28be:	a5 e4       	ldi	r26, 0x45	; 69
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e5 e4       	ldi	r30, 0x45	; 69
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	8d 7f       	andi	r24, 0xFD	; 253
    28ca:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    28cc:	a5 e4       	ldi	r26, 0x45	; 69
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e5 e4       	ldi	r30, 0x45	; 69
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	84 60       	ori	r24, 0x04	; 4
    28d8:	8c 93       	st	X, r24
    28da:	2f c0       	rjmp	.+94     	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR2,TCCR2_CS20);
    28dc:	a5 e4       	ldi	r26, 0x45	; 69
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e5 e4       	ldi	r30, 0x45	; 69
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	8e 7f       	andi	r24, 0xFE	; 254
    28e8:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    28ea:	a5 e4       	ldi	r26, 0x45	; 69
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e5 e4       	ldi	r30, 0x45	; 69
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	82 60       	ori	r24, 0x02	; 2
    28f6:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    28f8:	a5 e4       	ldi	r26, 0x45	; 69
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e5 e4       	ldi	r30, 0x45	; 69
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	84 60       	ori	r24, 0x04	; 4
    2904:	8c 93       	st	X, r24
    2906:	19 c0       	rjmp	.+50     	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR2,TCCR2_CS20);
    2908:	a5 e4       	ldi	r26, 0x45	; 69
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e5 e4       	ldi	r30, 0x45	; 69
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	81 60       	ori	r24, 0x01	; 1
    2914:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2916:	a5 e4       	ldi	r26, 0x45	; 69
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e5 e4       	ldi	r30, 0x45	; 69
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	82 60       	ori	r24, 0x02	; 2
    2922:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2924:	a5 e4       	ldi	r26, 0x45	; 69
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e5 e4       	ldi	r30, 0x45	; 69
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	84 60       	ori	r24, 0x04	; 4
    2930:	8c 93       	st	X, r24
    2932:	03 c0       	rjmp	.+6      	; 0x293a <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2934:	19 82       	std	Y+1, r1	; 0x01
    2936:	01 c0       	rjmp	.+2      	; 0x293a <Gpt_Init+0xca0>
            break;
        }
        break;

    default:
        returnValue = GPT_ERROR;
    2938:	19 82       	std	Y+1, r1	; 0x01
    }
    return returnValue;
    293a:	89 81       	ldd	r24, Y+1	; 0x01
}
    293c:	65 96       	adiw	r28, 0x15	; 21
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <Gpt_StartTimer>:

Gpt_ReturnType Gpt_StartTimer(Gpt_ChannelType channel, u16 value)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <Gpt_StartTimer+0x6>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <Gpt_StartTimer+0x8>
    2956:	00 d0       	rcall	.+0      	; 0x2958 <Gpt_StartTimer+0xa>
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	8a 83       	std	Y+2, r24	; 0x02
    295e:	7c 83       	std	Y+4, r23	; 0x04
    2960:	6b 83       	std	Y+3, r22	; 0x03
    Gpt_ReturnType returnValue = GPT_OK;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	3e 83       	std	Y+6, r19	; 0x06
    296e:	2d 83       	std	Y+5, r18	; 0x05
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	91 05       	cpc	r25, r1
    2978:	11 f1       	breq	.+68     	; 0x29be <Gpt_StartTimer+0x70>
    297a:	2d 81       	ldd	r18, Y+5	; 0x05
    297c:	3e 81       	ldd	r19, Y+6	; 0x06
    297e:	22 30       	cpi	r18, 0x02	; 2
    2980:	31 05       	cpc	r19, r1
    2982:	2c f4       	brge	.+10     	; 0x298e <Gpt_StartTimer+0x40>
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	61 f0       	breq	.+24     	; 0x29a4 <Gpt_StartTimer+0x56>
    298c:	32 c0       	rjmp	.+100    	; 0x29f2 <Gpt_StartTimer+0xa4>
    298e:	2d 81       	ldd	r18, Y+5	; 0x05
    2990:	3e 81       	ldd	r19, Y+6	; 0x06
    2992:	22 30       	cpi	r18, 0x02	; 2
    2994:	31 05       	cpc	r19, r1
    2996:	d1 f0       	breq	.+52     	; 0x29cc <Gpt_StartTimer+0x7e>
    2998:	8d 81       	ldd	r24, Y+5	; 0x05
    299a:	9e 81       	ldd	r25, Y+6	; 0x06
    299c:	83 30       	cpi	r24, 0x03	; 3
    299e:	91 05       	cpc	r25, r1
    29a0:	e1 f0       	breq	.+56     	; 0x29da <Gpt_StartTimer+0x8c>
    29a2:	27 c0       	rjmp	.+78     	; 0x29f2 <Gpt_StartTimer+0xa4>
    {
    case GPT_CHANNEL_TIMER0:
        if (value < 256)
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	8f 3f       	cpi	r24, 0xFF	; 255
    29aa:	91 05       	cpc	r25, r1
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <Gpt_StartTimer+0x62>
    29ae:	28 f4       	brcc	.+10     	; 0x29ba <Gpt_StartTimer+0x6c>
        {
            OCR0 = value;
    29b0:	ec e5       	ldi	r30, 0x5C	; 92
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	80 83       	st	Z, r24
    29b8:	1c c0       	rjmp	.+56     	; 0x29f2 <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    29ba:	19 82       	std	Y+1, r1	; 0x01
    29bc:	1a c0       	rjmp	.+52     	; 0x29f2 <Gpt_StartTimer+0xa4>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    29be:	ea e4       	ldi	r30, 0x4A	; 74
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	9c 81       	ldd	r25, Y+4	; 0x04
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	80 83       	st	Z, r24
    29ca:	13 c0       	rjmp	.+38     	; 0x29f2 <Gpt_StartTimer+0xa4>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    29cc:	e8 e4       	ldi	r30, 0x48	; 72
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
    29d8:	0c c0       	rjmp	.+24     	; 0x29f2 <Gpt_StartTimer+0xa4>
            returnValue = GPT_ERROR;
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (value < 256)
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	8f 3f       	cpi	r24, 0xFF	; 255
    29e0:	91 05       	cpc	r25, r1
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <Gpt_StartTimer+0x98>
    29e4:	28 f4       	brcc	.+10     	; 0x29f0 <Gpt_StartTimer+0xa2>
        {
            OCR2 = value;
    29e6:	e3 e4       	ldi	r30, 0x43	; 67
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	80 83       	st	Z, r24
    29ee:	01 c0       	rjmp	.+2      	; 0x29f2 <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    29f0:	19 82       	std	Y+1, r1	; 0x01
        break;

    default:
        break;
    }
    return returnValue;
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f4:	26 96       	adiw	r28, 0x06	; 6
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <Gpt_GetTimeElapsed>:

u16 Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <Gpt_GetTimeElapsed+0x6>
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <Gpt_GetTimeElapsed+0x8>
    2a0e:	0f 92       	push	r0
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    2a16:	1a 82       	std	Y+2, r1	; 0x02
    2a18:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	3d 83       	std	Y+5, r19	; 0x05
    2a22:	2c 83       	std	Y+4, r18	; 0x04
    2a24:	8c 81       	ldd	r24, Y+4	; 0x04
    2a26:	9d 81       	ldd	r25, Y+5	; 0x05
    2a28:	81 30       	cpi	r24, 0x01	; 1
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	e9 f0       	breq	.+58     	; 0x2a68 <Gpt_GetTimeElapsed+0x62>
    2a2e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a30:	3d 81       	ldd	r19, Y+5	; 0x05
    2a32:	22 30       	cpi	r18, 0x02	; 2
    2a34:	31 05       	cpc	r19, r1
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <Gpt_GetTimeElapsed+0x3c>
    2a38:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	61 f0       	breq	.+24     	; 0x2a58 <Gpt_GetTimeElapsed+0x52>
    2a40:	28 c0       	rjmp	.+80     	; 0x2a92 <Gpt_GetTimeElapsed+0x8c>
    2a42:	2c 81       	ldd	r18, Y+4	; 0x04
    2a44:	3d 81       	ldd	r19, Y+5	; 0x05
    2a46:	22 30       	cpi	r18, 0x02	; 2
    2a48:	31 05       	cpc	r19, r1
    2a4a:	a9 f0       	breq	.+42     	; 0x2a76 <Gpt_GetTimeElapsed+0x70>
    2a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a50:	83 30       	cpi	r24, 0x03	; 3
    2a52:	91 05       	cpc	r25, r1
    2a54:	b9 f0       	breq	.+46     	; 0x2a84 <Gpt_GetTimeElapsed+0x7e>
    2a56:	1d c0       	rjmp	.+58     	; 0x2a92 <Gpt_GetTimeElapsed+0x8c>
    {
    case GPT_CHANNEL_TIMER0:
        value = TCNT0;
    2a58:	e2 e5       	ldi	r30, 0x52	; 82
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	9a 83       	std	Y+2, r25	; 0x02
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	15 c0       	rjmp	.+42     	; 0x2a92 <Gpt_GetTimeElapsed+0x8c>
        break;
    case GPT_CHANNEL_TIMER1A:
        value = TCNT1;        
    2a68:	ec e4       	ldi	r30, 0x4C	; 76
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	0e c0       	rjmp	.+28     	; 0x2a92 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        value = TCNT1;
    2a76:	ec e4       	ldi	r30, 0x4C	; 76
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	07 c0       	rjmp	.+14     	; 0x2a92 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        value = TCNT2;
    2a84:	e4 e4       	ldi	r30, 0x44	; 68
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	88 2f       	mov	r24, r24
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <Gpt_GetTimeRemaining>:

u16 Gpt_GetTimeRemaining(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <Gpt_GetTimeRemaining+0x6>
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <Gpt_GetTimeRemaining+0x8>
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <Gpt_GetTimeRemaining+0xa>
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
    2ab6:	6c 83       	std	Y+4, r22	; 0x04
    u16 value = 0;
    2ab8:	1a 82       	std	Y+2, r1	; 0x02
    2aba:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	3e 83       	std	Y+6, r19	; 0x06
    2ac4:	2d 83       	std	Y+5, r18	; 0x05
    2ac6:	4d 81       	ldd	r20, Y+5	; 0x05
    2ac8:	5e 81       	ldd	r21, Y+6	; 0x06
    2aca:	41 30       	cpi	r20, 0x01	; 1
    2acc:	51 05       	cpc	r21, r1
    2ace:	e1 f1       	breq	.+120    	; 0x2b48 <Gpt_GetTimeRemaining+0xa2>
    2ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	34 f4       	brge	.+12     	; 0x2ae6 <Gpt_GetTimeRemaining+0x40>
    2ada:	2d 81       	ldd	r18, Y+5	; 0x05
    2adc:	3e 81       	ldd	r19, Y+6	; 0x06
    2ade:	21 15       	cp	r18, r1
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	71 f0       	breq	.+28     	; 0x2b00 <Gpt_GetTimeRemaining+0x5a>
    2ae4:	90 c0       	rjmp	.+288    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
    2ae6:	4d 81       	ldd	r20, Y+5	; 0x05
    2ae8:	5e 81       	ldd	r21, Y+6	; 0x06
    2aea:	42 30       	cpi	r20, 0x02	; 2
    2aec:	51 05       	cpc	r21, r1
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <Gpt_GetTimeRemaining+0x4c>
    2af0:	4a c0       	rjmp	.+148    	; 0x2b86 <Gpt_GetTimeRemaining+0xe0>
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	9e 81       	ldd	r25, Y+6	; 0x06
    2af6:	83 30       	cpi	r24, 0x03	; 3
    2af8:	91 05       	cpc	r25, r1
    2afa:	09 f4       	brne	.+2      	; 0x2afe <Gpt_GetTimeRemaining+0x58>
    2afc:	62 c0       	rjmp	.+196    	; 0x2bc2 <Gpt_GetTimeRemaining+0x11c>
    2afe:	83 c0       	rjmp	.+262    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2b00:	8c 81       	ldd	r24, Y+4	; 0x04
    2b02:	88 23       	and	r24, r24
    2b04:	61 f4       	brne	.+24     	; 0x2b1e <Gpt_GetTimeRemaining+0x78>
        {
            value = 0xFF - TCNT0;
    2b06:	e2 e5       	ldi	r30, 0x52	; 82
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	8f ef       	ldi	r24, 0xFF	; 255
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	82 1b       	sub	r24, r18
    2b16:	93 0b       	sbc	r25, r19
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	74 c0       	rjmp	.+232    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <Gpt_GetTimeRemaining+0x80>
    2b24:	70 c0       	rjmp	.+224    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR0 - TCNT0;
    2b26:	ec e5       	ldi	r30, 0x5C	; 92
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	e2 e5       	ldi	r30, 0x52	; 82
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a9 01       	movw	r20, r18
    2b3c:	48 1b       	sub	r20, r24
    2b3e:	59 0b       	sbc	r21, r25
    2b40:	ca 01       	movw	r24, r20
    2b42:	9a 83       	std	Y+2, r25	; 0x02
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	5f c0       	rjmp	.+190    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	88 23       	and	r24, r24
    2b4c:	49 f4       	brne	.+18     	; 0x2b60 <Gpt_GetTimeRemaining+0xba>
        {
            value = 0xFFFF - TCNT1;
    2b4e:	ec e4       	ldi	r30, 0x4C	; 76
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	80 95       	com	r24
    2b58:	90 95       	com	r25
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	53 c0       	rjmp	.+166    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <Gpt_GetTimeRemaining+0xc2>
    2b66:	4f c0       	rjmp	.+158    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1A - TCNT1;
    2b68:	ea e4       	ldi	r30, 0x4A	; 74
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	20 81       	ld	r18, Z
    2b6e:	31 81       	ldd	r19, Z+1	; 0x01
    2b70:	ec e4       	ldi	r30, 0x4C	; 76
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	a9 01       	movw	r20, r18
    2b7a:	48 1b       	sub	r20, r24
    2b7c:	59 0b       	sbc	r21, r25
    2b7e:	ca 01       	movw	r24, r20
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	40 c0       	rjmp	.+128    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2b86:	8c 81       	ldd	r24, Y+4	; 0x04
    2b88:	88 23       	and	r24, r24
    2b8a:	49 f4       	brne	.+18     	; 0x2b9e <Gpt_GetTimeRemaining+0xf8>
        {
            value = 0xFFFF - TCNT1;
    2b8c:	ec e4       	ldi	r30, 0x4C	; 76
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	80 95       	com	r24
    2b96:	90 95       	com	r25
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	34 c0       	rjmp	.+104    	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	89 f5       	brne	.+98     	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1B - TCNT1;
    2ba4:	e8 e4       	ldi	r30, 0x48	; 72
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	20 81       	ld	r18, Z
    2baa:	31 81       	ldd	r19, Z+1	; 0x01
    2bac:	ec e4       	ldi	r30, 0x4C	; 76
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	a9 01       	movw	r20, r18
    2bb6:	48 1b       	sub	r20, r24
    2bb8:	59 0b       	sbc	r21, r25
    2bba:	ca 01       	movw	r24, r20
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	22 c0       	rjmp	.+68     	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc4:	88 23       	and	r24, r24
    2bc6:	61 f4       	brne	.+24     	; 0x2be0 <Gpt_GetTimeRemaining+0x13a>
        {
            value = 0xFF - TCNT2;
    2bc8:	e4 e4       	ldi	r30, 0x44	; 68
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	8f ef       	ldi	r24, 0xFF	; 255
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	82 1b       	sub	r24, r18
    2bd8:	93 0b       	sbc	r25, r19
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	13 c0       	rjmp	.+38     	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2be0:	8c 81       	ldd	r24, Y+4	; 0x04
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	81 f4       	brne	.+32     	; 0x2c06 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR2 - TCNT2;
    2be6:	e3 e4       	ldi	r30, 0x43	; 67
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	e4 e4       	ldi	r30, 0x44	; 68
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	88 2f       	mov	r24, r24
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a9 01       	movw	r20, r18
    2bfc:	48 1b       	sub	r20, r24
    2bfe:	59 0b       	sbc	r21, r25
    2c00:	ca 01       	movw	r24, r20
    2c02:	9a 83       	std	Y+2, r25	; 0x02
    2c04:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c0a:	26 96       	adiw	r28, 0x06	; 6
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <Gpt_EnableNotification>:

void Gpt_EnableNotification(Gpt_ChannelType channel, Gpt_ModeType mode, void (*callback)(void))
{
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <Gpt_EnableNotification+0x6>
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <Gpt_EnableNotification+0x8>
    2c24:	00 d0       	rcall	.+0      	; 0x2c26 <Gpt_EnableNotification+0xa>
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	6a 83       	std	Y+2, r22	; 0x02
    2c2e:	5c 83       	std	Y+4, r21	; 0x04
    2c30:	4b 83       	std	Y+3, r20	; 0x03
    switch (channel)
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	3e 83       	std	Y+6, r19	; 0x06
    2c3a:	2d 83       	std	Y+5, r18	; 0x05
    2c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	91 05       	cpc	r25, r1
    2c44:	d1 f1       	breq	.+116    	; 0x2cba <Gpt_EnableNotification+0x9e>
    2c46:	2d 81       	ldd	r18, Y+5	; 0x05
    2c48:	3e 81       	ldd	r19, Y+6	; 0x06
    2c4a:	22 30       	cpi	r18, 0x02	; 2
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <Gpt_EnableNotification+0x3e>
    2c50:	8d 81       	ldd	r24, Y+5	; 0x05
    2c52:	9e 81       	ldd	r25, Y+6	; 0x06
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	71 f0       	breq	.+28     	; 0x2c74 <Gpt_EnableNotification+0x58>
    2c58:	96 c0       	rjmp	.+300    	; 0x2d86 <Gpt_EnableNotification+0x16a>
    2c5a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c5c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c5e:	22 30       	cpi	r18, 0x02	; 2
    2c60:	31 05       	cpc	r19, r1
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <Gpt_EnableNotification+0x4a>
    2c64:	4d c0       	rjmp	.+154    	; 0x2d00 <Gpt_EnableNotification+0xe4>
    2c66:	8d 81       	ldd	r24, Y+5	; 0x05
    2c68:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6a:	83 30       	cpi	r24, 0x03	; 3
    2c6c:	91 05       	cpc	r25, r1
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <Gpt_EnableNotification+0x56>
    2c70:	69 c0       	rjmp	.+210    	; 0x2d44 <Gpt_EnableNotification+0x128>
    2c72:	89 c0       	rjmp	.+274    	; 0x2d86 <Gpt_EnableNotification+0x16a>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	88 23       	and	r24, r24
    2c78:	71 f4       	brne	.+28     	; 0x2c96 <Gpt_EnableNotification+0x7a>
        {
            Gpt_Timer0_Callback_Normal = callback;
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	90 93 ea 01 	sts	0x01EA, r25
    2c82:	80 93 e9 01 	sts	0x01E9, r24
            SET_BIT(TIMSK, TIMSK_TOIE0);
    2c86:	a9 e5       	ldi	r26, 0x59	; 89
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	e9 e5       	ldi	r30, 0x59	; 89
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	81 60       	ori	r24, 0x01	; 1
    2c92:	8c 93       	st	X, r24
    2c94:	78 c0       	rjmp	.+240    	; 0x2d86 <Gpt_EnableNotification+0x16a>
        }
        else if (mode == GPT_MODE_CTC)
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <Gpt_EnableNotification+0x82>
    2c9c:	74 c0       	rjmp	.+232    	; 0x2d86 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer0_Callback_Ctc = callback;
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	90 93 e0 01 	sts	0x01E0, r25
    2ca6:	80 93 df 01 	sts	0x01DF, r24
            SET_BIT(TIMSK, TIMSK_OCIE0);
    2caa:	a9 e5       	ldi	r26, 0x59	; 89
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	e9 e5       	ldi	r30, 0x59	; 89
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	82 60       	ori	r24, 0x02	; 2
    2cb6:	8c 93       	st	X, r24
    2cb8:	66 c0       	rjmp	.+204    	; 0x2d86 <Gpt_EnableNotification+0x16a>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	88 23       	and	r24, r24
    2cbe:	71 f4       	brne	.+28     	; 0x2cdc <Gpt_EnableNotification+0xc0>
        {
            Gpt_Timer1_Callback_Normal = callback;
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	90 93 ec 01 	sts	0x01EC, r25
    2cc8:	80 93 eb 01 	sts	0x01EB, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    2ccc:	a9 e5       	ldi	r26, 0x59	; 89
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e9 e5       	ldi	r30, 0x59	; 89
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	84 60       	ori	r24, 0x04	; 4
    2cd8:	8c 93       	st	X, r24
    2cda:	55 c0       	rjmp	.+170    	; 0x2d86 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	81 30       	cpi	r24, 0x01	; 1
    2ce0:	09 f0       	breq	.+2      	; 0x2ce4 <Gpt_EnableNotification+0xc8>
    2ce2:	51 c0       	rjmp	.+162    	; 0x2d86 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1A_Callback_Ctc = callback;
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	90 93 e8 01 	sts	0x01E8, r25
    2cec:	80 93 e7 01 	sts	0x01E7, r24
            SET_BIT(TIMSK, TIMSK_OCIE1A);
    2cf0:	a9 e5       	ldi	r26, 0x59	; 89
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	e9 e5       	ldi	r30, 0x59	; 89
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	80 61       	ori	r24, 0x10	; 16
    2cfc:	8c 93       	st	X, r24
    2cfe:	43 c0       	rjmp	.+134    	; 0x2d86 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	88 23       	and	r24, r24
    2d04:	71 f4       	brne	.+28     	; 0x2d22 <Gpt_EnableNotification+0x106>
        {
            Gpt_Timer1_Callback_Normal = callback;
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0a:	90 93 ec 01 	sts	0x01EC, r25
    2d0e:	80 93 eb 01 	sts	0x01EB, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    2d12:	a9 e5       	ldi	r26, 0x59	; 89
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e9 e5       	ldi	r30, 0x59	; 89
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	84 60       	ori	r24, 0x04	; 4
    2d1e:	8c 93       	st	X, r24
    2d20:	32 c0       	rjmp	.+100    	; 0x2d86 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	81 30       	cpi	r24, 0x01	; 1
    2d26:	79 f5       	brne	.+94     	; 0x2d86 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1B_Callback_Ctc = callback;
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2c:	90 93 e4 01 	sts	0x01E4, r25
    2d30:	80 93 e3 01 	sts	0x01E3, r24
            SET_BIT(TIMSK, TIMSK_OCIE1B);
    2d34:	a9 e5       	ldi	r26, 0x59	; 89
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e9 e5       	ldi	r30, 0x59	; 89
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 60       	ori	r24, 0x08	; 8
    2d40:	8c 93       	st	X, r24
    2d42:	21 c0       	rjmp	.+66     	; 0x2d86 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	88 23       	and	r24, r24
    2d48:	71 f4       	brne	.+28     	; 0x2d66 <Gpt_EnableNotification+0x14a>
        {
            Gpt_Timer2_Callback_Normal = callback;
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4e:	90 93 e6 01 	sts	0x01E6, r25
    2d52:	80 93 e5 01 	sts	0x01E5, r24
            SET_BIT(TIMSK, TIMSK_TOIE2);
    2d56:	a9 e5       	ldi	r26, 0x59	; 89
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	e9 e5       	ldi	r30, 0x59	; 89
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	80 64       	ori	r24, 0x40	; 64
    2d62:	8c 93       	st	X, r24
    2d64:	10 c0       	rjmp	.+32     	; 0x2d86 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	69 f4       	brne	.+26     	; 0x2d86 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer2_Callback_Ctc = callback;
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	90 93 e2 01 	sts	0x01E2, r25
    2d74:	80 93 e1 01 	sts	0x01E1, r24
            SET_BIT(TIMSK, TIMSK_OCIE2);
    2d78:	a9 e5       	ldi	r26, 0x59	; 89
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e9 e5       	ldi	r30, 0x59	; 89
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	80 68       	ori	r24, 0x80	; 128
    2d84:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    2d86:	26 96       	adiw	r28, 0x06	; 6
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <Gpt_DisableNotification>:

void Gpt_DisableNotification(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <Gpt_DisableNotification+0x6>
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <Gpt_DisableNotification+0x8>
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	3c 83       	std	Y+4, r19	; 0x04
    2db0:	2b 83       	std	Y+3, r18	; 0x03
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	81 30       	cpi	r24, 0x01	; 1
    2db8:	91 05       	cpc	r25, r1
    2dba:	69 f1       	breq	.+90     	; 0x2e16 <Gpt_DisableNotification+0x7e>
    2dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc0:	22 30       	cpi	r18, 0x02	; 2
    2dc2:	31 05       	cpc	r19, r1
    2dc4:	2c f4       	brge	.+10     	; 0x2dd0 <Gpt_DisableNotification+0x38>
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	69 f0       	breq	.+26     	; 0x2de8 <Gpt_DisableNotification+0x50>
    2dce:	64 c0       	rjmp	.+200    	; 0x2e98 <Gpt_DisableNotification+0x100>
    2dd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd4:	22 30       	cpi	r18, 0x02	; 2
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	a1 f1       	breq	.+104    	; 0x2e42 <Gpt_DisableNotification+0xaa>
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	83 30       	cpi	r24, 0x03	; 3
    2de0:	91 05       	cpc	r25, r1
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <Gpt_DisableNotification+0x4e>
    2de4:	44 c0       	rjmp	.+136    	; 0x2e6e <Gpt_DisableNotification+0xd6>
    2de6:	58 c0       	rjmp	.+176    	; 0x2e98 <Gpt_DisableNotification+0x100>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	88 23       	and	r24, r24
    2dec:	41 f4       	brne	.+16     	; 0x2dfe <Gpt_DisableNotification+0x66>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    2dee:	a9 e5       	ldi	r26, 0x59	; 89
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e9 e5       	ldi	r30, 0x59	; 89
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	8e 7f       	andi	r24, 0xFE	; 254
    2dfa:	8c 93       	st	X, r24
    2dfc:	4d c0       	rjmp	.+154    	; 0x2e98 <Gpt_DisableNotification+0x100>
        }
        else if (mode == GPT_MODE_CTC)
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <Gpt_DisableNotification+0x6e>
    2e04:	49 c0       	rjmp	.+146    	; 0x2e98 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    2e06:	a9 e5       	ldi	r26, 0x59	; 89
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e9 e5       	ldi	r30, 0x59	; 89
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8d 7f       	andi	r24, 0xFD	; 253
    2e12:	8c 93       	st	X, r24
    2e14:	41 c0       	rjmp	.+130    	; 0x2e98 <Gpt_DisableNotification+0x100>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	88 23       	and	r24, r24
    2e1a:	41 f4       	brne	.+16     	; 0x2e2c <Gpt_DisableNotification+0x94>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    2e1c:	a9 e5       	ldi	r26, 0x59	; 89
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e9 e5       	ldi	r30, 0x59	; 89
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	8b 7f       	andi	r24, 0xFB	; 251
    2e28:	8c 93       	st	X, r24
    2e2a:	36 c0       	rjmp	.+108    	; 0x2e98 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	81 30       	cpi	r24, 0x01	; 1
    2e30:	99 f5       	brne	.+102    	; 0x2e98 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1A);
    2e32:	a9 e5       	ldi	r26, 0x59	; 89
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	e9 e5       	ldi	r30, 0x59	; 89
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	8f 7e       	andi	r24, 0xEF	; 239
    2e3e:	8c 93       	st	X, r24
    2e40:	2b c0       	rjmp	.+86     	; 0x2e98 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	88 23       	and	r24, r24
    2e46:	41 f4       	brne	.+16     	; 0x2e58 <Gpt_DisableNotification+0xc0>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    2e48:	a9 e5       	ldi	r26, 0x59	; 89
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e9 e5       	ldi	r30, 0x59	; 89
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	8b 7f       	andi	r24, 0xFB	; 251
    2e54:	8c 93       	st	X, r24
    2e56:	20 c0       	rjmp	.+64     	; 0x2e98 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	81 30       	cpi	r24, 0x01	; 1
    2e5c:	e9 f4       	brne	.+58     	; 0x2e98 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1B);
    2e5e:	a9 e5       	ldi	r26, 0x59	; 89
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e9 e5       	ldi	r30, 0x59	; 89
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	87 7f       	andi	r24, 0xF7	; 247
    2e6a:	8c 93       	st	X, r24
    2e6c:	15 c0       	rjmp	.+42     	; 0x2e98 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	88 23       	and	r24, r24
    2e72:	41 f4       	brne	.+16     	; 0x2e84 <Gpt_DisableNotification+0xec>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE2);
    2e74:	a9 e5       	ldi	r26, 0x59	; 89
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e9 e5       	ldi	r30, 0x59	; 89
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	8f 7b       	andi	r24, 0xBF	; 191
    2e80:	8c 93       	st	X, r24
    2e82:	0a c0       	rjmp	.+20     	; 0x2e98 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
    2e86:	81 30       	cpi	r24, 0x01	; 1
    2e88:	39 f4       	brne	.+14     	; 0x2e98 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE2);
    2e8a:	a9 e5       	ldi	r26, 0x59	; 89
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e9 e5       	ldi	r30, 0x59	; 89
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	8f 77       	andi	r24, 0x7F	; 127
    2e96:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <I2C_InitMaster>:
#include "Registers.h"
#include "I2C.h"
#include "I2C_cfg.h"

void I2C_InitMaster(void)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    2eae:	e0 e2       	ldi	r30, 0x20	; 32
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	82 e0       	ldi	r24, 0x02	; 2
    2eb4:	80 83       	st	Z, r24
	TWSR = 0x00;
    2eb6:	e1 e2       	ldi	r30, 0x21	; 33
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	10 82       	st	Z, r1

	TWCR = (1<<2); /* enable TWI */
    2ebc:	e6 e5       	ldi	r30, 0x56	; 86
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	84 e0       	ldi	r24, 0x04	; 4
    2ec2:	80 83       	st	Z, r24
}
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <I2C_SendStartCondition>:
void I2C_SendStartCondition(void)
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
    2ed2:	e6 e5       	ldi	r30, 0x56	; 86
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	84 ea       	ldi	r24, 0xA4	; 164
    2ed8:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    2eda:	e6 e5       	ldi	r30, 0x56	; 86
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 23       	and	r24, r24
    2ee2:	dc f7       	brge	.-10     	; 0x2eda <I2C_SendStartCondition+0x10>
}
    2ee4:	cf 91       	pop	r28
    2ee6:	df 91       	pop	r29
    2ee8:	08 95       	ret

00002eea <I2C_SendStopCondition>:
void I2C_SendStopCondition(void)
{
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
	 *  Enable TWI Module TWEN=1 ---> //SET_BIT(TWCR,2);
		        Sent stop condition on the bus ---> //SET_BIT(TWCR,4);
		        Clear the interrupt flag To start the previous operation
		         //SET_BIT(TWCR,7);
	 */
	TWCR = (1 << 7) | (1 << 4) | (1 << 2);
    2ef2:	e6 e5       	ldi	r30, 0x56	; 86
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	84 e9       	ldi	r24, 0x94	; 148
    2ef8:	80 83       	st	Z, r24
}
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <I2C_MasterWriteDataByte>:
void I2C_MasterWriteDataByte(u8 Data)
{
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	0f 92       	push	r0
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = Data;
    2f0c:	e3 e2       	ldi	r30, 0x23	; 35
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 2);
    2f14:	e6 e5       	ldi	r30, 0x56	; 86
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	84 e8       	ldi	r24, 0x84	; 132
    2f1a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    2f1c:	e6 e5       	ldi	r30, 0x56	; 86
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	88 23       	and	r24, r24
    2f24:	dc f7       	brge	.-10     	; 0x2f1c <I2C_MasterWriteDataByte+0x1c>
}
    2f26:	0f 90       	pop	r0
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <I2C_MasterReadDataByteWith_ACK>:
u8   I2C_MasterReadDataByteWith_ACK(void)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	 * --------------------------------------------
	 *     Enable Acknowledge bit --> //SET_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2) | (1 << 6);
    2f36:	e6 e5       	ldi	r30, 0x56	; 86
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	84 ec       	ldi	r24, 0xC4	; 196
    2f3c:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    2f3e:	e6 e5       	ldi	r30, 0x56	; 86
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	88 23       	and	r24, r24
    2f46:	dc f7       	brge	.-10     	; 0x2f3e <I2C_MasterReadDataByteWith_ACK+0x10>
	/* Read Data */
	return TWDR;
    2f48:	e3 e2       	ldi	r30, 0x23	; 35
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
}
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <I2C_MasterReadDataByteWith_NACK>:
u8   I2C_MasterReadDataByteWith_NACK(void)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
	 * -------------------------------------------
	 * 	 * Disable Acknowledge bit --> //CLR_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2);
    2f5c:	e6 e5       	ldi	r30, 0x56	; 86
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	84 e8       	ldi	r24, 0x84	; 132
    2f62:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    2f64:	e6 e5       	ldi	r30, 0x56	; 86
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	88 23       	and	r24, r24
    2f6c:	dc f7       	brge	.-10     	; 0x2f64 <I2C_MasterReadDataByteWith_NACK+0x10>
	/* Read Data */
	return TWDR;
    2f6e:	e3 e2       	ldi	r30, 0x23	; 35
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
}
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    2f82:	83 e0       	ldi	r24, 0x03	; 3
    2f84:	62 e0       	ldi	r22, 0x02	; 2
    2f86:	41 e0       	ldi	r20, 0x01	; 1
    2f88:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	67 e0       	ldi	r22, 0x07	; 7
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    2f96:	82 e0       	ldi	r24, 0x02	; 2
    2f98:	66 e0       	ldi	r22, 0x06	; 6
    2f9a:	41 e0       	ldi	r20, 0x01	; 1
    2f9c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	65 e0       	ldi	r22, 0x05	; 5
    2fa4:	41 e0       	ldi	r20, 0x01	; 1
    2fa6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	64 e0       	ldi	r22, 0x04	; 4
    2fae:	42 e0       	ldi	r20, 0x02	; 2
    2fb0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    2fb4:	83 e0       	ldi	r24, 0x03	; 3
    2fb6:	63 e0       	ldi	r22, 0x03	; 3
    2fb8:	42 e0       	ldi	r20, 0x02	; 2
    2fba:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    2fbe:	83 e0       	ldi	r24, 0x03	; 3
    2fc0:	66 e0       	ldi	r22, 0x06	; 6
    2fc2:	42 e0       	ldi	r20, 0x02	; 2
    2fc4:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	67 e0       	ldi	r22, 0x07	; 7
    2fcc:	42 e0       	ldi	r20, 0x02	; 2
    2fce:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
}
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	28 97       	sbiw	r28, 0x08	; 8
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	cd bf       	out	0x3d, r28	; 61
    2fec:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    2ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff4:	86 95       	lsr	r24
    2ff6:	86 95       	lsr	r24
    2ff8:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    2ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffc:	83 70       	andi	r24, 0x03	; 3
    2ffe:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	64 e0       	ldi	r22, 0x04	; 4
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    300a:	83 e0       	ldi	r24, 0x03	; 3
    300c:	63 e0       	ldi	r22, 0x03	; 3
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    3014:	83 e0       	ldi	r24, 0x03	; 3
    3016:	66 e0       	ldi	r22, 0x06	; 6
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	67 e0       	ldi	r22, 0x07	; 7
    3022:	41 e0       	ldi	r20, 0x01	; 1
    3024:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    switch (column)
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	28 2f       	mov	r18, r24
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	38 87       	std	Y+8, r19	; 0x08
    3030:	2f 83       	std	Y+7, r18	; 0x07
    3032:	8f 81       	ldd	r24, Y+7	; 0x07
    3034:	98 85       	ldd	r25, Y+8	; 0x08
    3036:	81 30       	cpi	r24, 0x01	; 1
    3038:	91 05       	cpc	r25, r1
    303a:	d9 f0       	breq	.+54     	; 0x3072 <Keypad_GetButtonState+0x9a>
    303c:	2f 81       	ldd	r18, Y+7	; 0x07
    303e:	38 85       	ldd	r19, Y+8	; 0x08
    3040:	22 30       	cpi	r18, 0x02	; 2
    3042:	31 05       	cpc	r19, r1
    3044:	2c f4       	brge	.+10     	; 0x3050 <Keypad_GetButtonState+0x78>
    3046:	8f 81       	ldd	r24, Y+7	; 0x07
    3048:	98 85       	ldd	r25, Y+8	; 0x08
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	61 f0       	breq	.+24     	; 0x3066 <Keypad_GetButtonState+0x8e>
    304e:	22 c0       	rjmp	.+68     	; 0x3094 <Keypad_GetButtonState+0xbc>
    3050:	2f 81       	ldd	r18, Y+7	; 0x07
    3052:	38 85       	ldd	r19, Y+8	; 0x08
    3054:	22 30       	cpi	r18, 0x02	; 2
    3056:	31 05       	cpc	r19, r1
    3058:	91 f0       	breq	.+36     	; 0x307e <Keypad_GetButtonState+0xa6>
    305a:	8f 81       	ldd	r24, Y+7	; 0x07
    305c:	98 85       	ldd	r25, Y+8	; 0x08
    305e:	83 30       	cpi	r24, 0x03	; 3
    3060:	91 05       	cpc	r25, r1
    3062:	99 f0       	breq	.+38     	; 0x308a <Keypad_GetButtonState+0xb2>
    3064:	17 c0       	rjmp	.+46     	; 0x3094 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    3066:	83 e0       	ldi	r24, 0x03	; 3
    3068:	64 e0       	ldi	r22, 0x04	; 4
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    3070:	11 c0       	rjmp	.+34     	; 0x3094 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    3072:	83 e0       	ldi	r24, 0x03	; 3
    3074:	63 e0       	ldi	r22, 0x03	; 3
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    307c:	0b c0       	rjmp	.+22     	; 0x3094 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    307e:	83 e0       	ldi	r24, 0x03	; 3
    3080:	66 e0       	ldi	r22, 0x06	; 6
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    3088:	05 c0       	rjmp	.+10     	; 0x3094 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	67 e0       	ldi	r22, 0x07	; 7
    308e:	40 e0       	ldi	r20, 0x00	; 0
    3090:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	3e 83       	std	Y+6, r19	; 0x06
    309c:	2d 83       	std	Y+5, r18	; 0x05
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	81 30       	cpi	r24, 0x01	; 1
    30a4:	91 05       	cpc	r25, r1
    30a6:	e9 f0       	breq	.+58     	; 0x30e2 <Keypad_GetButtonState+0x10a>
    30a8:	2d 81       	ldd	r18, Y+5	; 0x05
    30aa:	3e 81       	ldd	r19, Y+6	; 0x06
    30ac:	22 30       	cpi	r18, 0x02	; 2
    30ae:	31 05       	cpc	r19, r1
    30b0:	2c f4       	brge	.+10     	; 0x30bc <Keypad_GetButtonState+0xe4>
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	61 f0       	breq	.+24     	; 0x30d2 <Keypad_GetButtonState+0xfa>
    30ba:	2a c0       	rjmp	.+84     	; 0x3110 <Keypad_GetButtonState+0x138>
    30bc:	2d 81       	ldd	r18, Y+5	; 0x05
    30be:	3e 81       	ldd	r19, Y+6	; 0x06
    30c0:	22 30       	cpi	r18, 0x02	; 2
    30c2:	31 05       	cpc	r19, r1
    30c4:	b1 f0       	breq	.+44     	; 0x30f2 <Keypad_GetButtonState+0x11a>
    30c6:	8d 81       	ldd	r24, Y+5	; 0x05
    30c8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ca:	83 30       	cpi	r24, 0x03	; 3
    30cc:	91 05       	cpc	r25, r1
    30ce:	c9 f0       	breq	.+50     	; 0x3102 <Keypad_GetButtonState+0x12a>
    30d0:	1f c0       	rjmp	.+62     	; 0x3110 <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    30d2:	83 e0       	ldi	r24, 0x03	; 3
    30d4:	62 e0       	ldi	r22, 0x02	; 2
    30d6:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    30da:	88 23       	and	r24, r24
    30dc:	c9 f4       	brne	.+50     	; 0x3110 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    30de:	1b 82       	std	Y+3, r1	; 0x03
    30e0:	17 c0       	rjmp	.+46     	; 0x3110 <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    30e2:	82 e0       	ldi	r24, 0x02	; 2
    30e4:	67 e0       	ldi	r22, 0x07	; 7
    30e6:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    30ea:	88 23       	and	r24, r24
    30ec:	89 f4       	brne	.+34     	; 0x3110 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    30ee:	1b 82       	std	Y+3, r1	; 0x03
    30f0:	0f c0       	rjmp	.+30     	; 0x3110 <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    30f2:	82 e0       	ldi	r24, 0x02	; 2
    30f4:	66 e0       	ldi	r22, 0x06	; 6
    30f6:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    30fa:	88 23       	and	r24, r24
    30fc:	49 f4       	brne	.+18     	; 0x3110 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    30fe:	1b 82       	std	Y+3, r1	; 0x03
    3100:	07 c0       	rjmp	.+14     	; 0x3110 <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    3102:	82 e0       	ldi	r24, 0x02	; 2
    3104:	65 e0       	ldi	r22, 0x05	; 5
    3106:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    310a:	88 23       	and	r24, r24
    310c:	09 f4       	brne	.+2      	; 0x3110 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    310e:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3112:	28 96       	adiw	r28, 0x08	; 8
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	28 97       	sbiw	r28, 0x08	; 8
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    313e:	8c 81       	ldd	r24, Y+4	; 0x04
    3140:	86 95       	lsr	r24
    3142:	86 95       	lsr	r24
    3144:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    3146:	8c 81       	ldd	r24, Y+4	; 0x04
    3148:	83 70       	andi	r24, 0x03	; 3
    314a:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    314c:	83 e0       	ldi	r24, 0x03	; 3
    314e:	64 e0       	ldi	r22, 0x04	; 4
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    3156:	83 e0       	ldi	r24, 0x03	; 3
    3158:	63 e0       	ldi	r22, 0x03	; 3
    315a:	41 e0       	ldi	r20, 0x01	; 1
    315c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    3160:	83 e0       	ldi	r24, 0x03	; 3
    3162:	66 e0       	ldi	r22, 0x06	; 6
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    316a:	83 e0       	ldi	r24, 0x03	; 3
    316c:	67 e0       	ldi	r22, 0x07	; 7
    316e:	41 e0       	ldi	r20, 0x01	; 1
    3170:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    switch (column)
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	28 2f       	mov	r18, r24
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	38 87       	std	Y+8, r19	; 0x08
    317c:	2f 83       	std	Y+7, r18	; 0x07
    317e:	8f 81       	ldd	r24, Y+7	; 0x07
    3180:	98 85       	ldd	r25, Y+8	; 0x08
    3182:	81 30       	cpi	r24, 0x01	; 1
    3184:	91 05       	cpc	r25, r1
    3186:	d9 f0       	breq	.+54     	; 0x31be <Keypad_GetButtonStatePooling+0x9a>
    3188:	2f 81       	ldd	r18, Y+7	; 0x07
    318a:	38 85       	ldd	r19, Y+8	; 0x08
    318c:	22 30       	cpi	r18, 0x02	; 2
    318e:	31 05       	cpc	r19, r1
    3190:	2c f4       	brge	.+10     	; 0x319c <Keypad_GetButtonStatePooling+0x78>
    3192:	8f 81       	ldd	r24, Y+7	; 0x07
    3194:	98 85       	ldd	r25, Y+8	; 0x08
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	61 f0       	breq	.+24     	; 0x31b2 <Keypad_GetButtonStatePooling+0x8e>
    319a:	22 c0       	rjmp	.+68     	; 0x31e0 <Keypad_GetButtonStatePooling+0xbc>
    319c:	2f 81       	ldd	r18, Y+7	; 0x07
    319e:	38 85       	ldd	r19, Y+8	; 0x08
    31a0:	22 30       	cpi	r18, 0x02	; 2
    31a2:	31 05       	cpc	r19, r1
    31a4:	91 f0       	breq	.+36     	; 0x31ca <Keypad_GetButtonStatePooling+0xa6>
    31a6:	8f 81       	ldd	r24, Y+7	; 0x07
    31a8:	98 85       	ldd	r25, Y+8	; 0x08
    31aa:	83 30       	cpi	r24, 0x03	; 3
    31ac:	91 05       	cpc	r25, r1
    31ae:	99 f0       	breq	.+38     	; 0x31d6 <Keypad_GetButtonStatePooling+0xb2>
    31b0:	17 c0       	rjmp	.+46     	; 0x31e0 <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	64 e0       	ldi	r22, 0x04	; 4
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    31bc:	11 c0       	rjmp	.+34     	; 0x31e0 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    31be:	83 e0       	ldi	r24, 0x03	; 3
    31c0:	63 e0       	ldi	r22, 0x03	; 3
    31c2:	40 e0       	ldi	r20, 0x00	; 0
    31c4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    31c8:	0b c0       	rjmp	.+22     	; 0x31e0 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	66 e0       	ldi	r22, 0x06	; 6
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    31d4:	05 c0       	rjmp	.+10     	; 0x31e0 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    31d6:	83 e0       	ldi	r24, 0x03	; 3
    31d8:	67 e0       	ldi	r22, 0x07	; 7
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    31e0:	8a 81       	ldd	r24, Y+2	; 0x02
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	3e 83       	std	Y+6, r19	; 0x06
    31e8:	2d 83       	std	Y+5, r18	; 0x05
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	9e 81       	ldd	r25, Y+6	; 0x06
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	91 05       	cpc	r25, r1
    31f2:	19 f1       	breq	.+70     	; 0x323a <Keypad_GetButtonStatePooling+0x116>
    31f4:	2d 81       	ldd	r18, Y+5	; 0x05
    31f6:	3e 81       	ldd	r19, Y+6	; 0x06
    31f8:	22 30       	cpi	r18, 0x02	; 2
    31fa:	31 05       	cpc	r19, r1
    31fc:	2c f4       	brge	.+10     	; 0x3208 <Keypad_GetButtonStatePooling+0xe4>
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	61 f0       	breq	.+24     	; 0x321e <Keypad_GetButtonStatePooling+0xfa>
    3206:	42 c0       	rjmp	.+132    	; 0x328c <Keypad_GetButtonStatePooling+0x168>
    3208:	2d 81       	ldd	r18, Y+5	; 0x05
    320a:	3e 81       	ldd	r19, Y+6	; 0x06
    320c:	22 30       	cpi	r18, 0x02	; 2
    320e:	31 05       	cpc	r19, r1
    3210:	11 f1       	breq	.+68     	; 0x3256 <Keypad_GetButtonStatePooling+0x132>
    3212:	8d 81       	ldd	r24, Y+5	; 0x05
    3214:	9e 81       	ldd	r25, Y+6	; 0x06
    3216:	83 30       	cpi	r24, 0x03	; 3
    3218:	91 05       	cpc	r25, r1
    321a:	59 f1       	breq	.+86     	; 0x3272 <Keypad_GetButtonStatePooling+0x14e>
    321c:	37 c0       	rjmp	.+110    	; 0x328c <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    321e:	83 e0       	ldi	r24, 0x03	; 3
    3220:	62 e0       	ldi	r22, 0x02	; 2
    3222:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    3226:	88 23       	and	r24, r24
    3228:	89 f5       	brne	.+98     	; 0x328c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    322a:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    322c:	83 e0       	ldi	r24, 0x03	; 3
    322e:	62 e0       	ldi	r22, 0x02	; 2
    3230:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    3234:	88 23       	and	r24, r24
    3236:	d1 f3       	breq	.-12     	; 0x322c <Keypad_GetButtonStatePooling+0x108>
    3238:	29 c0       	rjmp	.+82     	; 0x328c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    323a:	82 e0       	ldi	r24, 0x02	; 2
    323c:	67 e0       	ldi	r22, 0x07	; 7
    323e:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    3242:	88 23       	and	r24, r24
    3244:	19 f5       	brne	.+70     	; 0x328c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3246:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	67 e0       	ldi	r22, 0x07	; 7
    324c:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    3250:	88 23       	and	r24, r24
    3252:	d1 f3       	breq	.-12     	; 0x3248 <Keypad_GetButtonStatePooling+0x124>
    3254:	1b c0       	rjmp	.+54     	; 0x328c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    3256:	82 e0       	ldi	r24, 0x02	; 2
    3258:	66 e0       	ldi	r22, 0x06	; 6
    325a:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    325e:	88 23       	and	r24, r24
    3260:	a9 f4       	brne	.+42     	; 0x328c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3262:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    3264:	82 e0       	ldi	r24, 0x02	; 2
    3266:	66 e0       	ldi	r22, 0x06	; 6
    3268:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    326c:	88 23       	and	r24, r24
    326e:	d1 f3       	breq	.-12     	; 0x3264 <Keypad_GetButtonStatePooling+0x140>
    3270:	0d c0       	rjmp	.+26     	; 0x328c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    3272:	82 e0       	ldi	r24, 0x02	; 2
    3274:	65 e0       	ldi	r22, 0x05	; 5
    3276:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    327a:	88 23       	and	r24, r24
    327c:	39 f4       	brne	.+14     	; 0x328c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    327e:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    3280:	82 e0       	ldi	r24, 0x02	; 2
    3282:	65 e0       	ldi	r22, 0x05	; 5
    3284:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    3288:	88 23       	and	r24, r24
    328a:	d1 f3       	breq	.-12     	; 0x3280 <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    328e:	28 96       	adiw	r28, 0x08	; 8
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <Keypad_GetPressedButton+0x6>
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    32aa:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    32ac:	80 e1       	ldi	r24, 0x10	; 16
    32ae:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    32b0:	1a 82       	std	Y+2, r1	; 0x02
    32b2:	0b c0       	rjmp	.+22     	; 0x32ca <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	0e 94 92 18 	call	0x3124	; 0x3124 <Keypad_GetButtonStatePooling>
    32ba:	88 23       	and	r24, r24
    32bc:	19 f4       	brne	.+6      	; 0x32c4 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	06 c0       	rjmp	.+12     	; 0x32d0 <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	8f 5f       	subi	r24, 0xFF	; 255
    32c8:	8a 83       	std	Y+2, r24	; 0x02
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	80 31       	cpi	r24, 0x10	; 16
    32ce:	90 f3       	brcs	.-28     	; 0x32b4 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	2f 97       	sbiw	r28, 0x0f	; 15
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    32f0:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    32f2:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <LCD_InitPinsMode>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	a0 ef       	ldi	r26, 0xF0	; 240
    32fc:	b1 e4       	ldi	r27, 0x41	; 65
    32fe:	8b 87       	std	Y+11, r24	; 0x0b
    3300:	9c 87       	std	Y+12, r25	; 0x0c
    3302:	ad 87       	std	Y+13, r26	; 0x0d
    3304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3306:	6b 85       	ldd	r22, Y+11	; 0x0b
    3308:	7c 85       	ldd	r23, Y+12	; 0x0c
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	9e 85       	ldd	r25, Y+14	; 0x0e
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	4a ef       	ldi	r20, 0xFA	; 250
    3314:	54 e4       	ldi	r21, 0x44	; 68
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	8f 83       	std	Y+7, r24	; 0x07
    3320:	98 87       	std	Y+8, r25	; 0x08
    3322:	a9 87       	std	Y+9, r26	; 0x09
    3324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3326:	6f 81       	ldd	r22, Y+7	; 0x07
    3328:	78 85       	ldd	r23, Y+8	; 0x08
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	9a 85       	ldd	r25, Y+10	; 0x0a
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e8       	ldi	r20, 0x80	; 128
    3334:	5f e3       	ldi	r21, 0x3F	; 63
    3336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    333a:	88 23       	and	r24, r24
    333c:	2c f4       	brge	.+10     	; 0x3348 <LCD_Init+0x6c>
		__ticks = 1;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
    3346:	3f c0       	rjmp	.+126    	; 0x33c6 <LCD_Init+0xea>
	else if (__tmp > 65535)
    3348:	6f 81       	ldd	r22, Y+7	; 0x07
    334a:	78 85       	ldd	r23, Y+8	; 0x08
    334c:	89 85       	ldd	r24, Y+9	; 0x09
    334e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	3f ef       	ldi	r19, 0xFF	; 255
    3354:	4f e7       	ldi	r20, 0x7F	; 127
    3356:	57 e4       	ldi	r21, 0x47	; 71
    3358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    335c:	18 16       	cp	r1, r24
    335e:	4c f5       	brge	.+82     	; 0x33b2 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3360:	6b 85       	ldd	r22, Y+11	; 0x0b
    3362:	7c 85       	ldd	r23, Y+12	; 0x0c
    3364:	8d 85       	ldd	r24, Y+13	; 0x0d
    3366:	9e 85       	ldd	r25, Y+14	; 0x0e
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e2       	ldi	r20, 0x20	; 32
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	bc 01       	movw	r22, r24
    337a:	cd 01       	movw	r24, r26
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9e 83       	std	Y+6, r25	; 0x06
    3386:	8d 83       	std	Y+5, r24	; 0x05
    3388:	0f c0       	rjmp	.+30     	; 0x33a8 <LCD_Init+0xcc>
    338a:	88 ec       	ldi	r24, 0xC8	; 200
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	9c 83       	std	Y+4, r25	; 0x04
    3390:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3392:	8b 81       	ldd	r24, Y+3	; 0x03
    3394:	9c 81       	ldd	r25, Y+4	; 0x04
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	f1 f7       	brne	.-4      	; 0x3396 <LCD_Init+0xba>
    339a:	9c 83       	std	Y+4, r25	; 0x04
    339c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339e:	8d 81       	ldd	r24, Y+5	; 0x05
    33a0:	9e 81       	ldd	r25, Y+6	; 0x06
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	9e 83       	std	Y+6, r25	; 0x06
    33a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a8:	8d 81       	ldd	r24, Y+5	; 0x05
    33aa:	9e 81       	ldd	r25, Y+6	; 0x06
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	69 f7       	brne	.-38     	; 0x338a <LCD_Init+0xae>
    33b0:	14 c0       	rjmp	.+40     	; 0x33da <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b2:	6f 81       	ldd	r22, Y+7	; 0x07
    33b4:	78 85       	ldd	r23, Y+8	; 0x08
    33b6:	89 85       	ldd	r24, Y+9	; 0x09
    33b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	9e 83       	std	Y+6, r25	; 0x06
    33c4:	8d 83       	std	Y+5, r24	; 0x05
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	9a 81       	ldd	r25, Y+2	; 0x02
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <LCD_Init+0xf6>
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    33da:	80 e3       	ldi	r24, 0x30	; 48
    33dc:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    33de:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e0:	88 60       	ori	r24, 0x08	; 8
    33e2:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    33e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e6:	84 60       	ori	r24, 0x04	; 4
    33e8:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    33ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ec:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000; 
    33f0:	88 e0       	ldi	r24, 0x08	; 8
    33f2:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    33f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f6:	84 60       	ori	r24, 0x04	; 4
    33f8:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    33fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33fc:	81 60       	ori	r24, 0x01	; 1
    33fe:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    3400:	8f 85       	ldd	r24, Y+15	; 0x0f
    3402:	82 60       	ori	r24, 0x02	; 2
    3404:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    3406:	8f 85       	ldd	r24, Y+15	; 0x0f
    3408:	82 60       	ori	r24, 0x02	; 2
    340a:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    340c:	8f 85       	ldd	r24, Y+15	; 0x0f
    340e:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_SendCommand>
}
    3418:	2f 96       	adiw	r28, 0x0f	; 15
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <LCD_Clear>:


void LCD_Clear (void) {
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_SendCommand>
}
    3438:	cf 91       	pop	r28
    343a:	df 91       	pop	r29
    343c:	08 95       	ret

0000343e <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    343e:	df 93       	push	r29
    3440:	cf 93       	push	r28
    3442:	0f 92       	push	r0
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	0e 94 11 1c 	call	0x3822	; 0x3822 <LCD_SendData>
}
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <LCD_DisplayString+0x6>
    345e:	0f 92       	push	r0
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	9b 83       	std	Y+3, r25	; 0x03
    3466:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    3468:	19 82       	std	Y+1, r1	; 0x01
    346a:	0e c0       	rjmp	.+28     	; 0x3488 <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	fc 01       	movw	r30, r24
    3478:	e2 0f       	add	r30, r18
    347a:	f3 1f       	adc	r31, r19
    347c:	80 81       	ld	r24, Z
    347e:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCharacter>
        i++;
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	8f 5f       	subi	r24, 0xFF	; 255
    3486:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	28 2f       	mov	r18, r24
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	8a 81       	ldd	r24, Y+2	; 0x02
    3490:	9b 81       	ldd	r25, Y+3	; 0x03
    3492:	fc 01       	movw	r30, r24
    3494:	e2 0f       	add	r30, r18
    3496:	f3 1f       	adc	r31, r19
    3498:	80 81       	ld	r24, Z
    349a:	88 23       	and	r24, r24
    349c:	39 f7       	brne	.-50     	; 0x346c <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	00 d0       	rcall	.+0      	; 0x34b0 <LCD_SetCursorPosition+0x6>
    34b0:	0f 92       	push	r0
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	8a 83       	std	Y+2, r24	; 0x02
    34b8:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	88 2f       	mov	r24, r24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	00 24       	eor	r0, r0
    34c2:	96 95       	lsr	r25
    34c4:	87 95       	ror	r24
    34c6:	07 94       	ror	r0
    34c8:	96 95       	lsr	r25
    34ca:	87 95       	ror	r24
    34cc:	07 94       	ror	r0
    34ce:	98 2f       	mov	r25, r24
    34d0:	80 2d       	mov	r24, r0
    34d2:	98 2f       	mov	r25, r24
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	89 0f       	add	r24, r25
    34d8:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    34da:	89 81       	ldd	r24, Y+1	; 0x01
    34dc:	80 68       	ori	r24, 0x80	; 128
    34de:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_SendCommand>
}
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	08 95       	ret

000034f2 <LCD_DisplayNumber>:

void LCD_DisplayNumber (s32 number) {
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <LCD_DisplayNumber+0x6>
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <LCD_DisplayNumber+0x8>
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <LCD_DisplayNumber+0xa>
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	9e 83       	std	Y+6, r25	; 0x06
    3502:	8d 83       	std	Y+5, r24	; 0x05
    u32 reversed_number = 0;
    3504:	1c 82       	std	Y+4, r1	; 0x04
    3506:	1b 82       	std	Y+3, r1	; 0x03
    u8 digits = 0;
    3508:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    350a:	8d 81       	ldd	r24, Y+5	; 0x05
    350c:	9e 81       	ldd	r25, Y+6	; 0x06
    350e:	99 23       	and	r25, r25
    3510:	5c f4       	brge	.+22     	; 0x3528 <LCD_DisplayNumber+0x36>
        number = number*-1;
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	90 95       	com	r25
    3518:	81 95       	neg	r24
    351a:	9f 4f       	sbci	r25, 0xFF	; 255
    351c:	9e 83       	std	Y+6, r25	; 0x06
    351e:	8d 83       	std	Y+5, r24	; 0x05
        LCD_DisplayCharacter('-');
    3520:	8d e2       	ldi	r24, 0x2D	; 45
    3522:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCharacter>
    3526:	2d c0       	rjmp	.+90     	; 0x3582 <LCD_DisplayNumber+0x90>
    }
    else if (number == 0) {
    3528:	8d 81       	ldd	r24, Y+5	; 0x05
    352a:	9e 81       	ldd	r25, Y+6	; 0x06
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	49 f5       	brne	.+82     	; 0x3582 <LCD_DisplayNumber+0x90>
        LCD_DisplayCharacter('0');
    3530:	80 e3       	ldi	r24, 0x30	; 48
    3532:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCharacter>
    3536:	25 c0       	rjmp	.+74     	; 0x3582 <LCD_DisplayNumber+0x90>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    3538:	8b 81       	ldd	r24, Y+3	; 0x03
    353a:	9c 81       	ldd	r25, Y+4	; 0x04
    353c:	9c 01       	movw	r18, r24
    353e:	22 0f       	add	r18, r18
    3540:	33 1f       	adc	r19, r19
    3542:	c9 01       	movw	r24, r18
    3544:	88 0f       	add	r24, r24
    3546:	99 1f       	adc	r25, r25
    3548:	88 0f       	add	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	f9 01       	movw	r30, r18
    354e:	e8 0f       	add	r30, r24
    3550:	f9 1f       	adc	r31, r25
    3552:	8d 81       	ldd	r24, Y+5	; 0x05
    3554:	9e 81       	ldd	r25, Y+6	; 0x06
    3556:	2a e0       	ldi	r18, 0x0A	; 10
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	b9 01       	movw	r22, r18
    355c:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__divmodhi4>
    3560:	8e 0f       	add	r24, r30
    3562:	9f 1f       	adc	r25, r31
    3564:	9c 83       	std	Y+4, r25	; 0x04
    3566:	8b 83       	std	Y+3, r24	; 0x03
        number = number / 10;
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	2a e0       	ldi	r18, 0x0A	; 10
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	b9 01       	movw	r22, r18
    3572:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__divmodhi4>
    3576:	cb 01       	movw	r24, r22
    3578:	9e 83       	std	Y+6, r25	; 0x06
    357a:	8d 83       	std	Y+5, r24	; 0x05
        digits++;
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	8f 5f       	subi	r24, 0xFF	; 255
    3580:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	00 97       	sbiw	r24, 0x00	; 0
    3588:	b9 f6       	brne	.-82     	; 0x3538 <LCD_DisplayNumber+0x46>
    358a:	1b c0       	rjmp	.+54     	; 0x35c2 <LCD_DisplayNumber+0xd0>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	9c 81       	ldd	r25, Y+4	; 0x04
    3590:	2a e0       	ldi	r18, 0x0A	; 10
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	b9 01       	movw	r22, r18
    3596:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    359a:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	80 5d       	subi	r24, 0xD0	; 208
    35a0:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    35a8:	8b 81       	ldd	r24, Y+3	; 0x03
    35aa:	9c 81       	ldd	r25, Y+4	; 0x04
    35ac:	2a e0       	ldi	r18, 0x0A	; 10
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	b9 01       	movw	r22, r18
    35b2:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    35b6:	cb 01       	movw	r24, r22
    35b8:	9c 83       	std	Y+4, r25	; 0x04
    35ba:	8b 83       	std	Y+3, r24	; 0x03
        digits--;
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	81 50       	subi	r24, 0x01	; 1
    35c0:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	9c 81       	ldd	r25, Y+4	; 0x04
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	09 f7       	brne	.-62     	; 0x358c <LCD_DisplayNumber+0x9a>
    35ca:	06 c0       	rjmp	.+12     	; 0x35d8 <LCD_DisplayNumber+0xe6>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    35cc:	80 e3       	ldi	r24, 0x30	; 48
    35ce:	0e 94 1f 1a 	call	0x343e	; 0x343e <LCD_DisplayCharacter>
        digits--;
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	81 50       	subi	r24, 0x01	; 1
    35d6:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	88 23       	and	r24, r24
    35dc:	b9 f7       	brne	.-18     	; 0x35cc <LCD_DisplayNumber+0xda>
        LCD_DisplayCharacter('0');
        digits--;
    }
    
}
    35de:	26 96       	adiw	r28, 0x06	; 6
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	f8 94       	cli
    35e4:	de bf       	out	0x3e, r29	; 62
    35e6:	0f be       	out	0x3f, r0	; 63
    35e8:	cd bf       	out	0x3d, r28	; 61
    35ea:	cf 91       	pop	r28
    35ec:	df 91       	pop	r29
    35ee:	08 95       	ret

000035f0 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    35f0:	df 93       	push	r29
    35f2:	cf 93       	push	r28
    35f4:	00 d0       	rcall	.+0      	; 0x35f6 <LCD_ShiftLeft+0x6>
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    35fc:	19 82       	std	Y+1, r1	; 0x01
    35fe:	06 c0       	rjmp	.+12     	; 0x360c <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    3600:	88 e1       	ldi	r24, 0x18	; 24
    3602:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_SendCommand>
    
}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	8f 5f       	subi	r24, 0xFF	; 255
    360a:	89 83       	std	Y+1, r24	; 0x01
    360c:	99 81       	ldd	r25, Y+1	; 0x01
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	98 17       	cp	r25, r24
    3612:	b0 f3       	brcs	.-20     	; 0x3600 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	08 95       	ret

0000361e <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	00 d0       	rcall	.+0      	; 0x3624 <LCD_ShiftRight+0x6>
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    362a:	19 82       	std	Y+1, r1	; 0x01
    362c:	06 c0       	rjmp	.+12     	; 0x363a <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    362e:	8c e1       	ldi	r24, 0x1C	; 28
    3630:	0e 94 26 1b 	call	0x364c	; 0x364c <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	8f 5f       	subi	r24, 0xFF	; 255
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	99 81       	ldd	r25, Y+1	; 0x01
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	98 17       	cp	r25, r24
    3640:	b0 f3       	brcs	.-20     	; 0x362e <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	2f 97       	sbiw	r28, 0x0f	; 15
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	62 e0       	ldi	r22, 0x02	; 2
    3666:	40 e0       	ldi	r20, 0x00	; 0
    3668:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	61 e0       	ldi	r22, 0x01	; 1
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    3676:	8f 85       	ldd	r24, Y+15	; 0x0f
    3678:	98 2f       	mov	r25, r24
    367a:	91 70       	andi	r25, 0x01	; 1
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	67 e0       	ldi	r22, 0x07	; 7
    3680:	49 2f       	mov	r20, r25
    3682:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    3686:	8f 85       	ldd	r24, Y+15	; 0x0f
    3688:	86 95       	lsr	r24
    368a:	98 2f       	mov	r25, r24
    368c:	91 70       	andi	r25, 0x01	; 1
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	66 e0       	ldi	r22, 0x06	; 6
    3692:	49 2f       	mov	r20, r25
    3694:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    3698:	8f 85       	ldd	r24, Y+15	; 0x0f
    369a:	86 95       	lsr	r24
    369c:	86 95       	lsr	r24
    369e:	98 2f       	mov	r25, r24
    36a0:	91 70       	andi	r25, 0x01	; 1
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	65 e0       	ldi	r22, 0x05	; 5
    36a6:	49 2f       	mov	r20, r25
    36a8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    36ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ae:	86 95       	lsr	r24
    36b0:	86 95       	lsr	r24
    36b2:	86 95       	lsr	r24
    36b4:	98 2f       	mov	r25, r24
    36b6:	91 70       	andi	r25, 0x01	; 1
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	64 e0       	ldi	r22, 0x04	; 4
    36bc:	49 2f       	mov	r20, r25
    36be:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    36c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c4:	82 95       	swap	r24
    36c6:	8f 70       	andi	r24, 0x0F	; 15
    36c8:	98 2f       	mov	r25, r24
    36ca:	91 70       	andi	r25, 0x01	; 1
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	63 e0       	ldi	r22, 0x03	; 3
    36d0:	49 2f       	mov	r20, r25
    36d2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    36d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d8:	82 95       	swap	r24
    36da:	86 95       	lsr	r24
    36dc:	87 70       	andi	r24, 0x07	; 7
    36de:	98 2f       	mov	r25, r24
    36e0:	91 70       	andi	r25, 0x01	; 1
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	62 e0       	ldi	r22, 0x02	; 2
    36e6:	49 2f       	mov	r20, r25
    36e8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    36ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ee:	82 95       	swap	r24
    36f0:	86 95       	lsr	r24
    36f2:	86 95       	lsr	r24
    36f4:	83 70       	andi	r24, 0x03	; 3
    36f6:	98 2f       	mov	r25, r24
    36f8:	91 70       	andi	r25, 0x01	; 1
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	61 e0       	ldi	r22, 0x01	; 1
    36fe:	49 2f       	mov	r20, r25
    3700:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    3704:	8f 85       	ldd	r24, Y+15	; 0x0f
    3706:	98 2f       	mov	r25, r24
    3708:	99 1f       	adc	r25, r25
    370a:	99 27       	eor	r25, r25
    370c:	99 1f       	adc	r25, r25
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	49 2f       	mov	r20, r25
    3714:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	60 e0       	ldi	r22, 0x00	; 0
    371c:	41 e0       	ldi	r20, 0x01	; 1
    371e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	a0 e0       	ldi	r26, 0x00	; 0
    3728:	b0 e4       	ldi	r27, 0x40	; 64
    372a:	8b 87       	std	Y+11, r24	; 0x0b
    372c:	9c 87       	std	Y+12, r25	; 0x0c
    372e:	ad 87       	std	Y+13, r26	; 0x0d
    3730:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3732:	6b 85       	ldd	r22, Y+11	; 0x0b
    3734:	7c 85       	ldd	r23, Y+12	; 0x0c
    3736:	8d 85       	ldd	r24, Y+13	; 0x0d
    3738:	9e 85       	ldd	r25, Y+14	; 0x0e
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	4a ef       	ldi	r20, 0xFA	; 250
    3740:	54 e4       	ldi	r21, 0x44	; 68
    3742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	8f 83       	std	Y+7, r24	; 0x07
    374c:	98 87       	std	Y+8, r25	; 0x08
    374e:	a9 87       	std	Y+9, r26	; 0x09
    3750:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3752:	6f 81       	ldd	r22, Y+7	; 0x07
    3754:	78 85       	ldd	r23, Y+8	; 0x08
    3756:	89 85       	ldd	r24, Y+9	; 0x09
    3758:	9a 85       	ldd	r25, Y+10	; 0x0a
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e8       	ldi	r20, 0x80	; 128
    3760:	5f e3       	ldi	r21, 0x3F	; 63
    3762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3766:	88 23       	and	r24, r24
    3768:	2c f4       	brge	.+10     	; 0x3774 <LCD_SendCommand+0x128>
		__ticks = 1;
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
    3772:	3f c0       	rjmp	.+126    	; 0x37f2 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    3774:	6f 81       	ldd	r22, Y+7	; 0x07
    3776:	78 85       	ldd	r23, Y+8	; 0x08
    3778:	89 85       	ldd	r24, Y+9	; 0x09
    377a:	9a 85       	ldd	r25, Y+10	; 0x0a
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	3f ef       	ldi	r19, 0xFF	; 255
    3780:	4f e7       	ldi	r20, 0x7F	; 127
    3782:	57 e4       	ldi	r21, 0x47	; 71
    3784:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3788:	18 16       	cp	r1, r24
    378a:	4c f5       	brge	.+82     	; 0x37de <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378c:	6b 85       	ldd	r22, Y+11	; 0x0b
    378e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3790:	8d 85       	ldd	r24, Y+13	; 0x0d
    3792:	9e 85       	ldd	r25, Y+14	; 0x0e
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	40 e2       	ldi	r20, 0x20	; 32
    379a:	51 e4       	ldi	r21, 0x41	; 65
    379c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	bc 01       	movw	r22, r24
    37a6:	cd 01       	movw	r24, r26
    37a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
    37b4:	0f c0       	rjmp	.+30     	; 0x37d4 <LCD_SendCommand+0x188>
    37b6:	88 ec       	ldi	r24, 0xC8	; 200
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	9c 83       	std	Y+4, r25	; 0x04
    37bc:	8b 83       	std	Y+3, r24	; 0x03
    37be:	8b 81       	ldd	r24, Y+3	; 0x03
    37c0:	9c 81       	ldd	r25, Y+4	; 0x04
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <LCD_SendCommand+0x176>
    37c6:	9c 83       	std	Y+4, r25	; 0x04
    37c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	9e 81       	ldd	r25, Y+6	; 0x06
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	9e 83       	std	Y+6, r25	; 0x06
    37d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d4:	8d 81       	ldd	r24, Y+5	; 0x05
    37d6:	9e 81       	ldd	r25, Y+6	; 0x06
    37d8:	00 97       	sbiw	r24, 0x00	; 0
    37da:	69 f7       	brne	.-38     	; 0x37b6 <LCD_SendCommand+0x16a>
    37dc:	14 c0       	rjmp	.+40     	; 0x3806 <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37de:	6f 81       	ldd	r22, Y+7	; 0x07
    37e0:	78 85       	ldd	r23, Y+8	; 0x08
    37e2:	89 85       	ldd	r24, Y+9	; 0x09
    37e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	9e 83       	std	Y+6, r25	; 0x06
    37f0:	8d 83       	std	Y+5, r24	; 0x05
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	9e 81       	ldd	r25, Y+6	; 0x06
    37f6:	9a 83       	std	Y+2, r25	; 0x02
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	9a 81       	ldd	r25, Y+2	; 0x02
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <LCD_SendCommand+0x1b2>
    3802:	9a 83       	std	Y+2, r25	; 0x02
    3804:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	60 e0       	ldi	r22, 0x00	; 0
    380a:	40 e0       	ldi	r20, 0x00	; 0
    380c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
}
    3810:	2f 96       	adiw	r28, 0x0f	; 15
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	cf 91       	pop	r28
    381e:	df 91       	pop	r29
    3820:	08 95       	ret

00003822 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    3822:	df 93       	push	r29
    3824:	cf 93       	push	r28
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	2f 97       	sbiw	r28, 0x0f	; 15
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	f8 94       	cli
    3830:	de bf       	out	0x3e, r29	; 62
    3832:	0f be       	out	0x3f, r0	; 63
    3834:	cd bf       	out	0x3d, r28	; 61
    3836:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	62 e0       	ldi	r22, 0x02	; 2
    383c:	41 e0       	ldi	r20, 0x01	; 1
    383e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	61 e0       	ldi	r22, 0x01	; 1
    3846:	40 e0       	ldi	r20, 0x00	; 0
    3848:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    384c:	8f 85       	ldd	r24, Y+15	; 0x0f
    384e:	98 2f       	mov	r25, r24
    3850:	91 70       	andi	r25, 0x01	; 1
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	67 e0       	ldi	r22, 0x07	; 7
    3856:	49 2f       	mov	r20, r25
    3858:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    385c:	8f 85       	ldd	r24, Y+15	; 0x0f
    385e:	86 95       	lsr	r24
    3860:	98 2f       	mov	r25, r24
    3862:	91 70       	andi	r25, 0x01	; 1
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	66 e0       	ldi	r22, 0x06	; 6
    3868:	49 2f       	mov	r20, r25
    386a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    386e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3870:	86 95       	lsr	r24
    3872:	86 95       	lsr	r24
    3874:	98 2f       	mov	r25, r24
    3876:	91 70       	andi	r25, 0x01	; 1
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	65 e0       	ldi	r22, 0x05	; 5
    387c:	49 2f       	mov	r20, r25
    387e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    3882:	8f 85       	ldd	r24, Y+15	; 0x0f
    3884:	86 95       	lsr	r24
    3886:	86 95       	lsr	r24
    3888:	86 95       	lsr	r24
    388a:	98 2f       	mov	r25, r24
    388c:	91 70       	andi	r25, 0x01	; 1
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	64 e0       	ldi	r22, 0x04	; 4
    3892:	49 2f       	mov	r20, r25
    3894:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    3898:	8f 85       	ldd	r24, Y+15	; 0x0f
    389a:	82 95       	swap	r24
    389c:	8f 70       	andi	r24, 0x0F	; 15
    389e:	98 2f       	mov	r25, r24
    38a0:	91 70       	andi	r25, 0x01	; 1
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	63 e0       	ldi	r22, 0x03	; 3
    38a6:	49 2f       	mov	r20, r25
    38a8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    38ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ae:	82 95       	swap	r24
    38b0:	86 95       	lsr	r24
    38b2:	87 70       	andi	r24, 0x07	; 7
    38b4:	98 2f       	mov	r25, r24
    38b6:	91 70       	andi	r25, 0x01	; 1
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	62 e0       	ldi	r22, 0x02	; 2
    38bc:	49 2f       	mov	r20, r25
    38be:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    38c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c4:	82 95       	swap	r24
    38c6:	86 95       	lsr	r24
    38c8:	86 95       	lsr	r24
    38ca:	83 70       	andi	r24, 0x03	; 3
    38cc:	98 2f       	mov	r25, r24
    38ce:	91 70       	andi	r25, 0x01	; 1
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	61 e0       	ldi	r22, 0x01	; 1
    38d4:	49 2f       	mov	r20, r25
    38d6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    38da:	8f 85       	ldd	r24, Y+15	; 0x0f
    38dc:	98 2f       	mov	r25, r24
    38de:	99 1f       	adc	r25, r25
    38e0:	99 27       	eor	r25, r25
    38e2:	99 1f       	adc	r25, r25
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	49 2f       	mov	r20, r25
    38ea:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	60 e0       	ldi	r22, 0x00	; 0
    38f2:	41 e0       	ldi	r20, 0x01	; 1
    38f4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	a0 e0       	ldi	r26, 0x00	; 0
    38fe:	b0 e4       	ldi	r27, 0x40	; 64
    3900:	8b 87       	std	Y+11, r24	; 0x0b
    3902:	9c 87       	std	Y+12, r25	; 0x0c
    3904:	ad 87       	std	Y+13, r26	; 0x0d
    3906:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3908:	6b 85       	ldd	r22, Y+11	; 0x0b
    390a:	7c 85       	ldd	r23, Y+12	; 0x0c
    390c:	8d 85       	ldd	r24, Y+13	; 0x0d
    390e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	4a ef       	ldi	r20, 0xFA	; 250
    3916:	54 e4       	ldi	r21, 0x44	; 68
    3918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	8f 83       	std	Y+7, r24	; 0x07
    3922:	98 87       	std	Y+8, r25	; 0x08
    3924:	a9 87       	std	Y+9, r26	; 0x09
    3926:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3928:	6f 81       	ldd	r22, Y+7	; 0x07
    392a:	78 85       	ldd	r23, Y+8	; 0x08
    392c:	89 85       	ldd	r24, Y+9	; 0x09
    392e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e8       	ldi	r20, 0x80	; 128
    3936:	5f e3       	ldi	r21, 0x3F	; 63
    3938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    393c:	88 23       	and	r24, r24
    393e:	2c f4       	brge	.+10     	; 0x394a <LCD_SendData+0x128>
		__ticks = 1;
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9e 83       	std	Y+6, r25	; 0x06
    3946:	8d 83       	std	Y+5, r24	; 0x05
    3948:	3f c0       	rjmp	.+126    	; 0x39c8 <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    394a:	6f 81       	ldd	r22, Y+7	; 0x07
    394c:	78 85       	ldd	r23, Y+8	; 0x08
    394e:	89 85       	ldd	r24, Y+9	; 0x09
    3950:	9a 85       	ldd	r25, Y+10	; 0x0a
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	4f e7       	ldi	r20, 0x7F	; 127
    3958:	57 e4       	ldi	r21, 0x47	; 71
    395a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    395e:	18 16       	cp	r1, r24
    3960:	4c f5       	brge	.+82     	; 0x39b4 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3962:	6b 85       	ldd	r22, Y+11	; 0x0b
    3964:	7c 85       	ldd	r23, Y+12	; 0x0c
    3966:	8d 85       	ldd	r24, Y+13	; 0x0d
    3968:	9e 85       	ldd	r25, Y+14	; 0x0e
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e2       	ldi	r20, 0x20	; 32
    3970:	51 e4       	ldi	r21, 0x41	; 65
    3972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	9e 83       	std	Y+6, r25	; 0x06
    3988:	8d 83       	std	Y+5, r24	; 0x05
    398a:	0f c0       	rjmp	.+30     	; 0x39aa <LCD_SendData+0x188>
    398c:	88 ec       	ldi	r24, 0xC8	; 200
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	9c 83       	std	Y+4, r25	; 0x04
    3992:	8b 83       	std	Y+3, r24	; 0x03
    3994:	8b 81       	ldd	r24, Y+3	; 0x03
    3996:	9c 81       	ldd	r25, Y+4	; 0x04
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <LCD_SendData+0x176>
    399c:	9c 83       	std	Y+4, r25	; 0x04
    399e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a0:	8d 81       	ldd	r24, Y+5	; 0x05
    39a2:	9e 81       	ldd	r25, Y+6	; 0x06
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	9e 83       	std	Y+6, r25	; 0x06
    39a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39aa:	8d 81       	ldd	r24, Y+5	; 0x05
    39ac:	9e 81       	ldd	r25, Y+6	; 0x06
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	69 f7       	brne	.-38     	; 0x398c <LCD_SendData+0x16a>
    39b2:	14 c0       	rjmp	.+40     	; 0x39dc <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b4:	6f 81       	ldd	r22, Y+7	; 0x07
    39b6:	78 85       	ldd	r23, Y+8	; 0x08
    39b8:	89 85       	ldd	r24, Y+9	; 0x09
    39ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    39bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	9e 83       	std	Y+6, r25	; 0x06
    39c6:	8d 83       	std	Y+5, r24	; 0x05
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	9e 81       	ldd	r25, Y+6	; 0x06
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <LCD_SendData+0x1b2>
    39d8:	9a 83       	std	Y+2, r25	; 0x02
    39da:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	60 e0       	ldi	r22, 0x00	; 0
    39e0:	40 e0       	ldi	r20, 0x00	; 0
    39e2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
}
    39e6:	2f 96       	adiw	r28, 0x0f	; 15
    39e8:	0f b6       	in	r0, 0x3f	; 63
    39ea:	f8 94       	cli
    39ec:	de bf       	out	0x3e, r29	; 62
    39ee:	0f be       	out	0x3f, r0	; 63
    39f0:	cd bf       	out	0x3d, r28	; 61
    39f2:	cf 91       	pop	r28
    39f4:	df 91       	pop	r29
    39f6:	08 95       	ret

000039f8 <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    39f8:	df 93       	push	r29
    39fa:	cf 93       	push	r28
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	62 e0       	ldi	r22, 0x02	; 2
    3a04:	42 e0       	ldi	r20, 0x02	; 2
    3a06:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	61 e0       	ldi	r22, 0x01	; 1
    3a0e:	42 e0       	ldi	r20, 0x02	; 2
    3a10:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	60 e0       	ldi	r22, 0x00	; 0
    3a18:	42 e0       	ldi	r20, 0x02	; 2
    3a1a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	67 e0       	ldi	r22, 0x07	; 7
    3a22:	42 e0       	ldi	r20, 0x02	; 2
    3a24:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	66 e0       	ldi	r22, 0x06	; 6
    3a2c:	42 e0       	ldi	r20, 0x02	; 2
    3a2e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	65 e0       	ldi	r22, 0x05	; 5
    3a36:	42 e0       	ldi	r20, 0x02	; 2
    3a38:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	64 e0       	ldi	r22, 0x04	; 4
    3a40:	42 e0       	ldi	r20, 0x02	; 2
    3a42:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	63 e0       	ldi	r22, 0x03	; 3
    3a4a:	42 e0       	ldi	r20, 0x02	; 2
    3a4c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	62 e0       	ldi	r22, 0x02	; 2
    3a54:	42 e0       	ldi	r20, 0x02	; 2
    3a56:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	61 e0       	ldi	r22, 0x01	; 1
    3a5e:	42 e0       	ldi	r20, 0x02	; 2
    3a60:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	42 e0       	ldi	r20, 0x02	; 2
    3a6a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
}
    3a6e:	cf 91       	pop	r28
    3a70:	df 91       	pop	r29
    3a72:	08 95       	ret

00003a74 <Spt_Init>:
// {
//     Spt_Timer2_Callback_Ctc();
// }

Spt_ReturnType Spt_Init(Spt_ConfigType *config)
{
    3a74:	df 93       	push	r29
    3a76:	cf 93       	push	r28
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	61 97       	sbiw	r28, 0x11	; 17
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	9b 83       	std	Y+3, r25	; 0x03
    3a8a:	8a 83       	std	Y+2, r24	; 0x02
    Spt_ReturnType returnValue = SPT_OK;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    3a90:	ea 81       	ldd	r30, Y+2	; 0x02
    3a92:	fb 81       	ldd	r31, Y+3	; 0x03
    3a94:	80 81       	ld	r24, Z
    3a96:	28 2f       	mov	r18, r24
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	39 8b       	std	Y+17, r19	; 0x11
    3a9c:	28 8b       	std	Y+16, r18	; 0x10
    3a9e:	88 89       	ldd	r24, Y+16	; 0x10
    3aa0:	99 89       	ldd	r25, Y+17	; 0x11
    3aa2:	81 30       	cpi	r24, 0x01	; 1
    3aa4:	91 05       	cpc	r25, r1
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <Spt_Init+0x36>
    3aa8:	6b c1       	rjmp	.+726    	; 0x3d80 <Spt_Init+0x30c>
    3aaa:	28 89       	ldd	r18, Y+16	; 0x10
    3aac:	39 89       	ldd	r19, Y+17	; 0x11
    3aae:	22 30       	cpi	r18, 0x02	; 2
    3ab0:	31 05       	cpc	r19, r1
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <Spt_Init+0x42>
    3ab4:	da c2       	rjmp	.+1460   	; 0x406a <Spt_Init+0x5f6>
    3ab6:	88 89       	ldd	r24, Y+16	; 0x10
    3ab8:	99 89       	ldd	r25, Y+17	; 0x11
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	09 f0       	breq	.+2      	; 0x3ac0 <Spt_Init+0x4c>
    3abe:	4a c4       	rjmp	.+2196   	; 0x4354 <Spt_Init+0x8e0>
    {

    case SPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    3ac0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ac2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ac4:	81 81       	ldd	r24, Z+1	; 0x01
    3ac6:	88 23       	and	r24, r24
    3ac8:	79 f4       	brne	.+30     	; 0x3ae8 <Spt_Init+0x74>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    3aca:	a3 e5       	ldi	r26, 0x53	; 83
    3acc:	b0 e0       	ldi	r27, 0x00	; 0
    3ace:	e3 e5       	ldi	r30, 0x53	; 83
    3ad0:	f0 e0       	ldi	r31, 0x00	; 0
    3ad2:	80 81       	ld	r24, Z
    3ad4:	80 64       	ori	r24, 0x40	; 64
    3ad6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    3ad8:	a3 e5       	ldi	r26, 0x53	; 83
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	e3 e5       	ldi	r30, 0x53	; 83
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	88 60       	ori	r24, 0x08	; 8
    3ae4:	8c 93       	st	X, r24
    3ae6:	15 c0       	rjmp	.+42     	; 0x3b12 <Spt_Init+0x9e>
        }
        else if (config->mode == SPT_MODE_PWM_PHASE_CORRECT)
    3ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    3aea:	fb 81       	ldd	r31, Y+3	; 0x03
    3aec:	81 81       	ldd	r24, Z+1	; 0x01
    3aee:	81 30       	cpi	r24, 0x01	; 1
    3af0:	79 f4       	brne	.+30     	; 0x3b10 <Spt_Init+0x9c>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    3af2:	a3 e5       	ldi	r26, 0x53	; 83
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	e3 e5       	ldi	r30, 0x53	; 83
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	80 81       	ld	r24, Z
    3afc:	80 64       	ori	r24, 0x40	; 64
    3afe:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    3b00:	a3 e5       	ldi	r26, 0x53	; 83
    3b02:	b0 e0       	ldi	r27, 0x00	; 0
    3b04:	e3 e5       	ldi	r30, 0x53	; 83
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	80 81       	ld	r24, Z
    3b0a:	87 7f       	andi	r24, 0xF7	; 247
    3b0c:	8c 93       	st	X, r24
    3b0e:	01 c0       	rjmp	.+2      	; 0x3b12 <Spt_Init+0x9e>
        }
        else
        {
            returnValue = SPT_ERROR;
    3b10:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    3b12:	ea 81       	ldd	r30, Y+2	; 0x02
    3b14:	fb 81       	ldd	r31, Y+3	; 0x03
    3b16:	82 81       	ldd	r24, Z+2	; 0x02
    3b18:	28 2f       	mov	r18, r24
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	3f 87       	std	Y+15, r19	; 0x0f
    3b1e:	2e 87       	std	Y+14, r18	; 0x0e
    3b20:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b22:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b24:	82 30       	cpi	r24, 0x02	; 2
    3b26:	91 05       	cpc	r25, r1
    3b28:	c1 f0       	breq	.+48     	; 0x3b5a <Spt_Init+0xe6>
    3b2a:	2e 85       	ldd	r18, Y+14	; 0x0e
    3b2c:	3f 85       	ldd	r19, Y+15	; 0x0f
    3b2e:	23 30       	cpi	r18, 0x03	; 3
    3b30:	31 05       	cpc	r19, r1
    3b32:	11 f1       	breq	.+68     	; 0x3b78 <Spt_Init+0x104>
    3b34:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b36:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b38:	00 97       	sbiw	r24, 0x00	; 0
    3b3a:	69 f5       	brne	.+90     	; 0x3b96 <Spt_Init+0x122>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    3b3c:	a3 e5       	ldi	r26, 0x53	; 83
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	e3 e5       	ldi	r30, 0x53	; 83
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	8f 7e       	andi	r24, 0xEF	; 239
    3b48:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    3b4a:	a3 e5       	ldi	r26, 0x53	; 83
    3b4c:	b0 e0       	ldi	r27, 0x00	; 0
    3b4e:	e3 e5       	ldi	r30, 0x53	; 83
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 81       	ld	r24, Z
    3b54:	8f 7d       	andi	r24, 0xDF	; 223
    3b56:	8c 93       	st	X, r24
    3b58:	1f c0       	rjmp	.+62     	; 0x3b98 <Spt_Init+0x124>
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    3b5a:	a3 e5       	ldi	r26, 0x53	; 83
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e3 e5       	ldi	r30, 0x53	; 83
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	80 81       	ld	r24, Z
    3b64:	80 61       	ori	r24, 0x10	; 16
    3b66:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    3b68:	a3 e5       	ldi	r26, 0x53	; 83
    3b6a:	b0 e0       	ldi	r27, 0x00	; 0
    3b6c:	e3 e5       	ldi	r30, 0x53	; 83
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	80 81       	ld	r24, Z
    3b72:	80 62       	ori	r24, 0x20	; 32
    3b74:	8c 93       	st	X, r24
    3b76:	10 c0       	rjmp	.+32     	; 0x3b98 <Spt_Init+0x124>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    3b78:	a3 e5       	ldi	r26, 0x53	; 83
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	e3 e5       	ldi	r30, 0x53	; 83
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	80 81       	ld	r24, Z
    3b82:	8f 7e       	andi	r24, 0xEF	; 239
    3b84:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    3b86:	a3 e5       	ldi	r26, 0x53	; 83
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	e3 e5       	ldi	r30, 0x53	; 83
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 81       	ld	r24, Z
    3b90:	80 62       	ori	r24, 0x20	; 32
    3b92:	8c 93       	st	X, r24
    3b94:	01 c0       	rjmp	.+2      	; 0x3b98 <Spt_Init+0x124>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    3b96:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    3b98:	ea 81       	ldd	r30, Y+2	; 0x02
    3b9a:	fb 81       	ldd	r31, Y+3	; 0x03
    3b9c:	83 81       	ldd	r24, Z+3	; 0x03
    3b9e:	28 2f       	mov	r18, r24
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	3d 87       	std	Y+13, r19	; 0x0d
    3ba4:	2c 87       	std	Y+12, r18	; 0x0c
    3ba6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3baa:	84 30       	cpi	r24, 0x04	; 4
    3bac:	91 05       	cpc	r25, r1
    3bae:	09 f4       	brne	.+2      	; 0x3bb2 <Spt_Init+0x13e>
    3bb0:	77 c0       	rjmp	.+238    	; 0x3ca0 <Spt_Init+0x22c>
    3bb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    3bb4:	3d 85       	ldd	r19, Y+13	; 0x0d
    3bb6:	25 30       	cpi	r18, 0x05	; 5
    3bb8:	31 05       	cpc	r19, r1
    3bba:	8c f4       	brge	.+34     	; 0x3bde <Spt_Init+0x16a>
    3bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bc0:	81 30       	cpi	r24, 0x01	; 1
    3bc2:	91 05       	cpc	r25, r1
    3bc4:	09 f4       	brne	.+2      	; 0x3bc8 <Spt_Init+0x154>
    3bc6:	40 c0       	rjmp	.+128    	; 0x3c48 <Spt_Init+0x1d4>
    3bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    3bca:	3d 85       	ldd	r19, Y+13	; 0x0d
    3bcc:	22 30       	cpi	r18, 0x02	; 2
    3bce:	31 05       	cpc	r19, r1
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <Spt_Init+0x160>
    3bd2:	50 c0       	rjmp	.+160    	; 0x3c74 <Spt_Init+0x200>
    3bd4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bd6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	01 f1       	breq	.+64     	; 0x3c1c <Spt_Init+0x1a8>
    3bdc:	cf c0       	rjmp	.+414    	; 0x3d7c <Spt_Init+0x308>
    3bde:	2c 85       	ldd	r18, Y+12	; 0x0c
    3be0:	3d 85       	ldd	r19, Y+13	; 0x0d
    3be2:	27 30       	cpi	r18, 0x07	; 7
    3be4:	31 05       	cpc	r19, r1
    3be6:	09 f4       	brne	.+2      	; 0x3bea <Spt_Init+0x176>
    3be8:	87 c0       	rjmp	.+270    	; 0x3cf8 <Spt_Init+0x284>
    3bea:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bec:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bee:	88 30       	cpi	r24, 0x08	; 8
    3bf0:	91 05       	cpc	r25, r1
    3bf2:	3c f4       	brge	.+14     	; 0x3c02 <Spt_Init+0x18e>
    3bf4:	2c 85       	ldd	r18, Y+12	; 0x0c
    3bf6:	3d 85       	ldd	r19, Y+13	; 0x0d
    3bf8:	26 30       	cpi	r18, 0x06	; 6
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <Spt_Init+0x18c>
    3bfe:	66 c0       	rjmp	.+204    	; 0x3ccc <Spt_Init+0x258>
    3c00:	bd c0       	rjmp	.+378    	; 0x3d7c <Spt_Init+0x308>
    3c02:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c04:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c06:	88 30       	cpi	r24, 0x08	; 8
    3c08:	91 05       	cpc	r25, r1
    3c0a:	09 f4       	brne	.+2      	; 0x3c0e <Spt_Init+0x19a>
    3c0c:	8b c0       	rjmp	.+278    	; 0x3d24 <Spt_Init+0x2b0>
    3c0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c10:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c12:	29 30       	cpi	r18, 0x09	; 9
    3c14:	31 05       	cpc	r19, r1
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <Spt_Init+0x1a6>
    3c18:	9b c0       	rjmp	.+310    	; 0x3d50 <Spt_Init+0x2dc>
    3c1a:	b0 c0       	rjmp	.+352    	; 0x3d7c <Spt_Init+0x308>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    3c1c:	a3 e5       	ldi	r26, 0x53	; 83
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	e3 e5       	ldi	r30, 0x53	; 83
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	8e 7f       	andi	r24, 0xFE	; 254
    3c28:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    3c2a:	a3 e5       	ldi	r26, 0x53	; 83
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	e3 e5       	ldi	r30, 0x53	; 83
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	80 81       	ld	r24, Z
    3c34:	8d 7f       	andi	r24, 0xFD	; 253
    3c36:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    3c38:	a3 e5       	ldi	r26, 0x53	; 83
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	e3 e5       	ldi	r30, 0x53	; 83
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	80 81       	ld	r24, Z
    3c42:	8b 7f       	andi	r24, 0xFB	; 251
    3c44:	8c 93       	st	X, r24
    3c46:	87 c3       	rjmp	.+1806   	; 0x4356 <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    3c48:	a3 e5       	ldi	r26, 0x53	; 83
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	e3 e5       	ldi	r30, 0x53	; 83
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	80 81       	ld	r24, Z
    3c52:	81 60       	ori	r24, 0x01	; 1
    3c54:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    3c56:	a3 e5       	ldi	r26, 0x53	; 83
    3c58:	b0 e0       	ldi	r27, 0x00	; 0
    3c5a:	e3 e5       	ldi	r30, 0x53	; 83
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	80 81       	ld	r24, Z
    3c60:	8d 7f       	andi	r24, 0xFD	; 253
    3c62:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    3c64:	a3 e5       	ldi	r26, 0x53	; 83
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	e3 e5       	ldi	r30, 0x53	; 83
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	80 81       	ld	r24, Z
    3c6e:	8b 7f       	andi	r24, 0xFB	; 251
    3c70:	8c 93       	st	X, r24
    3c72:	71 c3       	rjmp	.+1762   	; 0x4356 <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    3c74:	a3 e5       	ldi	r26, 0x53	; 83
    3c76:	b0 e0       	ldi	r27, 0x00	; 0
    3c78:	e3 e5       	ldi	r30, 0x53	; 83
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
    3c7e:	8e 7f       	andi	r24, 0xFE	; 254
    3c80:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    3c82:	a3 e5       	ldi	r26, 0x53	; 83
    3c84:	b0 e0       	ldi	r27, 0x00	; 0
    3c86:	e3 e5       	ldi	r30, 0x53	; 83
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	80 81       	ld	r24, Z
    3c8c:	82 60       	ori	r24, 0x02	; 2
    3c8e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    3c90:	a3 e5       	ldi	r26, 0x53	; 83
    3c92:	b0 e0       	ldi	r27, 0x00	; 0
    3c94:	e3 e5       	ldi	r30, 0x53	; 83
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	80 81       	ld	r24, Z
    3c9a:	8b 7f       	andi	r24, 0xFB	; 251
    3c9c:	8c 93       	st	X, r24
    3c9e:	5b c3       	rjmp	.+1718   	; 0x4356 <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    3ca0:	a3 e5       	ldi	r26, 0x53	; 83
    3ca2:	b0 e0       	ldi	r27, 0x00	; 0
    3ca4:	e3 e5       	ldi	r30, 0x53	; 83
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	80 81       	ld	r24, Z
    3caa:	81 60       	ori	r24, 0x01	; 1
    3cac:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    3cae:	a3 e5       	ldi	r26, 0x53	; 83
    3cb0:	b0 e0       	ldi	r27, 0x00	; 0
    3cb2:	e3 e5       	ldi	r30, 0x53	; 83
    3cb4:	f0 e0       	ldi	r31, 0x00	; 0
    3cb6:	80 81       	ld	r24, Z
    3cb8:	82 60       	ori	r24, 0x02	; 2
    3cba:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    3cbc:	a3 e5       	ldi	r26, 0x53	; 83
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	e3 e5       	ldi	r30, 0x53	; 83
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	8b 7f       	andi	r24, 0xFB	; 251
    3cc8:	8c 93       	st	X, r24
    3cca:	45 c3       	rjmp	.+1674   	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    3ccc:	a3 e5       	ldi	r26, 0x53	; 83
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	e3 e5       	ldi	r30, 0x53	; 83
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	80 81       	ld	r24, Z
    3cd6:	8e 7f       	andi	r24, 0xFE	; 254
    3cd8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    3cda:	a3 e5       	ldi	r26, 0x53	; 83
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	e3 e5       	ldi	r30, 0x53	; 83
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	8d 7f       	andi	r24, 0xFD	; 253
    3ce6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    3ce8:	a3 e5       	ldi	r26, 0x53	; 83
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	e3 e5       	ldi	r30, 0x53	; 83
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	84 60       	ori	r24, 0x04	; 4
    3cf4:	8c 93       	st	X, r24
    3cf6:	2f c3       	rjmp	.+1630   	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    3cf8:	a3 e5       	ldi	r26, 0x53	; 83
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	e3 e5       	ldi	r30, 0x53	; 83
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	80 81       	ld	r24, Z
    3d02:	81 60       	ori	r24, 0x01	; 1
    3d04:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    3d06:	a3 e5       	ldi	r26, 0x53	; 83
    3d08:	b0 e0       	ldi	r27, 0x00	; 0
    3d0a:	e3 e5       	ldi	r30, 0x53	; 83
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
    3d10:	8d 7f       	andi	r24, 0xFD	; 253
    3d12:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    3d14:	a3 e5       	ldi	r26, 0x53	; 83
    3d16:	b0 e0       	ldi	r27, 0x00	; 0
    3d18:	e3 e5       	ldi	r30, 0x53	; 83
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 81       	ld	r24, Z
    3d1e:	84 60       	ori	r24, 0x04	; 4
    3d20:	8c 93       	st	X, r24
    3d22:	19 c3       	rjmp	.+1586   	; 0x4356 <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    3d24:	a3 e5       	ldi	r26, 0x53	; 83
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	e3 e5       	ldi	r30, 0x53	; 83
    3d2a:	f0 e0       	ldi	r31, 0x00	; 0
    3d2c:	80 81       	ld	r24, Z
    3d2e:	8e 7f       	andi	r24, 0xFE	; 254
    3d30:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    3d32:	a3 e5       	ldi	r26, 0x53	; 83
    3d34:	b0 e0       	ldi	r27, 0x00	; 0
    3d36:	e3 e5       	ldi	r30, 0x53	; 83
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	80 81       	ld	r24, Z
    3d3c:	82 60       	ori	r24, 0x02	; 2
    3d3e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    3d40:	a3 e5       	ldi	r26, 0x53	; 83
    3d42:	b0 e0       	ldi	r27, 0x00	; 0
    3d44:	e3 e5       	ldi	r30, 0x53	; 83
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	80 81       	ld	r24, Z
    3d4a:	84 60       	ori	r24, 0x04	; 4
    3d4c:	8c 93       	st	X, r24
    3d4e:	03 c3       	rjmp	.+1542   	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    3d50:	a3 e5       	ldi	r26, 0x53	; 83
    3d52:	b0 e0       	ldi	r27, 0x00	; 0
    3d54:	e3 e5       	ldi	r30, 0x53	; 83
    3d56:	f0 e0       	ldi	r31, 0x00	; 0
    3d58:	80 81       	ld	r24, Z
    3d5a:	81 60       	ori	r24, 0x01	; 1
    3d5c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    3d5e:	a3 e5       	ldi	r26, 0x53	; 83
    3d60:	b0 e0       	ldi	r27, 0x00	; 0
    3d62:	e3 e5       	ldi	r30, 0x53	; 83
    3d64:	f0 e0       	ldi	r31, 0x00	; 0
    3d66:	80 81       	ld	r24, Z
    3d68:	82 60       	ori	r24, 0x02	; 2
    3d6a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    3d6c:	a3 e5       	ldi	r26, 0x53	; 83
    3d6e:	b0 e0       	ldi	r27, 0x00	; 0
    3d70:	e3 e5       	ldi	r30, 0x53	; 83
    3d72:	f0 e0       	ldi	r31, 0x00	; 0
    3d74:	80 81       	ld	r24, Z
    3d76:	84 60       	ori	r24, 0x04	; 4
    3d78:	8c 93       	st	X, r24
    3d7a:	ed c2       	rjmp	.+1498   	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    3d7c:	19 82       	std	Y+1, r1	; 0x01
    3d7e:	eb c2       	rjmp	.+1494   	; 0x4356 <Spt_Init+0x8e2>
        }
        break;

    case SPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    3d80:	ea 81       	ldd	r30, Y+2	; 0x02
    3d82:	fb 81       	ldd	r31, Y+3	; 0x03
    3d84:	81 81       	ldd	r24, Z+1	; 0x01
    3d86:	88 23       	and	r24, r24
    3d88:	e9 f4       	brne	.+58     	; 0x3dc4 <Spt_Init+0x350>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3d8a:	af e4       	ldi	r26, 0x4F	; 79
    3d8c:	b0 e0       	ldi	r27, 0x00	; 0
    3d8e:	ef e4       	ldi	r30, 0x4F	; 79
    3d90:	f0 e0       	ldi	r31, 0x00	; 0
    3d92:	80 81       	ld	r24, Z
    3d94:	8e 7f       	andi	r24, 0xFE	; 254
    3d96:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    3d98:	af e4       	ldi	r26, 0x4F	; 79
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	ef e4       	ldi	r30, 0x4F	; 79
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	82 60       	ori	r24, 0x02	; 2
    3da4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    3da6:	ae e4       	ldi	r26, 0x4E	; 78
    3da8:	b0 e0       	ldi	r27, 0x00	; 0
    3daa:	ee e4       	ldi	r30, 0x4E	; 78
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	80 81       	ld	r24, Z
    3db0:	88 60       	ori	r24, 0x08	; 8
    3db2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    3db4:	ae e4       	ldi	r26, 0x4E	; 78
    3db6:	b0 e0       	ldi	r27, 0x00	; 0
    3db8:	ee e4       	ldi	r30, 0x4E	; 78
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	80 81       	ld	r24, Z
    3dbe:	80 61       	ori	r24, 0x10	; 16
    3dc0:	8c 93       	st	X, r24
    3dc2:	01 c0       	rjmp	.+2      	; 0x3dc6 <Spt_Init+0x352>
        //     // TODO
        //     // TODO
        // }
        else
        {
            returnValue = SPT_ERROR;
    3dc4:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    3dc6:	ea 81       	ldd	r30, Y+2	; 0x02
    3dc8:	fb 81       	ldd	r31, Y+3	; 0x03
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	28 2f       	mov	r18, r24
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	3b 87       	std	Y+11, r19	; 0x0b
    3dd2:	2a 87       	std	Y+10, r18	; 0x0a
    3dd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dd8:	81 30       	cpi	r24, 0x01	; 1
    3dda:	91 05       	cpc	r25, r1
    3ddc:	21 f1       	breq	.+72     	; 0x3e26 <Spt_Init+0x3b2>
    3dde:	2a 85       	ldd	r18, Y+10	; 0x0a
    3de0:	3b 85       	ldd	r19, Y+11	; 0x0b
    3de2:	22 30       	cpi	r18, 0x02	; 2
    3de4:	31 05       	cpc	r19, r1
    3de6:	2c f4       	brge	.+10     	; 0x3df2 <Spt_Init+0x37e>
    3de8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dea:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	61 f0       	breq	.+24     	; 0x3e08 <Spt_Init+0x394>
    3df0:	47 c0       	rjmp	.+142    	; 0x3e80 <Spt_Init+0x40c>
    3df2:	2a 85       	ldd	r18, Y+10	; 0x0a
    3df4:	3b 85       	ldd	r19, Y+11	; 0x0b
    3df6:	22 30       	cpi	r18, 0x02	; 2
    3df8:	31 05       	cpc	r19, r1
    3dfa:	21 f1       	breq	.+72     	; 0x3e44 <Spt_Init+0x3d0>
    3dfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e00:	83 30       	cpi	r24, 0x03	; 3
    3e02:	91 05       	cpc	r25, r1
    3e04:	71 f1       	breq	.+92     	; 0x3e62 <Spt_Init+0x3ee>
    3e06:	3c c0       	rjmp	.+120    	; 0x3e80 <Spt_Init+0x40c>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3e08:	af e4       	ldi	r26, 0x4F	; 79
    3e0a:	b0 e0       	ldi	r27, 0x00	; 0
    3e0c:	ef e4       	ldi	r30, 0x4F	; 79
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	80 81       	ld	r24, Z
    3e12:	8f 7b       	andi	r24, 0xBF	; 191
    3e14:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3e16:	af e4       	ldi	r26, 0x4F	; 79
    3e18:	b0 e0       	ldi	r27, 0x00	; 0
    3e1a:	ef e4       	ldi	r30, 0x4F	; 79
    3e1c:	f0 e0       	ldi	r31, 0x00	; 0
    3e1e:	80 81       	ld	r24, Z
    3e20:	8f 77       	andi	r24, 0x7F	; 127
    3e22:	8c 93       	st	X, r24
    3e24:	2e c0       	rjmp	.+92     	; 0x3e82 <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3e26:	af e4       	ldi	r26, 0x4F	; 79
    3e28:	b0 e0       	ldi	r27, 0x00	; 0
    3e2a:	ef e4       	ldi	r30, 0x4F	; 79
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	80 81       	ld	r24, Z
    3e30:	80 64       	ori	r24, 0x40	; 64
    3e32:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3e34:	af e4       	ldi	r26, 0x4F	; 79
    3e36:	b0 e0       	ldi	r27, 0x00	; 0
    3e38:	ef e4       	ldi	r30, 0x4F	; 79
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	80 81       	ld	r24, Z
    3e3e:	8f 77       	andi	r24, 0x7F	; 127
    3e40:	8c 93       	st	X, r24
    3e42:	1f c0       	rjmp	.+62     	; 0x3e82 <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3e44:	af e4       	ldi	r26, 0x4F	; 79
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	ef e4       	ldi	r30, 0x4F	; 79
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	80 81       	ld	r24, Z
    3e4e:	80 64       	ori	r24, 0x40	; 64
    3e50:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3e52:	af e4       	ldi	r26, 0x4F	; 79
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	ef e4       	ldi	r30, 0x4F	; 79
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	80 81       	ld	r24, Z
    3e5c:	80 68       	ori	r24, 0x80	; 128
    3e5e:	8c 93       	st	X, r24
    3e60:	10 c0       	rjmp	.+32     	; 0x3e82 <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3e62:	af e4       	ldi	r26, 0x4F	; 79
    3e64:	b0 e0       	ldi	r27, 0x00	; 0
    3e66:	ef e4       	ldi	r30, 0x4F	; 79
    3e68:	f0 e0       	ldi	r31, 0x00	; 0
    3e6a:	80 81       	ld	r24, Z
    3e6c:	8f 7b       	andi	r24, 0xBF	; 191
    3e6e:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3e70:	af e4       	ldi	r26, 0x4F	; 79
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	ef e4       	ldi	r30, 0x4F	; 79
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	80 68       	ori	r24, 0x80	; 128
    3e7c:	8c 93       	st	X, r24
    3e7e:	01 c0       	rjmp	.+2      	; 0x3e82 <Spt_Init+0x40e>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    3e80:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    3e82:	ea 81       	ldd	r30, Y+2	; 0x02
    3e84:	fb 81       	ldd	r31, Y+3	; 0x03
    3e86:	83 81       	ldd	r24, Z+3	; 0x03
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	39 87       	std	Y+9, r19	; 0x09
    3e8e:	28 87       	std	Y+8, r18	; 0x08
    3e90:	88 85       	ldd	r24, Y+8	; 0x08
    3e92:	99 85       	ldd	r25, Y+9	; 0x09
    3e94:	84 30       	cpi	r24, 0x04	; 4
    3e96:	91 05       	cpc	r25, r1
    3e98:	09 f4       	brne	.+2      	; 0x3e9c <Spt_Init+0x428>
    3e9a:	77 c0       	rjmp	.+238    	; 0x3f8a <Spt_Init+0x516>
    3e9c:	28 85       	ldd	r18, Y+8	; 0x08
    3e9e:	39 85       	ldd	r19, Y+9	; 0x09
    3ea0:	25 30       	cpi	r18, 0x05	; 5
    3ea2:	31 05       	cpc	r19, r1
    3ea4:	8c f4       	brge	.+34     	; 0x3ec8 <Spt_Init+0x454>
    3ea6:	88 85       	ldd	r24, Y+8	; 0x08
    3ea8:	99 85       	ldd	r25, Y+9	; 0x09
    3eaa:	81 30       	cpi	r24, 0x01	; 1
    3eac:	91 05       	cpc	r25, r1
    3eae:	09 f4       	brne	.+2      	; 0x3eb2 <Spt_Init+0x43e>
    3eb0:	40 c0       	rjmp	.+128    	; 0x3f32 <Spt_Init+0x4be>
    3eb2:	28 85       	ldd	r18, Y+8	; 0x08
    3eb4:	39 85       	ldd	r19, Y+9	; 0x09
    3eb6:	22 30       	cpi	r18, 0x02	; 2
    3eb8:	31 05       	cpc	r19, r1
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <Spt_Init+0x44a>
    3ebc:	50 c0       	rjmp	.+160    	; 0x3f5e <Spt_Init+0x4ea>
    3ebe:	88 85       	ldd	r24, Y+8	; 0x08
    3ec0:	99 85       	ldd	r25, Y+9	; 0x09
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	01 f1       	breq	.+64     	; 0x3f06 <Spt_Init+0x492>
    3ec6:	cf c0       	rjmp	.+414    	; 0x4066 <Spt_Init+0x5f2>
    3ec8:	28 85       	ldd	r18, Y+8	; 0x08
    3eca:	39 85       	ldd	r19, Y+9	; 0x09
    3ecc:	27 30       	cpi	r18, 0x07	; 7
    3ece:	31 05       	cpc	r19, r1
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <Spt_Init+0x460>
    3ed2:	87 c0       	rjmp	.+270    	; 0x3fe2 <Spt_Init+0x56e>
    3ed4:	88 85       	ldd	r24, Y+8	; 0x08
    3ed6:	99 85       	ldd	r25, Y+9	; 0x09
    3ed8:	88 30       	cpi	r24, 0x08	; 8
    3eda:	91 05       	cpc	r25, r1
    3edc:	3c f4       	brge	.+14     	; 0x3eec <Spt_Init+0x478>
    3ede:	28 85       	ldd	r18, Y+8	; 0x08
    3ee0:	39 85       	ldd	r19, Y+9	; 0x09
    3ee2:	26 30       	cpi	r18, 0x06	; 6
    3ee4:	31 05       	cpc	r19, r1
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <Spt_Init+0x476>
    3ee8:	66 c0       	rjmp	.+204    	; 0x3fb6 <Spt_Init+0x542>
    3eea:	bd c0       	rjmp	.+378    	; 0x4066 <Spt_Init+0x5f2>
    3eec:	88 85       	ldd	r24, Y+8	; 0x08
    3eee:	99 85       	ldd	r25, Y+9	; 0x09
    3ef0:	88 30       	cpi	r24, 0x08	; 8
    3ef2:	91 05       	cpc	r25, r1
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <Spt_Init+0x484>
    3ef6:	8b c0       	rjmp	.+278    	; 0x400e <Spt_Init+0x59a>
    3ef8:	28 85       	ldd	r18, Y+8	; 0x08
    3efa:	39 85       	ldd	r19, Y+9	; 0x09
    3efc:	29 30       	cpi	r18, 0x09	; 9
    3efe:	31 05       	cpc	r19, r1
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <Spt_Init+0x490>
    3f02:	9b c0       	rjmp	.+310    	; 0x403a <Spt_Init+0x5c6>
    3f04:	b0 c0       	rjmp	.+352    	; 0x4066 <Spt_Init+0x5f2>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    3f06:	ae e4       	ldi	r26, 0x4E	; 78
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	ee e4       	ldi	r30, 0x4E	; 78
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	80 81       	ld	r24, Z
    3f10:	8e 7f       	andi	r24, 0xFE	; 254
    3f12:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    3f14:	ae e4       	ldi	r26, 0x4E	; 78
    3f16:	b0 e0       	ldi	r27, 0x00	; 0
    3f18:	ee e4       	ldi	r30, 0x4E	; 78
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 81       	ld	r24, Z
    3f1e:	8d 7f       	andi	r24, 0xFD	; 253
    3f20:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    3f22:	ae e4       	ldi	r26, 0x4E	; 78
    3f24:	b0 e0       	ldi	r27, 0x00	; 0
    3f26:	ee e4       	ldi	r30, 0x4E	; 78
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	80 81       	ld	r24, Z
    3f2c:	8b 7f       	andi	r24, 0xFB	; 251
    3f2e:	8c 93       	st	X, r24
    3f30:	12 c2       	rjmp	.+1060   	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    3f32:	ae e4       	ldi	r26, 0x4E	; 78
    3f34:	b0 e0       	ldi	r27, 0x00	; 0
    3f36:	ee e4       	ldi	r30, 0x4E	; 78
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	80 81       	ld	r24, Z
    3f3c:	81 60       	ori	r24, 0x01	; 1
    3f3e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    3f40:	ae e4       	ldi	r26, 0x4E	; 78
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	ee e4       	ldi	r30, 0x4E	; 78
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	8d 7f       	andi	r24, 0xFD	; 253
    3f4c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    3f4e:	ae e4       	ldi	r26, 0x4E	; 78
    3f50:	b0 e0       	ldi	r27, 0x00	; 0
    3f52:	ee e4       	ldi	r30, 0x4E	; 78
    3f54:	f0 e0       	ldi	r31, 0x00	; 0
    3f56:	80 81       	ld	r24, Z
    3f58:	8b 7f       	andi	r24, 0xFB	; 251
    3f5a:	8c 93       	st	X, r24
    3f5c:	fc c1       	rjmp	.+1016   	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    3f5e:	ae e4       	ldi	r26, 0x4E	; 78
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	ee e4       	ldi	r30, 0x4E	; 78
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	80 81       	ld	r24, Z
    3f68:	8e 7f       	andi	r24, 0xFE	; 254
    3f6a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    3f6c:	ae e4       	ldi	r26, 0x4E	; 78
    3f6e:	b0 e0       	ldi	r27, 0x00	; 0
    3f70:	ee e4       	ldi	r30, 0x4E	; 78
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	80 81       	ld	r24, Z
    3f76:	82 60       	ori	r24, 0x02	; 2
    3f78:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    3f7a:	ae e4       	ldi	r26, 0x4E	; 78
    3f7c:	b0 e0       	ldi	r27, 0x00	; 0
    3f7e:	ee e4       	ldi	r30, 0x4E	; 78
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	80 81       	ld	r24, Z
    3f84:	8b 7f       	andi	r24, 0xFB	; 251
    3f86:	8c 93       	st	X, r24
    3f88:	e6 c1       	rjmp	.+972    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    3f8a:	ae e4       	ldi	r26, 0x4E	; 78
    3f8c:	b0 e0       	ldi	r27, 0x00	; 0
    3f8e:	ee e4       	ldi	r30, 0x4E	; 78
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	80 81       	ld	r24, Z
    3f94:	81 60       	ori	r24, 0x01	; 1
    3f96:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    3f98:	ae e4       	ldi	r26, 0x4E	; 78
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	ee e4       	ldi	r30, 0x4E	; 78
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	80 81       	ld	r24, Z
    3fa2:	82 60       	ori	r24, 0x02	; 2
    3fa4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    3fa6:	ae e4       	ldi	r26, 0x4E	; 78
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	ee e4       	ldi	r30, 0x4E	; 78
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	80 81       	ld	r24, Z
    3fb0:	8b 7f       	andi	r24, 0xFB	; 251
    3fb2:	8c 93       	st	X, r24
    3fb4:	d0 c1       	rjmp	.+928    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    3fb6:	ae e4       	ldi	r26, 0x4E	; 78
    3fb8:	b0 e0       	ldi	r27, 0x00	; 0
    3fba:	ee e4       	ldi	r30, 0x4E	; 78
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	80 81       	ld	r24, Z
    3fc0:	8e 7f       	andi	r24, 0xFE	; 254
    3fc2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    3fc4:	ae e4       	ldi	r26, 0x4E	; 78
    3fc6:	b0 e0       	ldi	r27, 0x00	; 0
    3fc8:	ee e4       	ldi	r30, 0x4E	; 78
    3fca:	f0 e0       	ldi	r31, 0x00	; 0
    3fcc:	80 81       	ld	r24, Z
    3fce:	8d 7f       	andi	r24, 0xFD	; 253
    3fd0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    3fd2:	ae e4       	ldi	r26, 0x4E	; 78
    3fd4:	b0 e0       	ldi	r27, 0x00	; 0
    3fd6:	ee e4       	ldi	r30, 0x4E	; 78
    3fd8:	f0 e0       	ldi	r31, 0x00	; 0
    3fda:	80 81       	ld	r24, Z
    3fdc:	84 60       	ori	r24, 0x04	; 4
    3fde:	8c 93       	st	X, r24
    3fe0:	ba c1       	rjmp	.+884    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    3fe2:	ae e4       	ldi	r26, 0x4E	; 78
    3fe4:	b0 e0       	ldi	r27, 0x00	; 0
    3fe6:	ee e4       	ldi	r30, 0x4E	; 78
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	80 81       	ld	r24, Z
    3fec:	81 60       	ori	r24, 0x01	; 1
    3fee:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    3ff0:	ae e4       	ldi	r26, 0x4E	; 78
    3ff2:	b0 e0       	ldi	r27, 0x00	; 0
    3ff4:	ee e4       	ldi	r30, 0x4E	; 78
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	80 81       	ld	r24, Z
    3ffa:	8d 7f       	andi	r24, 0xFD	; 253
    3ffc:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    3ffe:	ae e4       	ldi	r26, 0x4E	; 78
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	ee e4       	ldi	r30, 0x4E	; 78
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	84 60       	ori	r24, 0x04	; 4
    400a:	8c 93       	st	X, r24
    400c:	a4 c1       	rjmp	.+840    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    400e:	ae e4       	ldi	r26, 0x4E	; 78
    4010:	b0 e0       	ldi	r27, 0x00	; 0
    4012:	ee e4       	ldi	r30, 0x4E	; 78
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	80 81       	ld	r24, Z
    4018:	8e 7f       	andi	r24, 0xFE	; 254
    401a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    401c:	ae e4       	ldi	r26, 0x4E	; 78
    401e:	b0 e0       	ldi	r27, 0x00	; 0
    4020:	ee e4       	ldi	r30, 0x4E	; 78
    4022:	f0 e0       	ldi	r31, 0x00	; 0
    4024:	80 81       	ld	r24, Z
    4026:	82 60       	ori	r24, 0x02	; 2
    4028:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    402a:	ae e4       	ldi	r26, 0x4E	; 78
    402c:	b0 e0       	ldi	r27, 0x00	; 0
    402e:	ee e4       	ldi	r30, 0x4E	; 78
    4030:	f0 e0       	ldi	r31, 0x00	; 0
    4032:	80 81       	ld	r24, Z
    4034:	84 60       	ori	r24, 0x04	; 4
    4036:	8c 93       	st	X, r24
    4038:	8e c1       	rjmp	.+796    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    403a:	ae e4       	ldi	r26, 0x4E	; 78
    403c:	b0 e0       	ldi	r27, 0x00	; 0
    403e:	ee e4       	ldi	r30, 0x4E	; 78
    4040:	f0 e0       	ldi	r31, 0x00	; 0
    4042:	80 81       	ld	r24, Z
    4044:	81 60       	ori	r24, 0x01	; 1
    4046:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4048:	ae e4       	ldi	r26, 0x4E	; 78
    404a:	b0 e0       	ldi	r27, 0x00	; 0
    404c:	ee e4       	ldi	r30, 0x4E	; 78
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	80 81       	ld	r24, Z
    4052:	82 60       	ori	r24, 0x02	; 2
    4054:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4056:	ae e4       	ldi	r26, 0x4E	; 78
    4058:	b0 e0       	ldi	r27, 0x00	; 0
    405a:	ee e4       	ldi	r30, 0x4E	; 78
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	80 81       	ld	r24, Z
    4060:	84 60       	ori	r24, 0x04	; 4
    4062:	8c 93       	st	X, r24
    4064:	78 c1       	rjmp	.+752    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4066:	19 82       	std	Y+1, r1	; 0x01
    4068:	76 c1       	rjmp	.+748    	; 0x4356 <Spt_Init+0x8e2>
        }
        break;

        case SPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    406a:	ea 81       	ldd	r30, Y+2	; 0x02
    406c:	fb 81       	ldd	r31, Y+3	; 0x03
    406e:	81 81       	ldd	r24, Z+1	; 0x01
    4070:	88 23       	and	r24, r24
    4072:	e9 f4       	brne	.+58     	; 0x40ae <Spt_Init+0x63a>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4074:	af e4       	ldi	r26, 0x4F	; 79
    4076:	b0 e0       	ldi	r27, 0x00	; 0
    4078:	ef e4       	ldi	r30, 0x4F	; 79
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	80 81       	ld	r24, Z
    407e:	8e 7f       	andi	r24, 0xFE	; 254
    4080:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    4082:	af e4       	ldi	r26, 0x4F	; 79
    4084:	b0 e0       	ldi	r27, 0x00	; 0
    4086:	ef e4       	ldi	r30, 0x4F	; 79
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	80 81       	ld	r24, Z
    408c:	82 60       	ori	r24, 0x02	; 2
    408e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    4090:	ae e4       	ldi	r26, 0x4E	; 78
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	ee e4       	ldi	r30, 0x4E	; 78
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	80 81       	ld	r24, Z
    409a:	88 60       	ori	r24, 0x08	; 8
    409c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    409e:	ae e4       	ldi	r26, 0x4E	; 78
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	ee e4       	ldi	r30, 0x4E	; 78
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	80 81       	ld	r24, Z
    40a8:	80 61       	ori	r24, 0x10	; 16
    40aa:	8c 93       	st	X, r24
    40ac:	01 c0       	rjmp	.+2      	; 0x40b0 <Spt_Init+0x63c>
        //         // TODO
        //         // TODO
        //     }
        else
        {
            returnValue = SPT_ERROR;
    40ae:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    40b0:	ea 81       	ldd	r30, Y+2	; 0x02
    40b2:	fb 81       	ldd	r31, Y+3	; 0x03
    40b4:	82 81       	ldd	r24, Z+2	; 0x02
    40b6:	28 2f       	mov	r18, r24
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	3f 83       	std	Y+7, r19	; 0x07
    40bc:	2e 83       	std	Y+6, r18	; 0x06
    40be:	8e 81       	ldd	r24, Y+6	; 0x06
    40c0:	9f 81       	ldd	r25, Y+7	; 0x07
    40c2:	81 30       	cpi	r24, 0x01	; 1
    40c4:	91 05       	cpc	r25, r1
    40c6:	21 f1       	breq	.+72     	; 0x4110 <Spt_Init+0x69c>
    40c8:	2e 81       	ldd	r18, Y+6	; 0x06
    40ca:	3f 81       	ldd	r19, Y+7	; 0x07
    40cc:	22 30       	cpi	r18, 0x02	; 2
    40ce:	31 05       	cpc	r19, r1
    40d0:	2c f4       	brge	.+10     	; 0x40dc <Spt_Init+0x668>
    40d2:	8e 81       	ldd	r24, Y+6	; 0x06
    40d4:	9f 81       	ldd	r25, Y+7	; 0x07
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	61 f0       	breq	.+24     	; 0x40f2 <Spt_Init+0x67e>
    40da:	47 c0       	rjmp	.+142    	; 0x416a <Spt_Init+0x6f6>
    40dc:	2e 81       	ldd	r18, Y+6	; 0x06
    40de:	3f 81       	ldd	r19, Y+7	; 0x07
    40e0:	22 30       	cpi	r18, 0x02	; 2
    40e2:	31 05       	cpc	r19, r1
    40e4:	21 f1       	breq	.+72     	; 0x412e <Spt_Init+0x6ba>
    40e6:	8e 81       	ldd	r24, Y+6	; 0x06
    40e8:	9f 81       	ldd	r25, Y+7	; 0x07
    40ea:	83 30       	cpi	r24, 0x03	; 3
    40ec:	91 05       	cpc	r25, r1
    40ee:	71 f1       	breq	.+92     	; 0x414c <Spt_Init+0x6d8>
    40f0:	3c c0       	rjmp	.+120    	; 0x416a <Spt_Init+0x6f6>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    40f2:	af e4       	ldi	r26, 0x4F	; 79
    40f4:	b0 e0       	ldi	r27, 0x00	; 0
    40f6:	ef e4       	ldi	r30, 0x4F	; 79
    40f8:	f0 e0       	ldi	r31, 0x00	; 0
    40fa:	80 81       	ld	r24, Z
    40fc:	8f 7e       	andi	r24, 0xEF	; 239
    40fe:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    4100:	af e4       	ldi	r26, 0x4F	; 79
    4102:	b0 e0       	ldi	r27, 0x00	; 0
    4104:	ef e4       	ldi	r30, 0x4F	; 79
    4106:	f0 e0       	ldi	r31, 0x00	; 0
    4108:	80 81       	ld	r24, Z
    410a:	8f 7d       	andi	r24, 0xDF	; 223
    410c:	8c 93       	st	X, r24
    410e:	2e c0       	rjmp	.+92     	; 0x416c <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    4110:	af e4       	ldi	r26, 0x4F	; 79
    4112:	b0 e0       	ldi	r27, 0x00	; 0
    4114:	ef e4       	ldi	r30, 0x4F	; 79
    4116:	f0 e0       	ldi	r31, 0x00	; 0
    4118:	80 81       	ld	r24, Z
    411a:	80 61       	ori	r24, 0x10	; 16
    411c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    411e:	af e4       	ldi	r26, 0x4F	; 79
    4120:	b0 e0       	ldi	r27, 0x00	; 0
    4122:	ef e4       	ldi	r30, 0x4F	; 79
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	80 81       	ld	r24, Z
    4128:	8f 7d       	andi	r24, 0xDF	; 223
    412a:	8c 93       	st	X, r24
    412c:	1f c0       	rjmp	.+62     	; 0x416c <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    412e:	af e4       	ldi	r26, 0x4F	; 79
    4130:	b0 e0       	ldi	r27, 0x00	; 0
    4132:	ef e4       	ldi	r30, 0x4F	; 79
    4134:	f0 e0       	ldi	r31, 0x00	; 0
    4136:	80 81       	ld	r24, Z
    4138:	80 61       	ori	r24, 0x10	; 16
    413a:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    413c:	af e4       	ldi	r26, 0x4F	; 79
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	ef e4       	ldi	r30, 0x4F	; 79
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	80 81       	ld	r24, Z
    4146:	80 62       	ori	r24, 0x20	; 32
    4148:	8c 93       	st	X, r24
    414a:	10 c0       	rjmp	.+32     	; 0x416c <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    414c:	af e4       	ldi	r26, 0x4F	; 79
    414e:	b0 e0       	ldi	r27, 0x00	; 0
    4150:	ef e4       	ldi	r30, 0x4F	; 79
    4152:	f0 e0       	ldi	r31, 0x00	; 0
    4154:	80 81       	ld	r24, Z
    4156:	8f 7e       	andi	r24, 0xEF	; 239
    4158:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    415a:	af e4       	ldi	r26, 0x4F	; 79
    415c:	b0 e0       	ldi	r27, 0x00	; 0
    415e:	ef e4       	ldi	r30, 0x4F	; 79
    4160:	f0 e0       	ldi	r31, 0x00	; 0
    4162:	80 81       	ld	r24, Z
    4164:	80 62       	ori	r24, 0x20	; 32
    4166:	8c 93       	st	X, r24
    4168:	01 c0       	rjmp	.+2      	; 0x416c <Spt_Init+0x6f8>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    416a:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    416c:	ea 81       	ldd	r30, Y+2	; 0x02
    416e:	fb 81       	ldd	r31, Y+3	; 0x03
    4170:	83 81       	ldd	r24, Z+3	; 0x03
    4172:	28 2f       	mov	r18, r24
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	3d 83       	std	Y+5, r19	; 0x05
    4178:	2c 83       	std	Y+4, r18	; 0x04
    417a:	8c 81       	ldd	r24, Y+4	; 0x04
    417c:	9d 81       	ldd	r25, Y+5	; 0x05
    417e:	84 30       	cpi	r24, 0x04	; 4
    4180:	91 05       	cpc	r25, r1
    4182:	09 f4       	brne	.+2      	; 0x4186 <Spt_Init+0x712>
    4184:	77 c0       	rjmp	.+238    	; 0x4274 <Spt_Init+0x800>
    4186:	2c 81       	ldd	r18, Y+4	; 0x04
    4188:	3d 81       	ldd	r19, Y+5	; 0x05
    418a:	25 30       	cpi	r18, 0x05	; 5
    418c:	31 05       	cpc	r19, r1
    418e:	8c f4       	brge	.+34     	; 0x41b2 <Spt_Init+0x73e>
    4190:	8c 81       	ldd	r24, Y+4	; 0x04
    4192:	9d 81       	ldd	r25, Y+5	; 0x05
    4194:	81 30       	cpi	r24, 0x01	; 1
    4196:	91 05       	cpc	r25, r1
    4198:	09 f4       	brne	.+2      	; 0x419c <Spt_Init+0x728>
    419a:	40 c0       	rjmp	.+128    	; 0x421c <Spt_Init+0x7a8>
    419c:	2c 81       	ldd	r18, Y+4	; 0x04
    419e:	3d 81       	ldd	r19, Y+5	; 0x05
    41a0:	22 30       	cpi	r18, 0x02	; 2
    41a2:	31 05       	cpc	r19, r1
    41a4:	09 f4       	brne	.+2      	; 0x41a8 <Spt_Init+0x734>
    41a6:	50 c0       	rjmp	.+160    	; 0x4248 <Spt_Init+0x7d4>
    41a8:	8c 81       	ldd	r24, Y+4	; 0x04
    41aa:	9d 81       	ldd	r25, Y+5	; 0x05
    41ac:	00 97       	sbiw	r24, 0x00	; 0
    41ae:	01 f1       	breq	.+64     	; 0x41f0 <Spt_Init+0x77c>
    41b0:	cf c0       	rjmp	.+414    	; 0x4350 <Spt_Init+0x8dc>
    41b2:	2c 81       	ldd	r18, Y+4	; 0x04
    41b4:	3d 81       	ldd	r19, Y+5	; 0x05
    41b6:	27 30       	cpi	r18, 0x07	; 7
    41b8:	31 05       	cpc	r19, r1
    41ba:	09 f4       	brne	.+2      	; 0x41be <Spt_Init+0x74a>
    41bc:	87 c0       	rjmp	.+270    	; 0x42cc <Spt_Init+0x858>
    41be:	8c 81       	ldd	r24, Y+4	; 0x04
    41c0:	9d 81       	ldd	r25, Y+5	; 0x05
    41c2:	88 30       	cpi	r24, 0x08	; 8
    41c4:	91 05       	cpc	r25, r1
    41c6:	3c f4       	brge	.+14     	; 0x41d6 <Spt_Init+0x762>
    41c8:	2c 81       	ldd	r18, Y+4	; 0x04
    41ca:	3d 81       	ldd	r19, Y+5	; 0x05
    41cc:	26 30       	cpi	r18, 0x06	; 6
    41ce:	31 05       	cpc	r19, r1
    41d0:	09 f4       	brne	.+2      	; 0x41d4 <Spt_Init+0x760>
    41d2:	66 c0       	rjmp	.+204    	; 0x42a0 <Spt_Init+0x82c>
    41d4:	bd c0       	rjmp	.+378    	; 0x4350 <Spt_Init+0x8dc>
    41d6:	8c 81       	ldd	r24, Y+4	; 0x04
    41d8:	9d 81       	ldd	r25, Y+5	; 0x05
    41da:	88 30       	cpi	r24, 0x08	; 8
    41dc:	91 05       	cpc	r25, r1
    41de:	09 f4       	brne	.+2      	; 0x41e2 <Spt_Init+0x76e>
    41e0:	8b c0       	rjmp	.+278    	; 0x42f8 <Spt_Init+0x884>
    41e2:	2c 81       	ldd	r18, Y+4	; 0x04
    41e4:	3d 81       	ldd	r19, Y+5	; 0x05
    41e6:	29 30       	cpi	r18, 0x09	; 9
    41e8:	31 05       	cpc	r19, r1
    41ea:	09 f4       	brne	.+2      	; 0x41ee <Spt_Init+0x77a>
    41ec:	9b c0       	rjmp	.+310    	; 0x4324 <Spt_Init+0x8b0>
    41ee:	b0 c0       	rjmp	.+352    	; 0x4350 <Spt_Init+0x8dc>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    41f0:	ae e4       	ldi	r26, 0x4E	; 78
    41f2:	b0 e0       	ldi	r27, 0x00	; 0
    41f4:	ee e4       	ldi	r30, 0x4E	; 78
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	80 81       	ld	r24, Z
    41fa:	8e 7f       	andi	r24, 0xFE	; 254
    41fc:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    41fe:	ae e4       	ldi	r26, 0x4E	; 78
    4200:	b0 e0       	ldi	r27, 0x00	; 0
    4202:	ee e4       	ldi	r30, 0x4E	; 78
    4204:	f0 e0       	ldi	r31, 0x00	; 0
    4206:	80 81       	ld	r24, Z
    4208:	8d 7f       	andi	r24, 0xFD	; 253
    420a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    420c:	ae e4       	ldi	r26, 0x4E	; 78
    420e:	b0 e0       	ldi	r27, 0x00	; 0
    4210:	ee e4       	ldi	r30, 0x4E	; 78
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	80 81       	ld	r24, Z
    4216:	8b 7f       	andi	r24, 0xFB	; 251
    4218:	8c 93       	st	X, r24
    421a:	9d c0       	rjmp	.+314    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    421c:	ae e4       	ldi	r26, 0x4E	; 78
    421e:	b0 e0       	ldi	r27, 0x00	; 0
    4220:	ee e4       	ldi	r30, 0x4E	; 78
    4222:	f0 e0       	ldi	r31, 0x00	; 0
    4224:	80 81       	ld	r24, Z
    4226:	81 60       	ori	r24, 0x01	; 1
    4228:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    422a:	ae e4       	ldi	r26, 0x4E	; 78
    422c:	b0 e0       	ldi	r27, 0x00	; 0
    422e:	ee e4       	ldi	r30, 0x4E	; 78
    4230:	f0 e0       	ldi	r31, 0x00	; 0
    4232:	80 81       	ld	r24, Z
    4234:	8d 7f       	andi	r24, 0xFD	; 253
    4236:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4238:	ae e4       	ldi	r26, 0x4E	; 78
    423a:	b0 e0       	ldi	r27, 0x00	; 0
    423c:	ee e4       	ldi	r30, 0x4E	; 78
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	80 81       	ld	r24, Z
    4242:	8b 7f       	andi	r24, 0xFB	; 251
    4244:	8c 93       	st	X, r24
    4246:	87 c0       	rjmp	.+270    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4248:	ae e4       	ldi	r26, 0x4E	; 78
    424a:	b0 e0       	ldi	r27, 0x00	; 0
    424c:	ee e4       	ldi	r30, 0x4E	; 78
    424e:	f0 e0       	ldi	r31, 0x00	; 0
    4250:	80 81       	ld	r24, Z
    4252:	8e 7f       	andi	r24, 0xFE	; 254
    4254:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4256:	ae e4       	ldi	r26, 0x4E	; 78
    4258:	b0 e0       	ldi	r27, 0x00	; 0
    425a:	ee e4       	ldi	r30, 0x4E	; 78
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	80 81       	ld	r24, Z
    4260:	82 60       	ori	r24, 0x02	; 2
    4262:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4264:	ae e4       	ldi	r26, 0x4E	; 78
    4266:	b0 e0       	ldi	r27, 0x00	; 0
    4268:	ee e4       	ldi	r30, 0x4E	; 78
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	80 81       	ld	r24, Z
    426e:	8b 7f       	andi	r24, 0xFB	; 251
    4270:	8c 93       	st	X, r24
    4272:	71 c0       	rjmp	.+226    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4274:	ae e4       	ldi	r26, 0x4E	; 78
    4276:	b0 e0       	ldi	r27, 0x00	; 0
    4278:	ee e4       	ldi	r30, 0x4E	; 78
    427a:	f0 e0       	ldi	r31, 0x00	; 0
    427c:	80 81       	ld	r24, Z
    427e:	81 60       	ori	r24, 0x01	; 1
    4280:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4282:	ae e4       	ldi	r26, 0x4E	; 78
    4284:	b0 e0       	ldi	r27, 0x00	; 0
    4286:	ee e4       	ldi	r30, 0x4E	; 78
    4288:	f0 e0       	ldi	r31, 0x00	; 0
    428a:	80 81       	ld	r24, Z
    428c:	82 60       	ori	r24, 0x02	; 2
    428e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4290:	ae e4       	ldi	r26, 0x4E	; 78
    4292:	b0 e0       	ldi	r27, 0x00	; 0
    4294:	ee e4       	ldi	r30, 0x4E	; 78
    4296:	f0 e0       	ldi	r31, 0x00	; 0
    4298:	80 81       	ld	r24, Z
    429a:	8b 7f       	andi	r24, 0xFB	; 251
    429c:	8c 93       	st	X, r24
    429e:	5b c0       	rjmp	.+182    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    42a0:	ae e4       	ldi	r26, 0x4E	; 78
    42a2:	b0 e0       	ldi	r27, 0x00	; 0
    42a4:	ee e4       	ldi	r30, 0x4E	; 78
    42a6:	f0 e0       	ldi	r31, 0x00	; 0
    42a8:	80 81       	ld	r24, Z
    42aa:	8e 7f       	andi	r24, 0xFE	; 254
    42ac:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    42ae:	ae e4       	ldi	r26, 0x4E	; 78
    42b0:	b0 e0       	ldi	r27, 0x00	; 0
    42b2:	ee e4       	ldi	r30, 0x4E	; 78
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	80 81       	ld	r24, Z
    42b8:	8d 7f       	andi	r24, 0xFD	; 253
    42ba:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    42bc:	ae e4       	ldi	r26, 0x4E	; 78
    42be:	b0 e0       	ldi	r27, 0x00	; 0
    42c0:	ee e4       	ldi	r30, 0x4E	; 78
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	80 81       	ld	r24, Z
    42c6:	84 60       	ori	r24, 0x04	; 4
    42c8:	8c 93       	st	X, r24
    42ca:	45 c0       	rjmp	.+138    	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    42cc:	ae e4       	ldi	r26, 0x4E	; 78
    42ce:	b0 e0       	ldi	r27, 0x00	; 0
    42d0:	ee e4       	ldi	r30, 0x4E	; 78
    42d2:	f0 e0       	ldi	r31, 0x00	; 0
    42d4:	80 81       	ld	r24, Z
    42d6:	81 60       	ori	r24, 0x01	; 1
    42d8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    42da:	ae e4       	ldi	r26, 0x4E	; 78
    42dc:	b0 e0       	ldi	r27, 0x00	; 0
    42de:	ee e4       	ldi	r30, 0x4E	; 78
    42e0:	f0 e0       	ldi	r31, 0x00	; 0
    42e2:	80 81       	ld	r24, Z
    42e4:	8d 7f       	andi	r24, 0xFD	; 253
    42e6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    42e8:	ae e4       	ldi	r26, 0x4E	; 78
    42ea:	b0 e0       	ldi	r27, 0x00	; 0
    42ec:	ee e4       	ldi	r30, 0x4E	; 78
    42ee:	f0 e0       	ldi	r31, 0x00	; 0
    42f0:	80 81       	ld	r24, Z
    42f2:	84 60       	ori	r24, 0x04	; 4
    42f4:	8c 93       	st	X, r24
    42f6:	2f c0       	rjmp	.+94     	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    42f8:	ae e4       	ldi	r26, 0x4E	; 78
    42fa:	b0 e0       	ldi	r27, 0x00	; 0
    42fc:	ee e4       	ldi	r30, 0x4E	; 78
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	80 81       	ld	r24, Z
    4302:	8e 7f       	andi	r24, 0xFE	; 254
    4304:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4306:	ae e4       	ldi	r26, 0x4E	; 78
    4308:	b0 e0       	ldi	r27, 0x00	; 0
    430a:	ee e4       	ldi	r30, 0x4E	; 78
    430c:	f0 e0       	ldi	r31, 0x00	; 0
    430e:	80 81       	ld	r24, Z
    4310:	82 60       	ori	r24, 0x02	; 2
    4312:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4314:	ae e4       	ldi	r26, 0x4E	; 78
    4316:	b0 e0       	ldi	r27, 0x00	; 0
    4318:	ee e4       	ldi	r30, 0x4E	; 78
    431a:	f0 e0       	ldi	r31, 0x00	; 0
    431c:	80 81       	ld	r24, Z
    431e:	84 60       	ori	r24, 0x04	; 4
    4320:	8c 93       	st	X, r24
    4322:	19 c0       	rjmp	.+50     	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4324:	ae e4       	ldi	r26, 0x4E	; 78
    4326:	b0 e0       	ldi	r27, 0x00	; 0
    4328:	ee e4       	ldi	r30, 0x4E	; 78
    432a:	f0 e0       	ldi	r31, 0x00	; 0
    432c:	80 81       	ld	r24, Z
    432e:	81 60       	ori	r24, 0x01	; 1
    4330:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4332:	ae e4       	ldi	r26, 0x4E	; 78
    4334:	b0 e0       	ldi	r27, 0x00	; 0
    4336:	ee e4       	ldi	r30, 0x4E	; 78
    4338:	f0 e0       	ldi	r31, 0x00	; 0
    433a:	80 81       	ld	r24, Z
    433c:	82 60       	ori	r24, 0x02	; 2
    433e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4340:	ae e4       	ldi	r26, 0x4E	; 78
    4342:	b0 e0       	ldi	r27, 0x00	; 0
    4344:	ee e4       	ldi	r30, 0x4E	; 78
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	80 81       	ld	r24, Z
    434a:	84 60       	ori	r24, 0x04	; 4
    434c:	8c 93       	st	X, r24
    434e:	03 c0       	rjmp	.+6      	; 0x4356 <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4350:	19 82       	std	Y+1, r1	; 0x01
    4352:	01 c0       	rjmp	.+2      	; 0x4356 <Spt_Init+0x8e2>
        //         break;
        //     }
        //     break;

        default:
            returnValue = SPT_ERROR;
    4354:	19 82       	std	Y+1, r1	; 0x01
        }
        return returnValue;
    4356:	89 81       	ldd	r24, Y+1	; 0x01
}
    4358:	61 96       	adiw	r28, 0x11	; 17
    435a:	0f b6       	in	r0, 0x3f	; 63
    435c:	f8 94       	cli
    435e:	de bf       	out	0x3e, r29	; 62
    4360:	0f be       	out	0x3f, r0	; 63
    4362:	cd bf       	out	0x3d, r28	; 61
    4364:	cf 91       	pop	r28
    4366:	df 91       	pop	r29
    4368:	08 95       	ret

0000436a <Spt_Set_ICR1>:

void Spt_Set_ICR1(u16 value) {
    436a:	df 93       	push	r29
    436c:	cf 93       	push	r28
    436e:	00 d0       	rcall	.+0      	; 0x4370 <Spt_Set_ICR1+0x6>
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
    4374:	9a 83       	std	Y+2, r25	; 0x02
    4376:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = value;
    4378:	e6 e4       	ldi	r30, 0x46	; 70
    437a:	f0 e0       	ldi	r31, 0x00	; 0
    437c:	89 81       	ldd	r24, Y+1	; 0x01
    437e:	9a 81       	ldd	r25, Y+2	; 0x02
    4380:	91 83       	std	Z+1, r25	; 0x01
    4382:	80 83       	st	Z, r24
}
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	cf 91       	pop	r28
    438a:	df 91       	pop	r29
    438c:	08 95       	ret

0000438e <Get_OCR_Value>:

u16 Get_OCR_Value (u8 angle) {
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	0f 92       	push	r0
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62
    4398:	89 83       	std	Y+1, r24	; 0x01
    return ((angle*1000)/180)+1000;
    439a:	89 81       	ldd	r24, Y+1	; 0x01
    439c:	28 2f       	mov	r18, r24
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	88 ee       	ldi	r24, 0xE8	; 232
    43a2:	93 e0       	ldi	r25, 0x03	; 3
    43a4:	ac 01       	movw	r20, r24
    43a6:	24 9f       	mul	r18, r20
    43a8:	c0 01       	movw	r24, r0
    43aa:	25 9f       	mul	r18, r21
    43ac:	90 0d       	add	r25, r0
    43ae:	34 9f       	mul	r19, r20
    43b0:	90 0d       	add	r25, r0
    43b2:	11 24       	eor	r1, r1
    43b4:	24 eb       	ldi	r18, 0xB4	; 180
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	b9 01       	movw	r22, r18
    43ba:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__divmodhi4>
    43be:	cb 01       	movw	r24, r22
    43c0:	88 51       	subi	r24, 0x18	; 24
    43c2:	9c 4f       	sbci	r25, 0xFC	; 252
}
    43c4:	0f 90       	pop	r0
    43c6:	cf 91       	pop	r28
    43c8:	df 91       	pop	r29
    43ca:	08 95       	ret

000043cc <Spt_StartTimer>:

Spt_ReturnType Spt_StartTimer(Spt_ChannelType channel, u16 value)
{
    43cc:	df 93       	push	r29
    43ce:	cf 93       	push	r28
    43d0:	00 d0       	rcall	.+0      	; 0x43d2 <Spt_StartTimer+0x6>
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <Spt_StartTimer+0x8>
    43d4:	00 d0       	rcall	.+0      	; 0x43d6 <Spt_StartTimer+0xa>
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
    43da:	8a 83       	std	Y+2, r24	; 0x02
    43dc:	7c 83       	std	Y+4, r23	; 0x04
    43de:	6b 83       	std	Y+3, r22	; 0x03
    Spt_ReturnType returnValue = SPT_OK;
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    43e4:	8a 81       	ldd	r24, Y+2	; 0x02
    43e6:	28 2f       	mov	r18, r24
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	3e 83       	std	Y+6, r19	; 0x06
    43ec:	2d 83       	std	Y+5, r18	; 0x05
    43ee:	8d 81       	ldd	r24, Y+5	; 0x05
    43f0:	9e 81       	ldd	r25, Y+6	; 0x06
    43f2:	81 30       	cpi	r24, 0x01	; 1
    43f4:	91 05       	cpc	r25, r1
    43f6:	b1 f0       	breq	.+44     	; 0x4424 <Spt_StartTimer+0x58>
    43f8:	2d 81       	ldd	r18, Y+5	; 0x05
    43fa:	3e 81       	ldd	r19, Y+6	; 0x06
    43fc:	22 30       	cpi	r18, 0x02	; 2
    43fe:	31 05       	cpc	r19, r1
    4400:	c1 f0       	breq	.+48     	; 0x4432 <Spt_StartTimer+0x66>
    4402:	8d 81       	ldd	r24, Y+5	; 0x05
    4404:	9e 81       	ldd	r25, Y+6	; 0x06
    4406:	00 97       	sbiw	r24, 0x00	; 0
    4408:	d1 f4       	brne	.+52     	; 0x443e <Spt_StartTimer+0x72>
    {
    case SPT_CHANNEL_TIMER0:
        if (value < 256)
    440a:	8b 81       	ldd	r24, Y+3	; 0x03
    440c:	9c 81       	ldd	r25, Y+4	; 0x04
    440e:	8f 3f       	cpi	r24, 0xFF	; 255
    4410:	91 05       	cpc	r25, r1
    4412:	09 f0       	breq	.+2      	; 0x4416 <Spt_StartTimer+0x4a>
    4414:	28 f4       	brcc	.+10     	; 0x4420 <Spt_StartTimer+0x54>
        {
            OCR0 = value;
    4416:	ec e5       	ldi	r30, 0x5C	; 92
    4418:	f0 e0       	ldi	r31, 0x00	; 0
    441a:	8b 81       	ldd	r24, Y+3	; 0x03
    441c:	80 83       	st	Z, r24
    441e:	0f c0       	rjmp	.+30     	; 0x443e <Spt_StartTimer+0x72>
        }
        else
        {
            returnValue = SPT_ERROR;
    4420:	19 82       	std	Y+1, r1	; 0x01
    4422:	0d c0       	rjmp	.+26     	; 0x443e <Spt_StartTimer+0x72>
        }
        break;
    case SPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    4424:	ea e4       	ldi	r30, 0x4A	; 74
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	8b 81       	ldd	r24, Y+3	; 0x03
    442a:	9c 81       	ldd	r25, Y+4	; 0x04
    442c:	91 83       	std	Z+1, r25	; 0x01
    442e:	80 83       	st	Z, r24
    4430:	06 c0       	rjmp	.+12     	; 0x443e <Spt_StartTimer+0x72>
        // TODO
        break;
    case SPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    4432:	e8 e4       	ldi	r30, 0x48	; 72
    4434:	f0 e0       	ldi	r31, 0x00	; 0
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	9c 81       	ldd	r25, Y+4	; 0x04
    443a:	91 83       	std	Z+1, r25	; 0x01
    443c:	80 83       	st	Z, r24
    //     break;

    default:
        break;
    }
    return returnValue;
    443e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4440:	26 96       	adiw	r28, 0x06	; 6
    4442:	0f b6       	in	r0, 0x3f	; 63
    4444:	f8 94       	cli
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	0f be       	out	0x3f, r0	; 63
    444a:	cd bf       	out	0x3d, r28	; 61
    444c:	cf 91       	pop	r28
    444e:	df 91       	pop	r29
    4450:	08 95       	ret

00004452 <Clock_Set_Hour>:
#include "Time_Table.h"
#include "EEPROM.h"
#include <util/delay.h>

void Clock_Set_Hour(u8 H_data1, u8 M_data2)
{
    4452:	df 93       	push	r29
    4454:	cf 93       	push	r28
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
    445a:	60 97       	sbiw	r28, 0x10	; 16
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	f8 94       	cli
    4460:	de bf       	out	0x3e, r29	; 62
    4462:	0f be       	out	0x3f, r0	; 63
    4464:	cd bf       	out	0x3d, r28	; 61
    4466:	8f 87       	std	Y+15, r24	; 0x0f
    4468:	68 8b       	std	Y+16, r22	; 0x10
    EEPROM_Write_Byte(0b10100000, Clock_Hour_add1, H_data1);
    446a:	80 ea       	ldi	r24, 0xA0	; 160
    446c:	61 e0       	ldi	r22, 0x01	; 1
    446e:	4f 85       	ldd	r20, Y+15	; 0x0f
    4470:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	a8 ec       	ldi	r26, 0xC8	; 200
    447a:	b2 e4       	ldi	r27, 0x42	; 66
    447c:	8b 87       	std	Y+11, r24	; 0x0b
    447e:	9c 87       	std	Y+12, r25	; 0x0c
    4480:	ad 87       	std	Y+13, r26	; 0x0d
    4482:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4484:	6b 85       	ldd	r22, Y+11	; 0x0b
    4486:	7c 85       	ldd	r23, Y+12	; 0x0c
    4488:	8d 85       	ldd	r24, Y+13	; 0x0d
    448a:	9e 85       	ldd	r25, Y+14	; 0x0e
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	4a ef       	ldi	r20, 0xFA	; 250
    4492:	54 e4       	ldi	r21, 0x44	; 68
    4494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	8f 83       	std	Y+7, r24	; 0x07
    449e:	98 87       	std	Y+8, r25	; 0x08
    44a0:	a9 87       	std	Y+9, r26	; 0x09
    44a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44a4:	6f 81       	ldd	r22, Y+7	; 0x07
    44a6:	78 85       	ldd	r23, Y+8	; 0x08
    44a8:	89 85       	ldd	r24, Y+9	; 0x09
    44aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	40 e8       	ldi	r20, 0x80	; 128
    44b2:	5f e3       	ldi	r21, 0x3F	; 63
    44b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44b8:	88 23       	and	r24, r24
    44ba:	2c f4       	brge	.+10     	; 0x44c6 <Clock_Set_Hour+0x74>
		__ticks = 1;
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	9e 83       	std	Y+6, r25	; 0x06
    44c2:	8d 83       	std	Y+5, r24	; 0x05
    44c4:	3f c0       	rjmp	.+126    	; 0x4544 <Clock_Set_Hour+0xf2>
	else if (__tmp > 65535)
    44c6:	6f 81       	ldd	r22, Y+7	; 0x07
    44c8:	78 85       	ldd	r23, Y+8	; 0x08
    44ca:	89 85       	ldd	r24, Y+9	; 0x09
    44cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ce:	20 e0       	ldi	r18, 0x00	; 0
    44d0:	3f ef       	ldi	r19, 0xFF	; 255
    44d2:	4f e7       	ldi	r20, 0x7F	; 127
    44d4:	57 e4       	ldi	r21, 0x47	; 71
    44d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44da:	18 16       	cp	r1, r24
    44dc:	4c f5       	brge	.+82     	; 0x4530 <Clock_Set_Hour+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44de:	6b 85       	ldd	r22, Y+11	; 0x0b
    44e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	40 e2       	ldi	r20, 0x20	; 32
    44ec:	51 e4       	ldi	r21, 0x41	; 65
    44ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	bc 01       	movw	r22, r24
    44f8:	cd 01       	movw	r24, r26
    44fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	9e 83       	std	Y+6, r25	; 0x06
    4504:	8d 83       	std	Y+5, r24	; 0x05
    4506:	0f c0       	rjmp	.+30     	; 0x4526 <Clock_Set_Hour+0xd4>
    4508:	88 ec       	ldi	r24, 0xC8	; 200
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	9c 83       	std	Y+4, r25	; 0x04
    450e:	8b 83       	std	Y+3, r24	; 0x03
    4510:	8b 81       	ldd	r24, Y+3	; 0x03
    4512:	9c 81       	ldd	r25, Y+4	; 0x04
    4514:	01 97       	sbiw	r24, 0x01	; 1
    4516:	f1 f7       	brne	.-4      	; 0x4514 <Clock_Set_Hour+0xc2>
    4518:	9c 83       	std	Y+4, r25	; 0x04
    451a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    451c:	8d 81       	ldd	r24, Y+5	; 0x05
    451e:	9e 81       	ldd	r25, Y+6	; 0x06
    4520:	01 97       	sbiw	r24, 0x01	; 1
    4522:	9e 83       	std	Y+6, r25	; 0x06
    4524:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4526:	8d 81       	ldd	r24, Y+5	; 0x05
    4528:	9e 81       	ldd	r25, Y+6	; 0x06
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	69 f7       	brne	.-38     	; 0x4508 <Clock_Set_Hour+0xb6>
    452e:	14 c0       	rjmp	.+40     	; 0x4558 <Clock_Set_Hour+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4530:	6f 81       	ldd	r22, Y+7	; 0x07
    4532:	78 85       	ldd	r23, Y+8	; 0x08
    4534:	89 85       	ldd	r24, Y+9	; 0x09
    4536:	9a 85       	ldd	r25, Y+10	; 0x0a
    4538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	9e 83       	std	Y+6, r25	; 0x06
    4542:	8d 83       	std	Y+5, r24	; 0x05
    4544:	8d 81       	ldd	r24, Y+5	; 0x05
    4546:	9e 81       	ldd	r25, Y+6	; 0x06
    4548:	9a 83       	std	Y+2, r25	; 0x02
    454a:	89 83       	std	Y+1, r24	; 0x01
    454c:	89 81       	ldd	r24, Y+1	; 0x01
    454e:	9a 81       	ldd	r25, Y+2	; 0x02
    4550:	01 97       	sbiw	r24, 0x01	; 1
    4552:	f1 f7       	brne	.-4      	; 0x4550 <Clock_Set_Hour+0xfe>
    4554:	9a 83       	std	Y+2, r25	; 0x02
    4556:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    EEPROM_Write_Byte(0b10100000, Clock_Hour_add2, M_data2);
    4558:	80 ea       	ldi	r24, 0xA0	; 160
    455a:	62 e0       	ldi	r22, 0x02	; 2
    455c:	48 89       	ldd	r20, Y+16	; 0x10
    455e:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
}
    4562:	60 96       	adiw	r28, 0x10	; 16
    4564:	0f b6       	in	r0, 0x3f	; 63
    4566:	f8 94       	cli
    4568:	de bf       	out	0x3e, r29	; 62
    456a:	0f be       	out	0x3f, r0	; 63
    456c:	cd bf       	out	0x3d, r28	; 61
    456e:	cf 91       	pop	r28
    4570:	df 91       	pop	r29
    4572:	08 95       	ret

00004574 <Clock_Set_Min>:
void Clock_Set_Min(u8 H_data1, u8 M_data2)
{
    4574:	df 93       	push	r29
    4576:	cf 93       	push	r28
    4578:	00 d0       	rcall	.+0      	; 0x457a <Clock_Set_Min+0x6>
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	89 83       	std	Y+1, r24	; 0x01
    4580:	6a 83       	std	Y+2, r22	; 0x02
    EEPROM_Write_Byte(0b10100000, Clock_Min_add1, H_data1);
    4582:	80 ea       	ldi	r24, 0xA0	; 160
    4584:	63 e0       	ldi	r22, 0x03	; 3
    4586:	49 81       	ldd	r20, Y+1	; 0x01
    4588:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
}
    458c:	0f 90       	pop	r0
    458e:	0f 90       	pop	r0
    4590:	cf 91       	pop	r28
    4592:	df 91       	pop	r29
    4594:	08 95       	ret

00004596 <Clock_Set_Fajr>:

void Clock_Set_Fajr(u8 H_data1, u8 M_data2)
{
    4596:	df 93       	push	r29
    4598:	cf 93       	push	r28
    459a:	cd b7       	in	r28, 0x3d	; 61
    459c:	de b7       	in	r29, 0x3e	; 62
    459e:	60 97       	sbiw	r28, 0x10	; 16
    45a0:	0f b6       	in	r0, 0x3f	; 63
    45a2:	f8 94       	cli
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	cd bf       	out	0x3d, r28	; 61
    45aa:	8f 87       	std	Y+15, r24	; 0x0f
    45ac:	68 8b       	std	Y+16, r22	; 0x10
    EEPROM_Write_Byte(0b10100000, Clock_Fajr_add1, H_data1);
    45ae:	80 ea       	ldi	r24, 0xA0	; 160
    45b0:	65 e0       	ldi	r22, 0x05	; 5
    45b2:	4f 85       	ldd	r20, Y+15	; 0x0f
    45b4:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	a8 ec       	ldi	r26, 0xC8	; 200
    45be:	b2 e4       	ldi	r27, 0x42	; 66
    45c0:	8b 87       	std	Y+11, r24	; 0x0b
    45c2:	9c 87       	std	Y+12, r25	; 0x0c
    45c4:	ad 87       	std	Y+13, r26	; 0x0d
    45c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    45cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	4a ef       	ldi	r20, 0xFA	; 250
    45d6:	54 e4       	ldi	r21, 0x44	; 68
    45d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	8f 83       	std	Y+7, r24	; 0x07
    45e2:	98 87       	std	Y+8, r25	; 0x08
    45e4:	a9 87       	std	Y+9, r26	; 0x09
    45e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45e8:	6f 81       	ldd	r22, Y+7	; 0x07
    45ea:	78 85       	ldd	r23, Y+8	; 0x08
    45ec:	89 85       	ldd	r24, Y+9	; 0x09
    45ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	40 e8       	ldi	r20, 0x80	; 128
    45f6:	5f e3       	ldi	r21, 0x3F	; 63
    45f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45fc:	88 23       	and	r24, r24
    45fe:	2c f4       	brge	.+10     	; 0x460a <Clock_Set_Fajr+0x74>
		__ticks = 1;
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	9e 83       	std	Y+6, r25	; 0x06
    4606:	8d 83       	std	Y+5, r24	; 0x05
    4608:	3f c0       	rjmp	.+126    	; 0x4688 <Clock_Set_Fajr+0xf2>
	else if (__tmp > 65535)
    460a:	6f 81       	ldd	r22, Y+7	; 0x07
    460c:	78 85       	ldd	r23, Y+8	; 0x08
    460e:	89 85       	ldd	r24, Y+9	; 0x09
    4610:	9a 85       	ldd	r25, Y+10	; 0x0a
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	3f ef       	ldi	r19, 0xFF	; 255
    4616:	4f e7       	ldi	r20, 0x7F	; 127
    4618:	57 e4       	ldi	r21, 0x47	; 71
    461a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    461e:	18 16       	cp	r1, r24
    4620:	4c f5       	brge	.+82     	; 0x4674 <Clock_Set_Fajr+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4622:	6b 85       	ldd	r22, Y+11	; 0x0b
    4624:	7c 85       	ldd	r23, Y+12	; 0x0c
    4626:	8d 85       	ldd	r24, Y+13	; 0x0d
    4628:	9e 85       	ldd	r25, Y+14	; 0x0e
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	40 e2       	ldi	r20, 0x20	; 32
    4630:	51 e4       	ldi	r21, 0x41	; 65
    4632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	bc 01       	movw	r22, r24
    463c:	cd 01       	movw	r24, r26
    463e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	9e 83       	std	Y+6, r25	; 0x06
    4648:	8d 83       	std	Y+5, r24	; 0x05
    464a:	0f c0       	rjmp	.+30     	; 0x466a <Clock_Set_Fajr+0xd4>
    464c:	88 ec       	ldi	r24, 0xC8	; 200
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	9c 83       	std	Y+4, r25	; 0x04
    4652:	8b 83       	std	Y+3, r24	; 0x03
    4654:	8b 81       	ldd	r24, Y+3	; 0x03
    4656:	9c 81       	ldd	r25, Y+4	; 0x04
    4658:	01 97       	sbiw	r24, 0x01	; 1
    465a:	f1 f7       	brne	.-4      	; 0x4658 <Clock_Set_Fajr+0xc2>
    465c:	9c 83       	std	Y+4, r25	; 0x04
    465e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4660:	8d 81       	ldd	r24, Y+5	; 0x05
    4662:	9e 81       	ldd	r25, Y+6	; 0x06
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	9e 83       	std	Y+6, r25	; 0x06
    4668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466a:	8d 81       	ldd	r24, Y+5	; 0x05
    466c:	9e 81       	ldd	r25, Y+6	; 0x06
    466e:	00 97       	sbiw	r24, 0x00	; 0
    4670:	69 f7       	brne	.-38     	; 0x464c <Clock_Set_Fajr+0xb6>
    4672:	14 c0       	rjmp	.+40     	; 0x469c <Clock_Set_Fajr+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4674:	6f 81       	ldd	r22, Y+7	; 0x07
    4676:	78 85       	ldd	r23, Y+8	; 0x08
    4678:	89 85       	ldd	r24, Y+9	; 0x09
    467a:	9a 85       	ldd	r25, Y+10	; 0x0a
    467c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	9e 83       	std	Y+6, r25	; 0x06
    4686:	8d 83       	std	Y+5, r24	; 0x05
    4688:	8d 81       	ldd	r24, Y+5	; 0x05
    468a:	9e 81       	ldd	r25, Y+6	; 0x06
    468c:	9a 83       	std	Y+2, r25	; 0x02
    468e:	89 83       	std	Y+1, r24	; 0x01
    4690:	89 81       	ldd	r24, Y+1	; 0x01
    4692:	9a 81       	ldd	r25, Y+2	; 0x02
    4694:	01 97       	sbiw	r24, 0x01	; 1
    4696:	f1 f7       	brne	.-4      	; 0x4694 <Clock_Set_Fajr+0xfe>
    4698:	9a 83       	std	Y+2, r25	; 0x02
    469a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    EEPROM_Write_Byte(0b10100000, Clock_Fajr_add2, M_data2);
    469c:	80 ea       	ldi	r24, 0xA0	; 160
    469e:	66 e0       	ldi	r22, 0x06	; 6
    46a0:	48 89       	ldd	r20, Y+16	; 0x10
    46a2:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
}
    46a6:	60 96       	adiw	r28, 0x10	; 16
    46a8:	0f b6       	in	r0, 0x3f	; 63
    46aa:	f8 94       	cli
    46ac:	de bf       	out	0x3e, r29	; 62
    46ae:	0f be       	out	0x3f, r0	; 63
    46b0:	cd bf       	out	0x3d, r28	; 61
    46b2:	cf 91       	pop	r28
    46b4:	df 91       	pop	r29
    46b6:	08 95       	ret

000046b8 <Clock_Set_Dhuhr>:
void Clock_Set_Dhuhr(u8 H_data1, u8 M_data2)
{
    46b8:	df 93       	push	r29
    46ba:	cf 93       	push	r28
    46bc:	cd b7       	in	r28, 0x3d	; 61
    46be:	de b7       	in	r29, 0x3e	; 62
    46c0:	60 97       	sbiw	r28, 0x10	; 16
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	f8 94       	cli
    46c6:	de bf       	out	0x3e, r29	; 62
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	cd bf       	out	0x3d, r28	; 61
    46cc:	8f 87       	std	Y+15, r24	; 0x0f
    46ce:	68 8b       	std	Y+16, r22	; 0x10
    EEPROM_Write_Byte(0b10100000, Clock_Dhuhr_add1, H_data1);
    46d0:	80 ea       	ldi	r24, 0xA0	; 160
    46d2:	69 e0       	ldi	r22, 0x09	; 9
    46d4:	4f 85       	ldd	r20, Y+15	; 0x0f
    46d6:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	a8 ec       	ldi	r26, 0xC8	; 200
    46e0:	b2 e4       	ldi	r27, 0x42	; 66
    46e2:	8b 87       	std	Y+11, r24	; 0x0b
    46e4:	9c 87       	std	Y+12, r25	; 0x0c
    46e6:	ad 87       	std	Y+13, r26	; 0x0d
    46e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    46ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    46f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	4a ef       	ldi	r20, 0xFA	; 250
    46f8:	54 e4       	ldi	r21, 0x44	; 68
    46fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	8f 83       	std	Y+7, r24	; 0x07
    4704:	98 87       	std	Y+8, r25	; 0x08
    4706:	a9 87       	std	Y+9, r26	; 0x09
    4708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    470a:	6f 81       	ldd	r22, Y+7	; 0x07
    470c:	78 85       	ldd	r23, Y+8	; 0x08
    470e:	89 85       	ldd	r24, Y+9	; 0x09
    4710:	9a 85       	ldd	r25, Y+10	; 0x0a
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	40 e8       	ldi	r20, 0x80	; 128
    4718:	5f e3       	ldi	r21, 0x3F	; 63
    471a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    471e:	88 23       	and	r24, r24
    4720:	2c f4       	brge	.+10     	; 0x472c <Clock_Set_Dhuhr+0x74>
		__ticks = 1;
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	9e 83       	std	Y+6, r25	; 0x06
    4728:	8d 83       	std	Y+5, r24	; 0x05
    472a:	3f c0       	rjmp	.+126    	; 0x47aa <Clock_Set_Dhuhr+0xf2>
	else if (__tmp > 65535)
    472c:	6f 81       	ldd	r22, Y+7	; 0x07
    472e:	78 85       	ldd	r23, Y+8	; 0x08
    4730:	89 85       	ldd	r24, Y+9	; 0x09
    4732:	9a 85       	ldd	r25, Y+10	; 0x0a
    4734:	20 e0       	ldi	r18, 0x00	; 0
    4736:	3f ef       	ldi	r19, 0xFF	; 255
    4738:	4f e7       	ldi	r20, 0x7F	; 127
    473a:	57 e4       	ldi	r21, 0x47	; 71
    473c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4740:	18 16       	cp	r1, r24
    4742:	4c f5       	brge	.+82     	; 0x4796 <Clock_Set_Dhuhr+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4744:	6b 85       	ldd	r22, Y+11	; 0x0b
    4746:	7c 85       	ldd	r23, Y+12	; 0x0c
    4748:	8d 85       	ldd	r24, Y+13	; 0x0d
    474a:	9e 85       	ldd	r25, Y+14	; 0x0e
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	40 e2       	ldi	r20, 0x20	; 32
    4752:	51 e4       	ldi	r21, 0x41	; 65
    4754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	bc 01       	movw	r22, r24
    475e:	cd 01       	movw	r24, r26
    4760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4764:	dc 01       	movw	r26, r24
    4766:	cb 01       	movw	r24, r22
    4768:	9e 83       	std	Y+6, r25	; 0x06
    476a:	8d 83       	std	Y+5, r24	; 0x05
    476c:	0f c0       	rjmp	.+30     	; 0x478c <Clock_Set_Dhuhr+0xd4>
    476e:	88 ec       	ldi	r24, 0xC8	; 200
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	9c 83       	std	Y+4, r25	; 0x04
    4774:	8b 83       	std	Y+3, r24	; 0x03
    4776:	8b 81       	ldd	r24, Y+3	; 0x03
    4778:	9c 81       	ldd	r25, Y+4	; 0x04
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	f1 f7       	brne	.-4      	; 0x477a <Clock_Set_Dhuhr+0xc2>
    477e:	9c 83       	std	Y+4, r25	; 0x04
    4780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	01 97       	sbiw	r24, 0x01	; 1
    4788:	9e 83       	std	Y+6, r25	; 0x06
    478a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    478c:	8d 81       	ldd	r24, Y+5	; 0x05
    478e:	9e 81       	ldd	r25, Y+6	; 0x06
    4790:	00 97       	sbiw	r24, 0x00	; 0
    4792:	69 f7       	brne	.-38     	; 0x476e <Clock_Set_Dhuhr+0xb6>
    4794:	14 c0       	rjmp	.+40     	; 0x47be <Clock_Set_Dhuhr+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4796:	6f 81       	ldd	r22, Y+7	; 0x07
    4798:	78 85       	ldd	r23, Y+8	; 0x08
    479a:	89 85       	ldd	r24, Y+9	; 0x09
    479c:	9a 85       	ldd	r25, Y+10	; 0x0a
    479e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	9e 83       	std	Y+6, r25	; 0x06
    47a8:	8d 83       	std	Y+5, r24	; 0x05
    47aa:	8d 81       	ldd	r24, Y+5	; 0x05
    47ac:	9e 81       	ldd	r25, Y+6	; 0x06
    47ae:	9a 83       	std	Y+2, r25	; 0x02
    47b0:	89 83       	std	Y+1, r24	; 0x01
    47b2:	89 81       	ldd	r24, Y+1	; 0x01
    47b4:	9a 81       	ldd	r25, Y+2	; 0x02
    47b6:	01 97       	sbiw	r24, 0x01	; 1
    47b8:	f1 f7       	brne	.-4      	; 0x47b6 <Clock_Set_Dhuhr+0xfe>
    47ba:	9a 83       	std	Y+2, r25	; 0x02
    47bc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    EEPROM_Write_Byte(0b10100000, Clock_Dhuhr_add2, M_data2);
    47be:	80 ea       	ldi	r24, 0xA0	; 160
    47c0:	6a e0       	ldi	r22, 0x0A	; 10
    47c2:	48 89       	ldd	r20, Y+16	; 0x10
    47c4:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
}
    47c8:	60 96       	adiw	r28, 0x10	; 16
    47ca:	0f b6       	in	r0, 0x3f	; 63
    47cc:	f8 94       	cli
    47ce:	de bf       	out	0x3e, r29	; 62
    47d0:	0f be       	out	0x3f, r0	; 63
    47d2:	cd bf       	out	0x3d, r28	; 61
    47d4:	cf 91       	pop	r28
    47d6:	df 91       	pop	r29
    47d8:	08 95       	ret

000047da <Clock_Set_Asr>:
void Clock_Set_Asr(u8 H_data1, u8 M_data2)
{
    47da:	df 93       	push	r29
    47dc:	cf 93       	push	r28
    47de:	cd b7       	in	r28, 0x3d	; 61
    47e0:	de b7       	in	r29, 0x3e	; 62
    47e2:	60 97       	sbiw	r28, 0x10	; 16
    47e4:	0f b6       	in	r0, 0x3f	; 63
    47e6:	f8 94       	cli
    47e8:	de bf       	out	0x3e, r29	; 62
    47ea:	0f be       	out	0x3f, r0	; 63
    47ec:	cd bf       	out	0x3d, r28	; 61
    47ee:	8f 87       	std	Y+15, r24	; 0x0f
    47f0:	68 8b       	std	Y+16, r22	; 0x10
    EEPROM_Write_Byte(0b10100000, Clock_Asr_add1, H_data1);
    47f2:	80 ea       	ldi	r24, 0xA0	; 160
    47f4:	6d e0       	ldi	r22, 0x0D	; 13
    47f6:	4f 85       	ldd	r20, Y+15	; 0x0f
    47f8:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	a8 ec       	ldi	r26, 0xC8	; 200
    4802:	b2 e4       	ldi	r27, 0x42	; 66
    4804:	8b 87       	std	Y+11, r24	; 0x0b
    4806:	9c 87       	std	Y+12, r25	; 0x0c
    4808:	ad 87       	std	Y+13, r26	; 0x0d
    480a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480c:	6b 85       	ldd	r22, Y+11	; 0x0b
    480e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4810:	8d 85       	ldd	r24, Y+13	; 0x0d
    4812:	9e 85       	ldd	r25, Y+14	; 0x0e
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	4a ef       	ldi	r20, 0xFA	; 250
    481a:	54 e4       	ldi	r21, 0x44	; 68
    481c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	8f 83       	std	Y+7, r24	; 0x07
    4826:	98 87       	std	Y+8, r25	; 0x08
    4828:	a9 87       	std	Y+9, r26	; 0x09
    482a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    482c:	6f 81       	ldd	r22, Y+7	; 0x07
    482e:	78 85       	ldd	r23, Y+8	; 0x08
    4830:	89 85       	ldd	r24, Y+9	; 0x09
    4832:	9a 85       	ldd	r25, Y+10	; 0x0a
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	40 e8       	ldi	r20, 0x80	; 128
    483a:	5f e3       	ldi	r21, 0x3F	; 63
    483c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4840:	88 23       	and	r24, r24
    4842:	2c f4       	brge	.+10     	; 0x484e <Clock_Set_Asr+0x74>
		__ticks = 1;
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	9e 83       	std	Y+6, r25	; 0x06
    484a:	8d 83       	std	Y+5, r24	; 0x05
    484c:	3f c0       	rjmp	.+126    	; 0x48cc <Clock_Set_Asr+0xf2>
	else if (__tmp > 65535)
    484e:	6f 81       	ldd	r22, Y+7	; 0x07
    4850:	78 85       	ldd	r23, Y+8	; 0x08
    4852:	89 85       	ldd	r24, Y+9	; 0x09
    4854:	9a 85       	ldd	r25, Y+10	; 0x0a
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	3f ef       	ldi	r19, 0xFF	; 255
    485a:	4f e7       	ldi	r20, 0x7F	; 127
    485c:	57 e4       	ldi	r21, 0x47	; 71
    485e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4862:	18 16       	cp	r1, r24
    4864:	4c f5       	brge	.+82     	; 0x48b8 <Clock_Set_Asr+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4866:	6b 85       	ldd	r22, Y+11	; 0x0b
    4868:	7c 85       	ldd	r23, Y+12	; 0x0c
    486a:	8d 85       	ldd	r24, Y+13	; 0x0d
    486c:	9e 85       	ldd	r25, Y+14	; 0x0e
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	40 e2       	ldi	r20, 0x20	; 32
    4874:	51 e4       	ldi	r21, 0x41	; 65
    4876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	bc 01       	movw	r22, r24
    4880:	cd 01       	movw	r24, r26
    4882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4886:	dc 01       	movw	r26, r24
    4888:	cb 01       	movw	r24, r22
    488a:	9e 83       	std	Y+6, r25	; 0x06
    488c:	8d 83       	std	Y+5, r24	; 0x05
    488e:	0f c0       	rjmp	.+30     	; 0x48ae <Clock_Set_Asr+0xd4>
    4890:	88 ec       	ldi	r24, 0xC8	; 200
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	9c 83       	std	Y+4, r25	; 0x04
    4896:	8b 83       	std	Y+3, r24	; 0x03
    4898:	8b 81       	ldd	r24, Y+3	; 0x03
    489a:	9c 81       	ldd	r25, Y+4	; 0x04
    489c:	01 97       	sbiw	r24, 0x01	; 1
    489e:	f1 f7       	brne	.-4      	; 0x489c <Clock_Set_Asr+0xc2>
    48a0:	9c 83       	std	Y+4, r25	; 0x04
    48a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a4:	8d 81       	ldd	r24, Y+5	; 0x05
    48a6:	9e 81       	ldd	r25, Y+6	; 0x06
    48a8:	01 97       	sbiw	r24, 0x01	; 1
    48aa:	9e 83       	std	Y+6, r25	; 0x06
    48ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ae:	8d 81       	ldd	r24, Y+5	; 0x05
    48b0:	9e 81       	ldd	r25, Y+6	; 0x06
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	69 f7       	brne	.-38     	; 0x4890 <Clock_Set_Asr+0xb6>
    48b6:	14 c0       	rjmp	.+40     	; 0x48e0 <Clock_Set_Asr+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48b8:	6f 81       	ldd	r22, Y+7	; 0x07
    48ba:	78 85       	ldd	r23, Y+8	; 0x08
    48bc:	89 85       	ldd	r24, Y+9	; 0x09
    48be:	9a 85       	ldd	r25, Y+10	; 0x0a
    48c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	9e 83       	std	Y+6, r25	; 0x06
    48ca:	8d 83       	std	Y+5, r24	; 0x05
    48cc:	8d 81       	ldd	r24, Y+5	; 0x05
    48ce:	9e 81       	ldd	r25, Y+6	; 0x06
    48d0:	9a 83       	std	Y+2, r25	; 0x02
    48d2:	89 83       	std	Y+1, r24	; 0x01
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	9a 81       	ldd	r25, Y+2	; 0x02
    48d8:	01 97       	sbiw	r24, 0x01	; 1
    48da:	f1 f7       	brne	.-4      	; 0x48d8 <Clock_Set_Asr+0xfe>
    48dc:	9a 83       	std	Y+2, r25	; 0x02
    48de:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    EEPROM_Write_Byte(0b10100000, Clock_Asr_add2, M_data2);
    48e0:	80 ea       	ldi	r24, 0xA0	; 160
    48e2:	6e e0       	ldi	r22, 0x0E	; 14
    48e4:	48 89       	ldd	r20, Y+16	; 0x10
    48e6:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
}
    48ea:	60 96       	adiw	r28, 0x10	; 16
    48ec:	0f b6       	in	r0, 0x3f	; 63
    48ee:	f8 94       	cli
    48f0:	de bf       	out	0x3e, r29	; 62
    48f2:	0f be       	out	0x3f, r0	; 63
    48f4:	cd bf       	out	0x3d, r28	; 61
    48f6:	cf 91       	pop	r28
    48f8:	df 91       	pop	r29
    48fa:	08 95       	ret

000048fc <Clock_Set_Maghrib>:
void Clock_Set_Maghrib(u8 H_data1, u8 M_data2)
{
    48fc:	df 93       	push	r29
    48fe:	cf 93       	push	r28
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	60 97       	sbiw	r28, 0x10	; 16
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	8f 87       	std	Y+15, r24	; 0x0f
    4912:	68 8b       	std	Y+16, r22	; 0x10
    EEPROM_Write_Byte(0b10100000, Clock_Maghrib_add1, H_data1);
    4914:	80 ea       	ldi	r24, 0xA0	; 160
    4916:	61 e1       	ldi	r22, 0x11	; 17
    4918:	4f 85       	ldd	r20, Y+15	; 0x0f
    491a:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	a8 ec       	ldi	r26, 0xC8	; 200
    4924:	b2 e4       	ldi	r27, 0x42	; 66
    4926:	8b 87       	std	Y+11, r24	; 0x0b
    4928:	9c 87       	std	Y+12, r25	; 0x0c
    492a:	ad 87       	std	Y+13, r26	; 0x0d
    492c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    492e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4930:	7c 85       	ldd	r23, Y+12	; 0x0c
    4932:	8d 85       	ldd	r24, Y+13	; 0x0d
    4934:	9e 85       	ldd	r25, Y+14	; 0x0e
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	4a ef       	ldi	r20, 0xFA	; 250
    493c:	54 e4       	ldi	r21, 0x44	; 68
    493e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4942:	dc 01       	movw	r26, r24
    4944:	cb 01       	movw	r24, r22
    4946:	8f 83       	std	Y+7, r24	; 0x07
    4948:	98 87       	std	Y+8, r25	; 0x08
    494a:	a9 87       	std	Y+9, r26	; 0x09
    494c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    494e:	6f 81       	ldd	r22, Y+7	; 0x07
    4950:	78 85       	ldd	r23, Y+8	; 0x08
    4952:	89 85       	ldd	r24, Y+9	; 0x09
    4954:	9a 85       	ldd	r25, Y+10	; 0x0a
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	40 e8       	ldi	r20, 0x80	; 128
    495c:	5f e3       	ldi	r21, 0x3F	; 63
    495e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4962:	88 23       	and	r24, r24
    4964:	2c f4       	brge	.+10     	; 0x4970 <Clock_Set_Maghrib+0x74>
		__ticks = 1;
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	9e 83       	std	Y+6, r25	; 0x06
    496c:	8d 83       	std	Y+5, r24	; 0x05
    496e:	3f c0       	rjmp	.+126    	; 0x49ee <Clock_Set_Maghrib+0xf2>
	else if (__tmp > 65535)
    4970:	6f 81       	ldd	r22, Y+7	; 0x07
    4972:	78 85       	ldd	r23, Y+8	; 0x08
    4974:	89 85       	ldd	r24, Y+9	; 0x09
    4976:	9a 85       	ldd	r25, Y+10	; 0x0a
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	3f ef       	ldi	r19, 0xFF	; 255
    497c:	4f e7       	ldi	r20, 0x7F	; 127
    497e:	57 e4       	ldi	r21, 0x47	; 71
    4980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4984:	18 16       	cp	r1, r24
    4986:	4c f5       	brge	.+82     	; 0x49da <Clock_Set_Maghrib+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4988:	6b 85       	ldd	r22, Y+11	; 0x0b
    498a:	7c 85       	ldd	r23, Y+12	; 0x0c
    498c:	8d 85       	ldd	r24, Y+13	; 0x0d
    498e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	40 e2       	ldi	r20, 0x20	; 32
    4996:	51 e4       	ldi	r21, 0x41	; 65
    4998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    499c:	dc 01       	movw	r26, r24
    499e:	cb 01       	movw	r24, r22
    49a0:	bc 01       	movw	r22, r24
    49a2:	cd 01       	movw	r24, r26
    49a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49a8:	dc 01       	movw	r26, r24
    49aa:	cb 01       	movw	r24, r22
    49ac:	9e 83       	std	Y+6, r25	; 0x06
    49ae:	8d 83       	std	Y+5, r24	; 0x05
    49b0:	0f c0       	rjmp	.+30     	; 0x49d0 <Clock_Set_Maghrib+0xd4>
    49b2:	88 ec       	ldi	r24, 0xC8	; 200
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	9c 83       	std	Y+4, r25	; 0x04
    49b8:	8b 83       	std	Y+3, r24	; 0x03
    49ba:	8b 81       	ldd	r24, Y+3	; 0x03
    49bc:	9c 81       	ldd	r25, Y+4	; 0x04
    49be:	01 97       	sbiw	r24, 0x01	; 1
    49c0:	f1 f7       	brne	.-4      	; 0x49be <Clock_Set_Maghrib+0xc2>
    49c2:	9c 83       	std	Y+4, r25	; 0x04
    49c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49c6:	8d 81       	ldd	r24, Y+5	; 0x05
    49c8:	9e 81       	ldd	r25, Y+6	; 0x06
    49ca:	01 97       	sbiw	r24, 0x01	; 1
    49cc:	9e 83       	std	Y+6, r25	; 0x06
    49ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49d0:	8d 81       	ldd	r24, Y+5	; 0x05
    49d2:	9e 81       	ldd	r25, Y+6	; 0x06
    49d4:	00 97       	sbiw	r24, 0x00	; 0
    49d6:	69 f7       	brne	.-38     	; 0x49b2 <Clock_Set_Maghrib+0xb6>
    49d8:	14 c0       	rjmp	.+40     	; 0x4a02 <Clock_Set_Maghrib+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49da:	6f 81       	ldd	r22, Y+7	; 0x07
    49dc:	78 85       	ldd	r23, Y+8	; 0x08
    49de:	89 85       	ldd	r24, Y+9	; 0x09
    49e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49e6:	dc 01       	movw	r26, r24
    49e8:	cb 01       	movw	r24, r22
    49ea:	9e 83       	std	Y+6, r25	; 0x06
    49ec:	8d 83       	std	Y+5, r24	; 0x05
    49ee:	8d 81       	ldd	r24, Y+5	; 0x05
    49f0:	9e 81       	ldd	r25, Y+6	; 0x06
    49f2:	9a 83       	std	Y+2, r25	; 0x02
    49f4:	89 83       	std	Y+1, r24	; 0x01
    49f6:	89 81       	ldd	r24, Y+1	; 0x01
    49f8:	9a 81       	ldd	r25, Y+2	; 0x02
    49fa:	01 97       	sbiw	r24, 0x01	; 1
    49fc:	f1 f7       	brne	.-4      	; 0x49fa <Clock_Set_Maghrib+0xfe>
    49fe:	9a 83       	std	Y+2, r25	; 0x02
    4a00:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    EEPROM_Write_Byte(0b10100000, Clock_Maghrib_add2, M_data2);
    4a02:	80 ea       	ldi	r24, 0xA0	; 160
    4a04:	62 e1       	ldi	r22, 0x12	; 18
    4a06:	48 89       	ldd	r20, Y+16	; 0x10
    4a08:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
}
    4a0c:	60 96       	adiw	r28, 0x10	; 16
    4a0e:	0f b6       	in	r0, 0x3f	; 63
    4a10:	f8 94       	cli
    4a12:	de bf       	out	0x3e, r29	; 62
    4a14:	0f be       	out	0x3f, r0	; 63
    4a16:	cd bf       	out	0x3d, r28	; 61
    4a18:	cf 91       	pop	r28
    4a1a:	df 91       	pop	r29
    4a1c:	08 95       	ret

00004a1e <Clock_Set_Isha>:
void Clock_Set_Isha(u8 H_data1, u8 M_data2)
{
    4a1e:	df 93       	push	r29
    4a20:	cf 93       	push	r28
    4a22:	cd b7       	in	r28, 0x3d	; 61
    4a24:	de b7       	in	r29, 0x3e	; 62
    4a26:	60 97       	sbiw	r28, 0x10	; 16
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	f8 94       	cli
    4a2c:	de bf       	out	0x3e, r29	; 62
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	cd bf       	out	0x3d, r28	; 61
    4a32:	8f 87       	std	Y+15, r24	; 0x0f
    4a34:	68 8b       	std	Y+16, r22	; 0x10
    EEPROM_Write_Byte(0b10100000, Clock_Isha_add1, H_data1);
    4a36:	80 ea       	ldi	r24, 0xA0	; 160
    4a38:	63 e1       	ldi	r22, 0x13	; 19
    4a3a:	4f 85       	ldd	r20, Y+15	; 0x0f
    4a3c:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
    4a40:	80 e0       	ldi	r24, 0x00	; 0
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	a8 ec       	ldi	r26, 0xC8	; 200
    4a46:	b2 e4       	ldi	r27, 0x42	; 66
    4a48:	8b 87       	std	Y+11, r24	; 0x0b
    4a4a:	9c 87       	std	Y+12, r25	; 0x0c
    4a4c:	ad 87       	std	Y+13, r26	; 0x0d
    4a4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	4a ef       	ldi	r20, 0xFA	; 250
    4a5e:	54 e4       	ldi	r21, 0x44	; 68
    4a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	8f 83       	std	Y+7, r24	; 0x07
    4a6a:	98 87       	std	Y+8, r25	; 0x08
    4a6c:	a9 87       	std	Y+9, r26	; 0x09
    4a6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a70:	6f 81       	ldd	r22, Y+7	; 0x07
    4a72:	78 85       	ldd	r23, Y+8	; 0x08
    4a74:	89 85       	ldd	r24, Y+9	; 0x09
    4a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	40 e8       	ldi	r20, 0x80	; 128
    4a7e:	5f e3       	ldi	r21, 0x3F	; 63
    4a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a84:	88 23       	and	r24, r24
    4a86:	2c f4       	brge	.+10     	; 0x4a92 <Clock_Set_Isha+0x74>
		__ticks = 1;
    4a88:	81 e0       	ldi	r24, 0x01	; 1
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	9e 83       	std	Y+6, r25	; 0x06
    4a8e:	8d 83       	std	Y+5, r24	; 0x05
    4a90:	3f c0       	rjmp	.+126    	; 0x4b10 <Clock_Set_Isha+0xf2>
	else if (__tmp > 65535)
    4a92:	6f 81       	ldd	r22, Y+7	; 0x07
    4a94:	78 85       	ldd	r23, Y+8	; 0x08
    4a96:	89 85       	ldd	r24, Y+9	; 0x09
    4a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	3f ef       	ldi	r19, 0xFF	; 255
    4a9e:	4f e7       	ldi	r20, 0x7F	; 127
    4aa0:	57 e4       	ldi	r21, 0x47	; 71
    4aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4aa6:	18 16       	cp	r1, r24
    4aa8:	4c f5       	brge	.+82     	; 0x4afc <Clock_Set_Isha+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	40 e2       	ldi	r20, 0x20	; 32
    4ab8:	51 e4       	ldi	r21, 0x41	; 65
    4aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	9e 83       	std	Y+6, r25	; 0x06
    4ad0:	8d 83       	std	Y+5, r24	; 0x05
    4ad2:	0f c0       	rjmp	.+30     	; 0x4af2 <Clock_Set_Isha+0xd4>
    4ad4:	88 ec       	ldi	r24, 0xC8	; 200
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	9c 83       	std	Y+4, r25	; 0x04
    4ada:	8b 83       	std	Y+3, r24	; 0x03
    4adc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ade:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <Clock_Set_Isha+0xc2>
    4ae4:	9c 83       	std	Y+4, r25	; 0x04
    4ae6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    4aea:	9e 81       	ldd	r25, Y+6	; 0x06
    4aec:	01 97       	sbiw	r24, 0x01	; 1
    4aee:	9e 83       	std	Y+6, r25	; 0x06
    4af0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af2:	8d 81       	ldd	r24, Y+5	; 0x05
    4af4:	9e 81       	ldd	r25, Y+6	; 0x06
    4af6:	00 97       	sbiw	r24, 0x00	; 0
    4af8:	69 f7       	brne	.-38     	; 0x4ad4 <Clock_Set_Isha+0xb6>
    4afa:	14 c0       	rjmp	.+40     	; 0x4b24 <Clock_Set_Isha+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afc:	6f 81       	ldd	r22, Y+7	; 0x07
    4afe:	78 85       	ldd	r23, Y+8	; 0x08
    4b00:	89 85       	ldd	r24, Y+9	; 0x09
    4b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	9e 83       	std	Y+6, r25	; 0x06
    4b0e:	8d 83       	std	Y+5, r24	; 0x05
    4b10:	8d 81       	ldd	r24, Y+5	; 0x05
    4b12:	9e 81       	ldd	r25, Y+6	; 0x06
    4b14:	9a 83       	std	Y+2, r25	; 0x02
    4b16:	89 83       	std	Y+1, r24	; 0x01
    4b18:	89 81       	ldd	r24, Y+1	; 0x01
    4b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1c:	01 97       	sbiw	r24, 0x01	; 1
    4b1e:	f1 f7       	brne	.-4      	; 0x4b1c <Clock_Set_Isha+0xfe>
    4b20:	9a 83       	std	Y+2, r25	; 0x02
    4b22:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    EEPROM_Write_Byte(0b10100000, Clock_Isha_add2, M_data2);
    4b24:	80 ea       	ldi	r24, 0xA0	; 160
    4b26:	64 e1       	ldi	r22, 0x14	; 20
    4b28:	48 89       	ldd	r20, Y+16	; 0x10
    4b2a:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
}
    4b2e:	60 96       	adiw	r28, 0x10	; 16
    4b30:	0f b6       	in	r0, 0x3f	; 63
    4b32:	f8 94       	cli
    4b34:	de bf       	out	0x3e, r29	; 62
    4b36:	0f be       	out	0x3f, r0	; 63
    4b38:	cd bf       	out	0x3d, r28	; 61
    4b3a:	cf 91       	pop	r28
    4b3c:	df 91       	pop	r29
    4b3e:	08 95       	ret

00004b40 <Clock_Get_Hour>:

u16 Clock_Get_Hour()
{
    4b40:	df 93       	push	r29
    4b42:	cf 93       	push	r28
    4b44:	cd b7       	in	r28, 0x3d	; 61
    4b46:	de b7       	in	r29, 0x3e	; 62
    4b48:	60 97       	sbiw	r28, 0x10	; 16
    4b4a:	0f b6       	in	r0, 0x3f	; 63
    4b4c:	f8 94       	cli
    4b4e:	de bf       	out	0x3e, r29	; 62
    4b50:	0f be       	out	0x3f, r0	; 63
    4b52:	cd bf       	out	0x3d, r28	; 61
    u8 x = EEPROM_Read_Byte(0b10100000, Clock_Hour_add1);
    4b54:	80 ea       	ldi	r24, 0xA0	; 160
    4b56:	61 e0       	ldi	r22, 0x01	; 1
    4b58:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    4b5c:	88 8b       	std	Y+16, r24	; 0x10
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	a8 ec       	ldi	r26, 0xC8	; 200
    4b64:	b2 e4       	ldi	r27, 0x42	; 66
    4b66:	8b 87       	std	Y+11, r24	; 0x0b
    4b68:	9c 87       	std	Y+12, r25	; 0x0c
    4b6a:	ad 87       	std	Y+13, r26	; 0x0d
    4b6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	4a ef       	ldi	r20, 0xFA	; 250
    4b7c:	54 e4       	ldi	r21, 0x44	; 68
    4b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b82:	dc 01       	movw	r26, r24
    4b84:	cb 01       	movw	r24, r22
    4b86:	8f 83       	std	Y+7, r24	; 0x07
    4b88:	98 87       	std	Y+8, r25	; 0x08
    4b8a:	a9 87       	std	Y+9, r26	; 0x09
    4b8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b90:	78 85       	ldd	r23, Y+8	; 0x08
    4b92:	89 85       	ldd	r24, Y+9	; 0x09
    4b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	40 e8       	ldi	r20, 0x80	; 128
    4b9c:	5f e3       	ldi	r21, 0x3F	; 63
    4b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ba2:	88 23       	and	r24, r24
    4ba4:	2c f4       	brge	.+10     	; 0x4bb0 <Clock_Get_Hour+0x70>
		__ticks = 1;
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	9e 83       	std	Y+6, r25	; 0x06
    4bac:	8d 83       	std	Y+5, r24	; 0x05
    4bae:	3f c0       	rjmp	.+126    	; 0x4c2e <Clock_Get_Hour+0xee>
	else if (__tmp > 65535)
    4bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    4bb2:	78 85       	ldd	r23, Y+8	; 0x08
    4bb4:	89 85       	ldd	r24, Y+9	; 0x09
    4bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	3f ef       	ldi	r19, 0xFF	; 255
    4bbc:	4f e7       	ldi	r20, 0x7F	; 127
    4bbe:	57 e4       	ldi	r21, 0x47	; 71
    4bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bc4:	18 16       	cp	r1, r24
    4bc6:	4c f5       	brge	.+82     	; 0x4c1a <Clock_Get_Hour+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	40 e2       	ldi	r20, 0x20	; 32
    4bd6:	51 e4       	ldi	r21, 0x41	; 65
    4bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	bc 01       	movw	r22, r24
    4be2:	cd 01       	movw	r24, r26
    4be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	9e 83       	std	Y+6, r25	; 0x06
    4bee:	8d 83       	std	Y+5, r24	; 0x05
    4bf0:	0f c0       	rjmp	.+30     	; 0x4c10 <Clock_Get_Hour+0xd0>
    4bf2:	88 ec       	ldi	r24, 0xC8	; 200
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	9c 83       	std	Y+4, r25	; 0x04
    4bf8:	8b 83       	std	Y+3, r24	; 0x03
    4bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    4bfe:	01 97       	sbiw	r24, 0x01	; 1
    4c00:	f1 f7       	brne	.-4      	; 0x4bfe <Clock_Get_Hour+0xbe>
    4c02:	9c 83       	std	Y+4, r25	; 0x04
    4c04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c06:	8d 81       	ldd	r24, Y+5	; 0x05
    4c08:	9e 81       	ldd	r25, Y+6	; 0x06
    4c0a:	01 97       	sbiw	r24, 0x01	; 1
    4c0c:	9e 83       	std	Y+6, r25	; 0x06
    4c0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c10:	8d 81       	ldd	r24, Y+5	; 0x05
    4c12:	9e 81       	ldd	r25, Y+6	; 0x06
    4c14:	00 97       	sbiw	r24, 0x00	; 0
    4c16:	69 f7       	brne	.-38     	; 0x4bf2 <Clock_Get_Hour+0xb2>
    4c18:	14 c0       	rjmp	.+40     	; 0x4c42 <Clock_Get_Hour+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c1c:	78 85       	ldd	r23, Y+8	; 0x08
    4c1e:	89 85       	ldd	r24, Y+9	; 0x09
    4c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c26:	dc 01       	movw	r26, r24
    4c28:	cb 01       	movw	r24, r22
    4c2a:	9e 83       	std	Y+6, r25	; 0x06
    4c2c:	8d 83       	std	Y+5, r24	; 0x05
    4c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c30:	9e 81       	ldd	r25, Y+6	; 0x06
    4c32:	9a 83       	std	Y+2, r25	; 0x02
    4c34:	89 83       	std	Y+1, r24	; 0x01
    4c36:	89 81       	ldd	r24, Y+1	; 0x01
    4c38:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3a:	01 97       	sbiw	r24, 0x01	; 1
    4c3c:	f1 f7       	brne	.-4      	; 0x4c3a <Clock_Get_Hour+0xfa>
    4c3e:	9a 83       	std	Y+2, r25	; 0x02
    4c40:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    u8 y = EEPROM_Read_Byte(0b10100000, Clock_Hour_add2);
    4c42:	80 ea       	ldi	r24, 0xA0	; 160
    4c44:	62 e0       	ldi	r22, 0x02	; 2
    4c46:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    4c4a:	8f 87       	std	Y+15, r24	; 0x0f
    return (x * 100 + y);
    4c4c:	88 89       	ldd	r24, Y+16	; 0x10
    4c4e:	28 2f       	mov	r18, r24
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	84 e6       	ldi	r24, 0x64	; 100
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	a9 01       	movw	r20, r18
    4c58:	48 9f       	mul	r20, r24
    4c5a:	90 01       	movw	r18, r0
    4c5c:	49 9f       	mul	r20, r25
    4c5e:	30 0d       	add	r19, r0
    4c60:	58 9f       	mul	r21, r24
    4c62:	30 0d       	add	r19, r0
    4c64:	11 24       	eor	r1, r1
    4c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c68:	88 2f       	mov	r24, r24
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	82 0f       	add	r24, r18
    4c6e:	93 1f       	adc	r25, r19
}
    4c70:	60 96       	adiw	r28, 0x10	; 16
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	f8 94       	cli
    4c76:	de bf       	out	0x3e, r29	; 62
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	cd bf       	out	0x3d, r28	; 61
    4c7c:	cf 91       	pop	r28
    4c7e:	df 91       	pop	r29
    4c80:	08 95       	ret

00004c82 <Clock_Get_Min>:
u16 Clock_Get_Min()
{
    4c82:	df 93       	push	r29
    4c84:	cf 93       	push	r28
    4c86:	cd b7       	in	r28, 0x3d	; 61
    4c88:	de b7       	in	r29, 0x3e	; 62
    4c8a:	60 97       	sbiw	r28, 0x10	; 16
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	f8 94       	cli
    4c90:	de bf       	out	0x3e, r29	; 62
    4c92:	0f be       	out	0x3f, r0	; 63
    4c94:	cd bf       	out	0x3d, r28	; 61
    u8 x = EEPROM_Read_Byte(0b10100000, Clock_Min_add1);
    4c96:	80 ea       	ldi	r24, 0xA0	; 160
    4c98:	63 e0       	ldi	r22, 0x03	; 3
    4c9a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    4c9e:	88 8b       	std	Y+16, r24	; 0x10
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	a8 ec       	ldi	r26, 0xC8	; 200
    4ca6:	b2 e4       	ldi	r27, 0x42	; 66
    4ca8:	8b 87       	std	Y+11, r24	; 0x0b
    4caa:	9c 87       	std	Y+12, r25	; 0x0c
    4cac:	ad 87       	std	Y+13, r26	; 0x0d
    4cae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	4a ef       	ldi	r20, 0xFA	; 250
    4cbe:	54 e4       	ldi	r21, 0x44	; 68
    4cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	8f 83       	std	Y+7, r24	; 0x07
    4cca:	98 87       	std	Y+8, r25	; 0x08
    4ccc:	a9 87       	std	Y+9, r26	; 0x09
    4cce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    4cd2:	78 85       	ldd	r23, Y+8	; 0x08
    4cd4:	89 85       	ldd	r24, Y+9	; 0x09
    4cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e8       	ldi	r20, 0x80	; 128
    4cde:	5f e3       	ldi	r21, 0x3F	; 63
    4ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ce4:	88 23       	and	r24, r24
    4ce6:	2c f4       	brge	.+10     	; 0x4cf2 <Clock_Get_Min+0x70>
		__ticks = 1;
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	9e 83       	std	Y+6, r25	; 0x06
    4cee:	8d 83       	std	Y+5, r24	; 0x05
    4cf0:	3f c0       	rjmp	.+126    	; 0x4d70 <Clock_Get_Min+0xee>
	else if (__tmp > 65535)
    4cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    4cf4:	78 85       	ldd	r23, Y+8	; 0x08
    4cf6:	89 85       	ldd	r24, Y+9	; 0x09
    4cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	3f ef       	ldi	r19, 0xFF	; 255
    4cfe:	4f e7       	ldi	r20, 0x7F	; 127
    4d00:	57 e4       	ldi	r21, 0x47	; 71
    4d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d06:	18 16       	cp	r1, r24
    4d08:	4c f5       	brge	.+82     	; 0x4d5c <Clock_Get_Min+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e2       	ldi	r20, 0x20	; 32
    4d18:	51 e4       	ldi	r21, 0x41	; 65
    4d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	cb 01       	movw	r24, r22
    4d22:	bc 01       	movw	r22, r24
    4d24:	cd 01       	movw	r24, r26
    4d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	9e 83       	std	Y+6, r25	; 0x06
    4d30:	8d 83       	std	Y+5, r24	; 0x05
    4d32:	0f c0       	rjmp	.+30     	; 0x4d52 <Clock_Get_Min+0xd0>
    4d34:	88 ec       	ldi	r24, 0xC8	; 200
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	9c 83       	std	Y+4, r25	; 0x04
    4d3a:	8b 83       	std	Y+3, r24	; 0x03
    4d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d40:	01 97       	sbiw	r24, 0x01	; 1
    4d42:	f1 f7       	brne	.-4      	; 0x4d40 <Clock_Get_Min+0xbe>
    4d44:	9c 83       	std	Y+4, r25	; 0x04
    4d46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d48:	8d 81       	ldd	r24, Y+5	; 0x05
    4d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d4c:	01 97       	sbiw	r24, 0x01	; 1
    4d4e:	9e 83       	std	Y+6, r25	; 0x06
    4d50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d52:	8d 81       	ldd	r24, Y+5	; 0x05
    4d54:	9e 81       	ldd	r25, Y+6	; 0x06
    4d56:	00 97       	sbiw	r24, 0x00	; 0
    4d58:	69 f7       	brne	.-38     	; 0x4d34 <Clock_Get_Min+0xb2>
    4d5a:	14 c0       	rjmp	.+40     	; 0x4d84 <Clock_Get_Min+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4d5e:	78 85       	ldd	r23, Y+8	; 0x08
    4d60:	89 85       	ldd	r24, Y+9	; 0x09
    4d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d68:	dc 01       	movw	r26, r24
    4d6a:	cb 01       	movw	r24, r22
    4d6c:	9e 83       	std	Y+6, r25	; 0x06
    4d6e:	8d 83       	std	Y+5, r24	; 0x05
    4d70:	8d 81       	ldd	r24, Y+5	; 0x05
    4d72:	9e 81       	ldd	r25, Y+6	; 0x06
    4d74:	9a 83       	std	Y+2, r25	; 0x02
    4d76:	89 83       	std	Y+1, r24	; 0x01
    4d78:	89 81       	ldd	r24, Y+1	; 0x01
    4d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d7c:	01 97       	sbiw	r24, 0x01	; 1
    4d7e:	f1 f7       	brne	.-4      	; 0x4d7c <Clock_Get_Min+0xfa>
    4d80:	9a 83       	std	Y+2, r25	; 0x02
    4d82:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    u8 y = EEPROM_Read_Byte(0b10100000, Clock_Min_add2);
    4d84:	80 ea       	ldi	r24, 0xA0	; 160
    4d86:	64 e0       	ldi	r22, 0x04	; 4
    4d88:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    4d8c:	8f 87       	std	Y+15, r24	; 0x0f
    return (x * 100 + y);
    4d8e:	88 89       	ldd	r24, Y+16	; 0x10
    4d90:	28 2f       	mov	r18, r24
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	84 e6       	ldi	r24, 0x64	; 100
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	a9 01       	movw	r20, r18
    4d9a:	48 9f       	mul	r20, r24
    4d9c:	90 01       	movw	r18, r0
    4d9e:	49 9f       	mul	r20, r25
    4da0:	30 0d       	add	r19, r0
    4da2:	58 9f       	mul	r21, r24
    4da4:	30 0d       	add	r19, r0
    4da6:	11 24       	eor	r1, r1
    4da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4daa:	88 2f       	mov	r24, r24
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	82 0f       	add	r24, r18
    4db0:	93 1f       	adc	r25, r19
}
    4db2:	60 96       	adiw	r28, 0x10	; 16
    4db4:	0f b6       	in	r0, 0x3f	; 63
    4db6:	f8 94       	cli
    4db8:	de bf       	out	0x3e, r29	; 62
    4dba:	0f be       	out	0x3f, r0	; 63
    4dbc:	cd bf       	out	0x3d, r28	; 61
    4dbe:	cf 91       	pop	r28
    4dc0:	df 91       	pop	r29
    4dc2:	08 95       	ret

00004dc4 <Clock_Get_Fajr>:
u16 Clock_Get_Fajr()
{
    4dc4:	df 93       	push	r29
    4dc6:	cf 93       	push	r28
    4dc8:	cd b7       	in	r28, 0x3d	; 61
    4dca:	de b7       	in	r29, 0x3e	; 62
    4dcc:	60 97       	sbiw	r28, 0x10	; 16
    4dce:	0f b6       	in	r0, 0x3f	; 63
    4dd0:	f8 94       	cli
    4dd2:	de bf       	out	0x3e, r29	; 62
    4dd4:	0f be       	out	0x3f, r0	; 63
    4dd6:	cd bf       	out	0x3d, r28	; 61
    u8 x = EEPROM_Read_Byte(0b10100000, Clock_Fajr_add1);
    4dd8:	80 ea       	ldi	r24, 0xA0	; 160
    4dda:	65 e0       	ldi	r22, 0x05	; 5
    4ddc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    4de0:	88 8b       	std	Y+16, r24	; 0x10
    4de2:	80 e0       	ldi	r24, 0x00	; 0
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	a8 ec       	ldi	r26, 0xC8	; 200
    4de8:	b2 e4       	ldi	r27, 0x42	; 66
    4dea:	8b 87       	std	Y+11, r24	; 0x0b
    4dec:	9c 87       	std	Y+12, r25	; 0x0c
    4dee:	ad 87       	std	Y+13, r26	; 0x0d
    4df0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dfa:	20 e0       	ldi	r18, 0x00	; 0
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	4a ef       	ldi	r20, 0xFA	; 250
    4e00:	54 e4       	ldi	r21, 0x44	; 68
    4e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e06:	dc 01       	movw	r26, r24
    4e08:	cb 01       	movw	r24, r22
    4e0a:	8f 83       	std	Y+7, r24	; 0x07
    4e0c:	98 87       	std	Y+8, r25	; 0x08
    4e0e:	a9 87       	std	Y+9, r26	; 0x09
    4e10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e12:	6f 81       	ldd	r22, Y+7	; 0x07
    4e14:	78 85       	ldd	r23, Y+8	; 0x08
    4e16:	89 85       	ldd	r24, Y+9	; 0x09
    4e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	40 e8       	ldi	r20, 0x80	; 128
    4e20:	5f e3       	ldi	r21, 0x3F	; 63
    4e22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e26:	88 23       	and	r24, r24
    4e28:	2c f4       	brge	.+10     	; 0x4e34 <Clock_Get_Fajr+0x70>
		__ticks = 1;
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	9e 83       	std	Y+6, r25	; 0x06
    4e30:	8d 83       	std	Y+5, r24	; 0x05
    4e32:	3f c0       	rjmp	.+126    	; 0x4eb2 <Clock_Get_Fajr+0xee>
	else if (__tmp > 65535)
    4e34:	6f 81       	ldd	r22, Y+7	; 0x07
    4e36:	78 85       	ldd	r23, Y+8	; 0x08
    4e38:	89 85       	ldd	r24, Y+9	; 0x09
    4e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e3c:	20 e0       	ldi	r18, 0x00	; 0
    4e3e:	3f ef       	ldi	r19, 0xFF	; 255
    4e40:	4f e7       	ldi	r20, 0x7F	; 127
    4e42:	57 e4       	ldi	r21, 0x47	; 71
    4e44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e48:	18 16       	cp	r1, r24
    4e4a:	4c f5       	brge	.+82     	; 0x4e9e <Clock_Get_Fajr+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	40 e2       	ldi	r20, 0x20	; 32
    4e5a:	51 e4       	ldi	r21, 0x41	; 65
    4e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e60:	dc 01       	movw	r26, r24
    4e62:	cb 01       	movw	r24, r22
    4e64:	bc 01       	movw	r22, r24
    4e66:	cd 01       	movw	r24, r26
    4e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e6c:	dc 01       	movw	r26, r24
    4e6e:	cb 01       	movw	r24, r22
    4e70:	9e 83       	std	Y+6, r25	; 0x06
    4e72:	8d 83       	std	Y+5, r24	; 0x05
    4e74:	0f c0       	rjmp	.+30     	; 0x4e94 <Clock_Get_Fajr+0xd0>
    4e76:	88 ec       	ldi	r24, 0xC8	; 200
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	9c 83       	std	Y+4, r25	; 0x04
    4e7c:	8b 83       	std	Y+3, r24	; 0x03
    4e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e80:	9c 81       	ldd	r25, Y+4	; 0x04
    4e82:	01 97       	sbiw	r24, 0x01	; 1
    4e84:	f1 f7       	brne	.-4      	; 0x4e82 <Clock_Get_Fajr+0xbe>
    4e86:	9c 83       	std	Y+4, r25	; 0x04
    4e88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8e:	01 97       	sbiw	r24, 0x01	; 1
    4e90:	9e 83       	std	Y+6, r25	; 0x06
    4e92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e94:	8d 81       	ldd	r24, Y+5	; 0x05
    4e96:	9e 81       	ldd	r25, Y+6	; 0x06
    4e98:	00 97       	sbiw	r24, 0x00	; 0
    4e9a:	69 f7       	brne	.-38     	; 0x4e76 <Clock_Get_Fajr+0xb2>
    4e9c:	14 c0       	rjmp	.+40     	; 0x4ec6 <Clock_Get_Fajr+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4ea0:	78 85       	ldd	r23, Y+8	; 0x08
    4ea2:	89 85       	ldd	r24, Y+9	; 0x09
    4ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	9e 83       	std	Y+6, r25	; 0x06
    4eb0:	8d 83       	std	Y+5, r24	; 0x05
    4eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb6:	9a 83       	std	Y+2, r25	; 0x02
    4eb8:	89 83       	std	Y+1, r24	; 0x01
    4eba:	89 81       	ldd	r24, Y+1	; 0x01
    4ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ebe:	01 97       	sbiw	r24, 0x01	; 1
    4ec0:	f1 f7       	brne	.-4      	; 0x4ebe <Clock_Get_Fajr+0xfa>
    4ec2:	9a 83       	std	Y+2, r25	; 0x02
    4ec4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    u8 y = EEPROM_Read_Byte(0b10100000, Clock_Fajr_add2);
    4ec6:	80 ea       	ldi	r24, 0xA0	; 160
    4ec8:	66 e0       	ldi	r22, 0x06	; 6
    4eca:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    4ece:	8f 87       	std	Y+15, r24	; 0x0f
    return (x * 100 + y);
    4ed0:	88 89       	ldd	r24, Y+16	; 0x10
    4ed2:	28 2f       	mov	r18, r24
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	84 e6       	ldi	r24, 0x64	; 100
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	a9 01       	movw	r20, r18
    4edc:	48 9f       	mul	r20, r24
    4ede:	90 01       	movw	r18, r0
    4ee0:	49 9f       	mul	r20, r25
    4ee2:	30 0d       	add	r19, r0
    4ee4:	58 9f       	mul	r21, r24
    4ee6:	30 0d       	add	r19, r0
    4ee8:	11 24       	eor	r1, r1
    4eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eec:	88 2f       	mov	r24, r24
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	82 0f       	add	r24, r18
    4ef2:	93 1f       	adc	r25, r19
}
    4ef4:	60 96       	adiw	r28, 0x10	; 16
    4ef6:	0f b6       	in	r0, 0x3f	; 63
    4ef8:	f8 94       	cli
    4efa:	de bf       	out	0x3e, r29	; 62
    4efc:	0f be       	out	0x3f, r0	; 63
    4efe:	cd bf       	out	0x3d, r28	; 61
    4f00:	cf 91       	pop	r28
    4f02:	df 91       	pop	r29
    4f04:	08 95       	ret

00004f06 <Clock_Get_Dhuhr>:
u16 Clock_Get_Dhuhr()
{
    4f06:	df 93       	push	r29
    4f08:	cf 93       	push	r28
    4f0a:	cd b7       	in	r28, 0x3d	; 61
    4f0c:	de b7       	in	r29, 0x3e	; 62
    4f0e:	60 97       	sbiw	r28, 0x10	; 16
    4f10:	0f b6       	in	r0, 0x3f	; 63
    4f12:	f8 94       	cli
    4f14:	de bf       	out	0x3e, r29	; 62
    4f16:	0f be       	out	0x3f, r0	; 63
    4f18:	cd bf       	out	0x3d, r28	; 61
    u8 x = EEPROM_Read_Byte(0b10100000, Clock_Dhuhr_add1);
    4f1a:	80 ea       	ldi	r24, 0xA0	; 160
    4f1c:	69 e0       	ldi	r22, 0x09	; 9
    4f1e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    4f22:	88 8b       	std	Y+16, r24	; 0x10
    4f24:	80 e0       	ldi	r24, 0x00	; 0
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	a8 ec       	ldi	r26, 0xC8	; 200
    4f2a:	b2 e4       	ldi	r27, 0x42	; 66
    4f2c:	8b 87       	std	Y+11, r24	; 0x0b
    4f2e:	9c 87       	std	Y+12, r25	; 0x0c
    4f30:	ad 87       	std	Y+13, r26	; 0x0d
    4f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	4a ef       	ldi	r20, 0xFA	; 250
    4f42:	54 e4       	ldi	r21, 0x44	; 68
    4f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	8f 83       	std	Y+7, r24	; 0x07
    4f4e:	98 87       	std	Y+8, r25	; 0x08
    4f50:	a9 87       	std	Y+9, r26	; 0x09
    4f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f54:	6f 81       	ldd	r22, Y+7	; 0x07
    4f56:	78 85       	ldd	r23, Y+8	; 0x08
    4f58:	89 85       	ldd	r24, Y+9	; 0x09
    4f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f5c:	20 e0       	ldi	r18, 0x00	; 0
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	40 e8       	ldi	r20, 0x80	; 128
    4f62:	5f e3       	ldi	r21, 0x3F	; 63
    4f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f68:	88 23       	and	r24, r24
    4f6a:	2c f4       	brge	.+10     	; 0x4f76 <Clock_Get_Dhuhr+0x70>
		__ticks = 1;
    4f6c:	81 e0       	ldi	r24, 0x01	; 1
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	9e 83       	std	Y+6, r25	; 0x06
    4f72:	8d 83       	std	Y+5, r24	; 0x05
    4f74:	3f c0       	rjmp	.+126    	; 0x4ff4 <Clock_Get_Dhuhr+0xee>
	else if (__tmp > 65535)
    4f76:	6f 81       	ldd	r22, Y+7	; 0x07
    4f78:	78 85       	ldd	r23, Y+8	; 0x08
    4f7a:	89 85       	ldd	r24, Y+9	; 0x09
    4f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f7e:	20 e0       	ldi	r18, 0x00	; 0
    4f80:	3f ef       	ldi	r19, 0xFF	; 255
    4f82:	4f e7       	ldi	r20, 0x7F	; 127
    4f84:	57 e4       	ldi	r21, 0x47	; 71
    4f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f8a:	18 16       	cp	r1, r24
    4f8c:	4c f5       	brge	.+82     	; 0x4fe0 <Clock_Get_Dhuhr+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	40 e2       	ldi	r20, 0x20	; 32
    4f9c:	51 e4       	ldi	r21, 0x41	; 65
    4f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	bc 01       	movw	r22, r24
    4fa8:	cd 01       	movw	r24, r26
    4faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fae:	dc 01       	movw	r26, r24
    4fb0:	cb 01       	movw	r24, r22
    4fb2:	9e 83       	std	Y+6, r25	; 0x06
    4fb4:	8d 83       	std	Y+5, r24	; 0x05
    4fb6:	0f c0       	rjmp	.+30     	; 0x4fd6 <Clock_Get_Dhuhr+0xd0>
    4fb8:	88 ec       	ldi	r24, 0xC8	; 200
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	9c 83       	std	Y+4, r25	; 0x04
    4fbe:	8b 83       	std	Y+3, r24	; 0x03
    4fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fc4:	01 97       	sbiw	r24, 0x01	; 1
    4fc6:	f1 f7       	brne	.-4      	; 0x4fc4 <Clock_Get_Dhuhr+0xbe>
    4fc8:	9c 83       	std	Y+4, r25	; 0x04
    4fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    4fce:	9e 81       	ldd	r25, Y+6	; 0x06
    4fd0:	01 97       	sbiw	r24, 0x01	; 1
    4fd2:	9e 83       	std	Y+6, r25	; 0x06
    4fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fda:	00 97       	sbiw	r24, 0x00	; 0
    4fdc:	69 f7       	brne	.-38     	; 0x4fb8 <Clock_Get_Dhuhr+0xb2>
    4fde:	14 c0       	rjmp	.+40     	; 0x5008 <Clock_Get_Dhuhr+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    4fe2:	78 85       	ldd	r23, Y+8	; 0x08
    4fe4:	89 85       	ldd	r24, Y+9	; 0x09
    4fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	9e 83       	std	Y+6, r25	; 0x06
    4ff2:	8d 83       	std	Y+5, r24	; 0x05
    4ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff8:	9a 83       	std	Y+2, r25	; 0x02
    4ffa:	89 83       	std	Y+1, r24	; 0x01
    4ffc:	89 81       	ldd	r24, Y+1	; 0x01
    4ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    5000:	01 97       	sbiw	r24, 0x01	; 1
    5002:	f1 f7       	brne	.-4      	; 0x5000 <Clock_Get_Dhuhr+0xfa>
    5004:	9a 83       	std	Y+2, r25	; 0x02
    5006:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    u8 y = EEPROM_Read_Byte(0b10100000, Clock_Dhuhr_add2);
    5008:	80 ea       	ldi	r24, 0xA0	; 160
    500a:	6a e0       	ldi	r22, 0x0A	; 10
    500c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    5010:	8f 87       	std	Y+15, r24	; 0x0f
    return (x * 100 + y);
    5012:	88 89       	ldd	r24, Y+16	; 0x10
    5014:	28 2f       	mov	r18, r24
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	84 e6       	ldi	r24, 0x64	; 100
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	a9 01       	movw	r20, r18
    501e:	48 9f       	mul	r20, r24
    5020:	90 01       	movw	r18, r0
    5022:	49 9f       	mul	r20, r25
    5024:	30 0d       	add	r19, r0
    5026:	58 9f       	mul	r21, r24
    5028:	30 0d       	add	r19, r0
    502a:	11 24       	eor	r1, r1
    502c:	8f 85       	ldd	r24, Y+15	; 0x0f
    502e:	88 2f       	mov	r24, r24
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	82 0f       	add	r24, r18
    5034:	93 1f       	adc	r25, r19
}
    5036:	60 96       	adiw	r28, 0x10	; 16
    5038:	0f b6       	in	r0, 0x3f	; 63
    503a:	f8 94       	cli
    503c:	de bf       	out	0x3e, r29	; 62
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	cd bf       	out	0x3d, r28	; 61
    5042:	cf 91       	pop	r28
    5044:	df 91       	pop	r29
    5046:	08 95       	ret

00005048 <Clock_Get_Asr>:
u16 Clock_Get_Asr()
{
    5048:	df 93       	push	r29
    504a:	cf 93       	push	r28
    504c:	cd b7       	in	r28, 0x3d	; 61
    504e:	de b7       	in	r29, 0x3e	; 62
    5050:	60 97       	sbiw	r28, 0x10	; 16
    5052:	0f b6       	in	r0, 0x3f	; 63
    5054:	f8 94       	cli
    5056:	de bf       	out	0x3e, r29	; 62
    5058:	0f be       	out	0x3f, r0	; 63
    505a:	cd bf       	out	0x3d, r28	; 61
    u8 x = EEPROM_Read_Byte(0b10100000, Clock_Asr_add1);
    505c:	80 ea       	ldi	r24, 0xA0	; 160
    505e:	6d e0       	ldi	r22, 0x0D	; 13
    5060:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    5064:	88 8b       	std	Y+16, r24	; 0x10
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	a8 ec       	ldi	r26, 0xC8	; 200
    506c:	b2 e4       	ldi	r27, 0x42	; 66
    506e:	8b 87       	std	Y+11, r24	; 0x0b
    5070:	9c 87       	std	Y+12, r25	; 0x0c
    5072:	ad 87       	std	Y+13, r26	; 0x0d
    5074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5076:	6b 85       	ldd	r22, Y+11	; 0x0b
    5078:	7c 85       	ldd	r23, Y+12	; 0x0c
    507a:	8d 85       	ldd	r24, Y+13	; 0x0d
    507c:	9e 85       	ldd	r25, Y+14	; 0x0e
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	4a ef       	ldi	r20, 0xFA	; 250
    5084:	54 e4       	ldi	r21, 0x44	; 68
    5086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	8f 83       	std	Y+7, r24	; 0x07
    5090:	98 87       	std	Y+8, r25	; 0x08
    5092:	a9 87       	std	Y+9, r26	; 0x09
    5094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5096:	6f 81       	ldd	r22, Y+7	; 0x07
    5098:	78 85       	ldd	r23, Y+8	; 0x08
    509a:	89 85       	ldd	r24, Y+9	; 0x09
    509c:	9a 85       	ldd	r25, Y+10	; 0x0a
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	40 e8       	ldi	r20, 0x80	; 128
    50a4:	5f e3       	ldi	r21, 0x3F	; 63
    50a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50aa:	88 23       	and	r24, r24
    50ac:	2c f4       	brge	.+10     	; 0x50b8 <Clock_Get_Asr+0x70>
		__ticks = 1;
    50ae:	81 e0       	ldi	r24, 0x01	; 1
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	9e 83       	std	Y+6, r25	; 0x06
    50b4:	8d 83       	std	Y+5, r24	; 0x05
    50b6:	3f c0       	rjmp	.+126    	; 0x5136 <Clock_Get_Asr+0xee>
	else if (__tmp > 65535)
    50b8:	6f 81       	ldd	r22, Y+7	; 0x07
    50ba:	78 85       	ldd	r23, Y+8	; 0x08
    50bc:	89 85       	ldd	r24, Y+9	; 0x09
    50be:	9a 85       	ldd	r25, Y+10	; 0x0a
    50c0:	20 e0       	ldi	r18, 0x00	; 0
    50c2:	3f ef       	ldi	r19, 0xFF	; 255
    50c4:	4f e7       	ldi	r20, 0x7F	; 127
    50c6:	57 e4       	ldi	r21, 0x47	; 71
    50c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50cc:	18 16       	cp	r1, r24
    50ce:	4c f5       	brge	.+82     	; 0x5122 <Clock_Get_Asr+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    50d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    50d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	40 e2       	ldi	r20, 0x20	; 32
    50de:	51 e4       	ldi	r21, 0x41	; 65
    50e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e4:	dc 01       	movw	r26, r24
    50e6:	cb 01       	movw	r24, r22
    50e8:	bc 01       	movw	r22, r24
    50ea:	cd 01       	movw	r24, r26
    50ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f0:	dc 01       	movw	r26, r24
    50f2:	cb 01       	movw	r24, r22
    50f4:	9e 83       	std	Y+6, r25	; 0x06
    50f6:	8d 83       	std	Y+5, r24	; 0x05
    50f8:	0f c0       	rjmp	.+30     	; 0x5118 <Clock_Get_Asr+0xd0>
    50fa:	88 ec       	ldi	r24, 0xC8	; 200
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	9c 83       	std	Y+4, r25	; 0x04
    5100:	8b 83       	std	Y+3, r24	; 0x03
    5102:	8b 81       	ldd	r24, Y+3	; 0x03
    5104:	9c 81       	ldd	r25, Y+4	; 0x04
    5106:	01 97       	sbiw	r24, 0x01	; 1
    5108:	f1 f7       	brne	.-4      	; 0x5106 <Clock_Get_Asr+0xbe>
    510a:	9c 83       	std	Y+4, r25	; 0x04
    510c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    510e:	8d 81       	ldd	r24, Y+5	; 0x05
    5110:	9e 81       	ldd	r25, Y+6	; 0x06
    5112:	01 97       	sbiw	r24, 0x01	; 1
    5114:	9e 83       	std	Y+6, r25	; 0x06
    5116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5118:	8d 81       	ldd	r24, Y+5	; 0x05
    511a:	9e 81       	ldd	r25, Y+6	; 0x06
    511c:	00 97       	sbiw	r24, 0x00	; 0
    511e:	69 f7       	brne	.-38     	; 0x50fa <Clock_Get_Asr+0xb2>
    5120:	14 c0       	rjmp	.+40     	; 0x514a <Clock_Get_Asr+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5122:	6f 81       	ldd	r22, Y+7	; 0x07
    5124:	78 85       	ldd	r23, Y+8	; 0x08
    5126:	89 85       	ldd	r24, Y+9	; 0x09
    5128:	9a 85       	ldd	r25, Y+10	; 0x0a
    512a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    512e:	dc 01       	movw	r26, r24
    5130:	cb 01       	movw	r24, r22
    5132:	9e 83       	std	Y+6, r25	; 0x06
    5134:	8d 83       	std	Y+5, r24	; 0x05
    5136:	8d 81       	ldd	r24, Y+5	; 0x05
    5138:	9e 81       	ldd	r25, Y+6	; 0x06
    513a:	9a 83       	std	Y+2, r25	; 0x02
    513c:	89 83       	std	Y+1, r24	; 0x01
    513e:	89 81       	ldd	r24, Y+1	; 0x01
    5140:	9a 81       	ldd	r25, Y+2	; 0x02
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	f1 f7       	brne	.-4      	; 0x5142 <Clock_Get_Asr+0xfa>
    5146:	9a 83       	std	Y+2, r25	; 0x02
    5148:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    u8 y = EEPROM_Read_Byte(0b10100000, Clock_Asr_add2);
    514a:	80 ea       	ldi	r24, 0xA0	; 160
    514c:	6e e0       	ldi	r22, 0x0E	; 14
    514e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    5152:	8f 87       	std	Y+15, r24	; 0x0f
    return (x * 100 + y);
    5154:	88 89       	ldd	r24, Y+16	; 0x10
    5156:	28 2f       	mov	r18, r24
    5158:	30 e0       	ldi	r19, 0x00	; 0
    515a:	84 e6       	ldi	r24, 0x64	; 100
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	a9 01       	movw	r20, r18
    5160:	48 9f       	mul	r20, r24
    5162:	90 01       	movw	r18, r0
    5164:	49 9f       	mul	r20, r25
    5166:	30 0d       	add	r19, r0
    5168:	58 9f       	mul	r21, r24
    516a:	30 0d       	add	r19, r0
    516c:	11 24       	eor	r1, r1
    516e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5170:	88 2f       	mov	r24, r24
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	82 0f       	add	r24, r18
    5176:	93 1f       	adc	r25, r19
}
    5178:	60 96       	adiw	r28, 0x10	; 16
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	de bf       	out	0x3e, r29	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	cd bf       	out	0x3d, r28	; 61
    5184:	cf 91       	pop	r28
    5186:	df 91       	pop	r29
    5188:	08 95       	ret

0000518a <Clock_Get_Maghrib>:
u16 Clock_Get_Maghrib()
{
    518a:	df 93       	push	r29
    518c:	cf 93       	push	r28
    518e:	cd b7       	in	r28, 0x3d	; 61
    5190:	de b7       	in	r29, 0x3e	; 62
    5192:	60 97       	sbiw	r28, 0x10	; 16
    5194:	0f b6       	in	r0, 0x3f	; 63
    5196:	f8 94       	cli
    5198:	de bf       	out	0x3e, r29	; 62
    519a:	0f be       	out	0x3f, r0	; 63
    519c:	cd bf       	out	0x3d, r28	; 61
    u8 x = EEPROM_Read_Byte(0b10100000, Clock_Maghrib_add1);
    519e:	80 ea       	ldi	r24, 0xA0	; 160
    51a0:	61 e1       	ldi	r22, 0x11	; 17
    51a2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    51a6:	88 8b       	std	Y+16, r24	; 0x10
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	a8 ec       	ldi	r26, 0xC8	; 200
    51ae:	b2 e4       	ldi	r27, 0x42	; 66
    51b0:	8b 87       	std	Y+11, r24	; 0x0b
    51b2:	9c 87       	std	Y+12, r25	; 0x0c
    51b4:	ad 87       	std	Y+13, r26	; 0x0d
    51b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    51ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    51bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    51be:	9e 85       	ldd	r25, Y+14	; 0x0e
    51c0:	20 e0       	ldi	r18, 0x00	; 0
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	4a ef       	ldi	r20, 0xFA	; 250
    51c6:	54 e4       	ldi	r21, 0x44	; 68
    51c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	8f 83       	std	Y+7, r24	; 0x07
    51d2:	98 87       	std	Y+8, r25	; 0x08
    51d4:	a9 87       	std	Y+9, r26	; 0x09
    51d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51d8:	6f 81       	ldd	r22, Y+7	; 0x07
    51da:	78 85       	ldd	r23, Y+8	; 0x08
    51dc:	89 85       	ldd	r24, Y+9	; 0x09
    51de:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	40 e8       	ldi	r20, 0x80	; 128
    51e6:	5f e3       	ldi	r21, 0x3F	; 63
    51e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51ec:	88 23       	and	r24, r24
    51ee:	2c f4       	brge	.+10     	; 0x51fa <Clock_Get_Maghrib+0x70>
		__ticks = 1;
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	9e 83       	std	Y+6, r25	; 0x06
    51f6:	8d 83       	std	Y+5, r24	; 0x05
    51f8:	3f c0       	rjmp	.+126    	; 0x5278 <Clock_Get_Maghrib+0xee>
	else if (__tmp > 65535)
    51fa:	6f 81       	ldd	r22, Y+7	; 0x07
    51fc:	78 85       	ldd	r23, Y+8	; 0x08
    51fe:	89 85       	ldd	r24, Y+9	; 0x09
    5200:	9a 85       	ldd	r25, Y+10	; 0x0a
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	3f ef       	ldi	r19, 0xFF	; 255
    5206:	4f e7       	ldi	r20, 0x7F	; 127
    5208:	57 e4       	ldi	r21, 0x47	; 71
    520a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    520e:	18 16       	cp	r1, r24
    5210:	4c f5       	brge	.+82     	; 0x5264 <Clock_Get_Maghrib+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5212:	6b 85       	ldd	r22, Y+11	; 0x0b
    5214:	7c 85       	ldd	r23, Y+12	; 0x0c
    5216:	8d 85       	ldd	r24, Y+13	; 0x0d
    5218:	9e 85       	ldd	r25, Y+14	; 0x0e
    521a:	20 e0       	ldi	r18, 0x00	; 0
    521c:	30 e0       	ldi	r19, 0x00	; 0
    521e:	40 e2       	ldi	r20, 0x20	; 32
    5220:	51 e4       	ldi	r21, 0x41	; 65
    5222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	bc 01       	movw	r22, r24
    522c:	cd 01       	movw	r24, r26
    522e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	9e 83       	std	Y+6, r25	; 0x06
    5238:	8d 83       	std	Y+5, r24	; 0x05
    523a:	0f c0       	rjmp	.+30     	; 0x525a <Clock_Get_Maghrib+0xd0>
    523c:	88 ec       	ldi	r24, 0xC8	; 200
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	9c 83       	std	Y+4, r25	; 0x04
    5242:	8b 83       	std	Y+3, r24	; 0x03
    5244:	8b 81       	ldd	r24, Y+3	; 0x03
    5246:	9c 81       	ldd	r25, Y+4	; 0x04
    5248:	01 97       	sbiw	r24, 0x01	; 1
    524a:	f1 f7       	brne	.-4      	; 0x5248 <Clock_Get_Maghrib+0xbe>
    524c:	9c 83       	std	Y+4, r25	; 0x04
    524e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5250:	8d 81       	ldd	r24, Y+5	; 0x05
    5252:	9e 81       	ldd	r25, Y+6	; 0x06
    5254:	01 97       	sbiw	r24, 0x01	; 1
    5256:	9e 83       	std	Y+6, r25	; 0x06
    5258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    525a:	8d 81       	ldd	r24, Y+5	; 0x05
    525c:	9e 81       	ldd	r25, Y+6	; 0x06
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	69 f7       	brne	.-38     	; 0x523c <Clock_Get_Maghrib+0xb2>
    5262:	14 c0       	rjmp	.+40     	; 0x528c <Clock_Get_Maghrib+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5264:	6f 81       	ldd	r22, Y+7	; 0x07
    5266:	78 85       	ldd	r23, Y+8	; 0x08
    5268:	89 85       	ldd	r24, Y+9	; 0x09
    526a:	9a 85       	ldd	r25, Y+10	; 0x0a
    526c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5270:	dc 01       	movw	r26, r24
    5272:	cb 01       	movw	r24, r22
    5274:	9e 83       	std	Y+6, r25	; 0x06
    5276:	8d 83       	std	Y+5, r24	; 0x05
    5278:	8d 81       	ldd	r24, Y+5	; 0x05
    527a:	9e 81       	ldd	r25, Y+6	; 0x06
    527c:	9a 83       	std	Y+2, r25	; 0x02
    527e:	89 83       	std	Y+1, r24	; 0x01
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	9a 81       	ldd	r25, Y+2	; 0x02
    5284:	01 97       	sbiw	r24, 0x01	; 1
    5286:	f1 f7       	brne	.-4      	; 0x5284 <Clock_Get_Maghrib+0xfa>
    5288:	9a 83       	std	Y+2, r25	; 0x02
    528a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    u8 y = EEPROM_Read_Byte(0b10100000, Clock_Maghrib_add2);
    528c:	80 ea       	ldi	r24, 0xA0	; 160
    528e:	62 e1       	ldi	r22, 0x12	; 18
    5290:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    5294:	8f 87       	std	Y+15, r24	; 0x0f
    return (x * 100 + y);
    5296:	88 89       	ldd	r24, Y+16	; 0x10
    5298:	28 2f       	mov	r18, r24
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	84 e6       	ldi	r24, 0x64	; 100
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	a9 01       	movw	r20, r18
    52a2:	48 9f       	mul	r20, r24
    52a4:	90 01       	movw	r18, r0
    52a6:	49 9f       	mul	r20, r25
    52a8:	30 0d       	add	r19, r0
    52aa:	58 9f       	mul	r21, r24
    52ac:	30 0d       	add	r19, r0
    52ae:	11 24       	eor	r1, r1
    52b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    52b2:	88 2f       	mov	r24, r24
    52b4:	90 e0       	ldi	r25, 0x00	; 0
    52b6:	82 0f       	add	r24, r18
    52b8:	93 1f       	adc	r25, r19
}
    52ba:	60 96       	adiw	r28, 0x10	; 16
    52bc:	0f b6       	in	r0, 0x3f	; 63
    52be:	f8 94       	cli
    52c0:	de bf       	out	0x3e, r29	; 62
    52c2:	0f be       	out	0x3f, r0	; 63
    52c4:	cd bf       	out	0x3d, r28	; 61
    52c6:	cf 91       	pop	r28
    52c8:	df 91       	pop	r29
    52ca:	08 95       	ret

000052cc <Clock_Get_Isha>:
u16 Clock_Get_Isha()
{
    52cc:	df 93       	push	r29
    52ce:	cf 93       	push	r28
    52d0:	cd b7       	in	r28, 0x3d	; 61
    52d2:	de b7       	in	r29, 0x3e	; 62
    52d4:	60 97       	sbiw	r28, 0x10	; 16
    52d6:	0f b6       	in	r0, 0x3f	; 63
    52d8:	f8 94       	cli
    52da:	de bf       	out	0x3e, r29	; 62
    52dc:	0f be       	out	0x3f, r0	; 63
    52de:	cd bf       	out	0x3d, r28	; 61
    u8 x = EEPROM_Read_Byte(0b10100000, Clock_Isha_add1);
    52e0:	80 ea       	ldi	r24, 0xA0	; 160
    52e2:	63 e1       	ldi	r22, 0x13	; 19
    52e4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    52e8:	88 8b       	std	Y+16, r24	; 0x10
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	a8 ec       	ldi	r26, 0xC8	; 200
    52f0:	b2 e4       	ldi	r27, 0x42	; 66
    52f2:	8b 87       	std	Y+11, r24	; 0x0b
    52f4:	9c 87       	std	Y+12, r25	; 0x0c
    52f6:	ad 87       	std	Y+13, r26	; 0x0d
    52f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    52fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    52fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5300:	9e 85       	ldd	r25, Y+14	; 0x0e
    5302:	20 e0       	ldi	r18, 0x00	; 0
    5304:	30 e0       	ldi	r19, 0x00	; 0
    5306:	4a ef       	ldi	r20, 0xFA	; 250
    5308:	54 e4       	ldi	r21, 0x44	; 68
    530a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    530e:	dc 01       	movw	r26, r24
    5310:	cb 01       	movw	r24, r22
    5312:	8f 83       	std	Y+7, r24	; 0x07
    5314:	98 87       	std	Y+8, r25	; 0x08
    5316:	a9 87       	std	Y+9, r26	; 0x09
    5318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    531a:	6f 81       	ldd	r22, Y+7	; 0x07
    531c:	78 85       	ldd	r23, Y+8	; 0x08
    531e:	89 85       	ldd	r24, Y+9	; 0x09
    5320:	9a 85       	ldd	r25, Y+10	; 0x0a
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	40 e8       	ldi	r20, 0x80	; 128
    5328:	5f e3       	ldi	r21, 0x3F	; 63
    532a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    532e:	88 23       	and	r24, r24
    5330:	2c f4       	brge	.+10     	; 0x533c <Clock_Get_Isha+0x70>
		__ticks = 1;
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	9e 83       	std	Y+6, r25	; 0x06
    5338:	8d 83       	std	Y+5, r24	; 0x05
    533a:	3f c0       	rjmp	.+126    	; 0x53ba <Clock_Get_Isha+0xee>
	else if (__tmp > 65535)
    533c:	6f 81       	ldd	r22, Y+7	; 0x07
    533e:	78 85       	ldd	r23, Y+8	; 0x08
    5340:	89 85       	ldd	r24, Y+9	; 0x09
    5342:	9a 85       	ldd	r25, Y+10	; 0x0a
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	3f ef       	ldi	r19, 0xFF	; 255
    5348:	4f e7       	ldi	r20, 0x7F	; 127
    534a:	57 e4       	ldi	r21, 0x47	; 71
    534c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5350:	18 16       	cp	r1, r24
    5352:	4c f5       	brge	.+82     	; 0x53a6 <Clock_Get_Isha+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5354:	6b 85       	ldd	r22, Y+11	; 0x0b
    5356:	7c 85       	ldd	r23, Y+12	; 0x0c
    5358:	8d 85       	ldd	r24, Y+13	; 0x0d
    535a:	9e 85       	ldd	r25, Y+14	; 0x0e
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	40 e2       	ldi	r20, 0x20	; 32
    5362:	51 e4       	ldi	r21, 0x41	; 65
    5364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5368:	dc 01       	movw	r26, r24
    536a:	cb 01       	movw	r24, r22
    536c:	bc 01       	movw	r22, r24
    536e:	cd 01       	movw	r24, r26
    5370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	9e 83       	std	Y+6, r25	; 0x06
    537a:	8d 83       	std	Y+5, r24	; 0x05
    537c:	0f c0       	rjmp	.+30     	; 0x539c <Clock_Get_Isha+0xd0>
    537e:	88 ec       	ldi	r24, 0xC8	; 200
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	9c 83       	std	Y+4, r25	; 0x04
    5384:	8b 83       	std	Y+3, r24	; 0x03
    5386:	8b 81       	ldd	r24, Y+3	; 0x03
    5388:	9c 81       	ldd	r25, Y+4	; 0x04
    538a:	01 97       	sbiw	r24, 0x01	; 1
    538c:	f1 f7       	brne	.-4      	; 0x538a <Clock_Get_Isha+0xbe>
    538e:	9c 83       	std	Y+4, r25	; 0x04
    5390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5392:	8d 81       	ldd	r24, Y+5	; 0x05
    5394:	9e 81       	ldd	r25, Y+6	; 0x06
    5396:	01 97       	sbiw	r24, 0x01	; 1
    5398:	9e 83       	std	Y+6, r25	; 0x06
    539a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    539c:	8d 81       	ldd	r24, Y+5	; 0x05
    539e:	9e 81       	ldd	r25, Y+6	; 0x06
    53a0:	00 97       	sbiw	r24, 0x00	; 0
    53a2:	69 f7       	brne	.-38     	; 0x537e <Clock_Get_Isha+0xb2>
    53a4:	14 c0       	rjmp	.+40     	; 0x53ce <Clock_Get_Isha+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53a6:	6f 81       	ldd	r22, Y+7	; 0x07
    53a8:	78 85       	ldd	r23, Y+8	; 0x08
    53aa:	89 85       	ldd	r24, Y+9	; 0x09
    53ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b2:	dc 01       	movw	r26, r24
    53b4:	cb 01       	movw	r24, r22
    53b6:	9e 83       	std	Y+6, r25	; 0x06
    53b8:	8d 83       	std	Y+5, r24	; 0x05
    53ba:	8d 81       	ldd	r24, Y+5	; 0x05
    53bc:	9e 81       	ldd	r25, Y+6	; 0x06
    53be:	9a 83       	std	Y+2, r25	; 0x02
    53c0:	89 83       	std	Y+1, r24	; 0x01
    53c2:	89 81       	ldd	r24, Y+1	; 0x01
    53c4:	9a 81       	ldd	r25, Y+2	; 0x02
    53c6:	01 97       	sbiw	r24, 0x01	; 1
    53c8:	f1 f7       	brne	.-4      	; 0x53c6 <Clock_Get_Isha+0xfa>
    53ca:	9a 83       	std	Y+2, r25	; 0x02
    53cc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    u8 y = EEPROM_Read_Byte(0b10100000, Clock_Isha_add2);
    53ce:	80 ea       	ldi	r24, 0xA0	; 160
    53d0:	64 e1       	ldi	r22, 0x14	; 20
    53d2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    53d6:	8f 87       	std	Y+15, r24	; 0x0f
    return (x * 100 + y);
    53d8:	88 89       	ldd	r24, Y+16	; 0x10
    53da:	28 2f       	mov	r18, r24
    53dc:	30 e0       	ldi	r19, 0x00	; 0
    53de:	84 e6       	ldi	r24, 0x64	; 100
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	a9 01       	movw	r20, r18
    53e4:	48 9f       	mul	r20, r24
    53e6:	90 01       	movw	r18, r0
    53e8:	49 9f       	mul	r20, r25
    53ea:	30 0d       	add	r19, r0
    53ec:	58 9f       	mul	r21, r24
    53ee:	30 0d       	add	r19, r0
    53f0:	11 24       	eor	r1, r1
    53f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    53f4:	88 2f       	mov	r24, r24
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	82 0f       	add	r24, r18
    53fa:	93 1f       	adc	r25, r19
    53fc:	60 96       	adiw	r28, 0x10	; 16
    53fe:	0f b6       	in	r0, 0x3f	; 63
    5400:	f8 94       	cli
    5402:	de bf       	out	0x3e, r29	; 62
    5404:	0f be       	out	0x3f, r0	; 63
    5406:	cd bf       	out	0x3d, r28	; 61
    5408:	cf 91       	pop	r28
    540a:	df 91       	pop	r29
    540c:	08 95       	ret

0000540e <UART_Init>:
#include "UART.h"
#include "Registers.h"
#include "DIO.h"

void UART_Init(USART_Mode_Select mode,Parity_Mode pmode,Stop_Bit_Select sbit,Character_Size csize,Baud_Rate_Setting brate)
{
    540e:	0f 93       	push	r16
    5410:	df 93       	push	r29
    5412:	cf 93       	push	r28
    5414:	cd b7       	in	r28, 0x3d	; 61
    5416:	de b7       	in	r29, 0x3e	; 62
    5418:	2b 97       	sbiw	r28, 0x0b	; 11
    541a:	0f b6       	in	r0, 0x3f	; 63
    541c:	f8 94       	cli
    541e:	de bf       	out	0x3e, r29	; 62
    5420:	0f be       	out	0x3f, r0	; 63
    5422:	cd bf       	out	0x3d, r28	; 61
    5424:	89 83       	std	Y+1, r24	; 0x01
    5426:	6a 83       	std	Y+2, r22	; 0x02
    5428:	4b 83       	std	Y+3, r20	; 0x03
    542a:	2c 83       	std	Y+4, r18	; 0x04
    542c:	0d 83       	std	Y+5, r16	; 0x05
    SET_BIT(UCSRC, UCSRC_URSEL); // 3shan tekhali uart to play
    542e:	a0 e4       	ldi	r26, 0x40	; 64
    5430:	b0 e0       	ldi	r27, 0x00	; 0
    5432:	e0 e4       	ldi	r30, 0x40	; 64
    5434:	f0 e0       	ldi	r31, 0x00	; 0
    5436:	80 81       	ld	r24, Z
    5438:	80 68       	ori	r24, 0x80	; 128
    543a:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTD, DIO_PIN0, DIO_INPUT_FLOATING);
    543c:	83 e0       	ldi	r24, 0x03	; 3
    543e:	60 e0       	ldi	r22, 0x00	; 0
    5440:	40 e0       	ldi	r20, 0x00	; 0
    5442:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);
    5446:	83 e0       	ldi	r24, 0x03	; 3
    5448:	61 e0       	ldi	r22, 0x01	; 1
    544a:	42 e0       	ldi	r20, 0x02	; 2
    544c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>


    if(mode == Asynchronous)
    5450:	89 81       	ldd	r24, Y+1	; 0x01
    5452:	88 23       	and	r24, r24
    5454:	41 f4       	brne	.+16     	; 0x5466 <UART_Init+0x58>
    {
        CLR_BIT(UCSRC,UCSRC_UMSEL);
    5456:	a0 e4       	ldi	r26, 0x40	; 64
    5458:	b0 e0       	ldi	r27, 0x00	; 0
    545a:	e0 e4       	ldi	r30, 0x40	; 64
    545c:	f0 e0       	ldi	r31, 0x00	; 0
    545e:	80 81       	ld	r24, Z
    5460:	8f 7b       	andi	r24, 0xBF	; 191
    5462:	8c 93       	st	X, r24
    5464:	0a c0       	rjmp	.+20     	; 0x547a <UART_Init+0x6c>
    }else if(mode == Synchronous)
    5466:	89 81       	ldd	r24, Y+1	; 0x01
    5468:	81 30       	cpi	r24, 0x01	; 1
    546a:	39 f4       	brne	.+14     	; 0x547a <UART_Init+0x6c>
    {
        SET_BIT(UCSRC,UCSRC_UMSEL);
    546c:	a0 e4       	ldi	r26, 0x40	; 64
    546e:	b0 e0       	ldi	r27, 0x00	; 0
    5470:	e0 e4       	ldi	r30, 0x40	; 64
    5472:	f0 e0       	ldi	r31, 0x00	; 0
    5474:	80 81       	ld	r24, Z
    5476:	80 64       	ori	r24, 0x40	; 64
    5478:	8c 93       	st	X, r24

    }

    switch (pmode)
    547a:	8a 81       	ldd	r24, Y+2	; 0x02
    547c:	28 2f       	mov	r18, r24
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	3b 87       	std	Y+11, r19	; 0x0b
    5482:	2a 87       	std	Y+10, r18	; 0x0a
    5484:	8a 85       	ldd	r24, Y+10	; 0x0a
    5486:	9b 85       	ldd	r25, Y+11	; 0x0b
    5488:	81 30       	cpi	r24, 0x01	; 1
    548a:	91 05       	cpc	r25, r1
    548c:	c1 f0       	breq	.+48     	; 0x54be <UART_Init+0xb0>
    548e:	2a 85       	ldd	r18, Y+10	; 0x0a
    5490:	3b 85       	ldd	r19, Y+11	; 0x0b
    5492:	22 30       	cpi	r18, 0x02	; 2
    5494:	31 05       	cpc	r19, r1
    5496:	11 f1       	breq	.+68     	; 0x54dc <UART_Init+0xce>
    5498:	8a 85       	ldd	r24, Y+10	; 0x0a
    549a:	9b 85       	ldd	r25, Y+11	; 0x0b
    549c:	00 97       	sbiw	r24, 0x00	; 0
    549e:	61 f5       	brne	.+88     	; 0x54f8 <UART_Init+0xea>
    {
    case Disabled_parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    54a0:	a0 e4       	ldi	r26, 0x40	; 64
    54a2:	b0 e0       	ldi	r27, 0x00	; 0
    54a4:	e0 e4       	ldi	r30, 0x40	; 64
    54a6:	f0 e0       	ldi	r31, 0x00	; 0
    54a8:	80 81       	ld	r24, Z
    54aa:	8f 7e       	andi	r24, 0xEF	; 239
    54ac:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UPM1);
    54ae:	a0 e4       	ldi	r26, 0x40	; 64
    54b0:	b0 e0       	ldi	r27, 0x00	; 0
    54b2:	e0 e4       	ldi	r30, 0x40	; 64
    54b4:	f0 e0       	ldi	r31, 0x00	; 0
    54b6:	80 81       	ld	r24, Z
    54b8:	8f 7d       	andi	r24, 0xDF	; 223
    54ba:	8c 93       	st	X, r24
    54bc:	1d c0       	rjmp	.+58     	; 0x54f8 <UART_Init+0xea>
        /* code */
        break;
    case Even_Parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    54be:	a0 e4       	ldi	r26, 0x40	; 64
    54c0:	b0 e0       	ldi	r27, 0x00	; 0
    54c2:	e0 e4       	ldi	r30, 0x40	; 64
    54c4:	f0 e0       	ldi	r31, 0x00	; 0
    54c6:	80 81       	ld	r24, Z
    54c8:	8f 7e       	andi	r24, 0xEF	; 239
    54ca:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    54cc:	a0 e4       	ldi	r26, 0x40	; 64
    54ce:	b0 e0       	ldi	r27, 0x00	; 0
    54d0:	e0 e4       	ldi	r30, 0x40	; 64
    54d2:	f0 e0       	ldi	r31, 0x00	; 0
    54d4:	80 81       	ld	r24, Z
    54d6:	80 62       	ori	r24, 0x20	; 32
    54d8:	8c 93       	st	X, r24
    54da:	0e c0       	rjmp	.+28     	; 0x54f8 <UART_Init+0xea>
        /* code */
        break;
    case Odd_Parity:
        SET_BIT(UCSRC,UCSRC_UPM0);
    54dc:	a0 e4       	ldi	r26, 0x40	; 64
    54de:	b0 e0       	ldi	r27, 0x00	; 0
    54e0:	e0 e4       	ldi	r30, 0x40	; 64
    54e2:	f0 e0       	ldi	r31, 0x00	; 0
    54e4:	80 81       	ld	r24, Z
    54e6:	80 61       	ori	r24, 0x10	; 16
    54e8:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    54ea:	a0 e4       	ldi	r26, 0x40	; 64
    54ec:	b0 e0       	ldi	r27, 0x00	; 0
    54ee:	e0 e4       	ldi	r30, 0x40	; 64
    54f0:	f0 e0       	ldi	r31, 0x00	; 0
    54f2:	80 81       	ld	r24, Z
    54f4:	80 62       	ori	r24, 0x20	; 32
    54f6:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    if(sbit==one_Stop_bit)
    54f8:	8b 81       	ldd	r24, Y+3	; 0x03
    54fa:	88 23       	and	r24, r24
    54fc:	41 f4       	brne	.+16     	; 0x550e <UART_Init+0x100>
    {
        CLR_BIT(UCSRC,UCSRC_USBS);
    54fe:	a0 e4       	ldi	r26, 0x40	; 64
    5500:	b0 e0       	ldi	r27, 0x00	; 0
    5502:	e0 e4       	ldi	r30, 0x40	; 64
    5504:	f0 e0       	ldi	r31, 0x00	; 0
    5506:	80 81       	ld	r24, Z
    5508:	87 7f       	andi	r24, 0xF7	; 247
    550a:	8c 93       	st	X, r24
    550c:	0a c0       	rjmp	.+20     	; 0x5522 <UART_Init+0x114>
    }else if( sbit==two_Stop_bit)
    550e:	8b 81       	ldd	r24, Y+3	; 0x03
    5510:	81 30       	cpi	r24, 0x01	; 1
    5512:	39 f4       	brne	.+14     	; 0x5522 <UART_Init+0x114>
    {
        SET_BIT(UCSRC,UCSRC_USBS);
    5514:	a0 e4       	ldi	r26, 0x40	; 64
    5516:	b0 e0       	ldi	r27, 0x00	; 0
    5518:	e0 e4       	ldi	r30, 0x40	; 64
    551a:	f0 e0       	ldi	r31, 0x00	; 0
    551c:	80 81       	ld	r24, Z
    551e:	88 60       	ori	r24, 0x08	; 8
    5520:	8c 93       	st	X, r24
    }
    switch (csize)
    5522:	8c 81       	ldd	r24, Y+4	; 0x04
    5524:	28 2f       	mov	r18, r24
    5526:	30 e0       	ldi	r19, 0x00	; 0
    5528:	39 87       	std	Y+9, r19	; 0x09
    552a:	28 87       	std	Y+8, r18	; 0x08
    552c:	88 85       	ldd	r24, Y+8	; 0x08
    552e:	99 85       	ldd	r25, Y+9	; 0x09
    5530:	82 30       	cpi	r24, 0x02	; 2
    5532:	91 05       	cpc	r25, r1
    5534:	09 f4       	brne	.+2      	; 0x5538 <UART_Init+0x12a>
    5536:	48 c0       	rjmp	.+144    	; 0x55c8 <UART_Init+0x1ba>
    5538:	28 85       	ldd	r18, Y+8	; 0x08
    553a:	39 85       	ldd	r19, Y+9	; 0x09
    553c:	23 30       	cpi	r18, 0x03	; 3
    553e:	31 05       	cpc	r19, r1
    5540:	54 f4       	brge	.+20     	; 0x5556 <UART_Init+0x148>
    5542:	88 85       	ldd	r24, Y+8	; 0x08
    5544:	99 85       	ldd	r25, Y+9	; 0x09
    5546:	00 97       	sbiw	r24, 0x00	; 0
    5548:	99 f0       	breq	.+38     	; 0x5570 <UART_Init+0x162>
    554a:	28 85       	ldd	r18, Y+8	; 0x08
    554c:	39 85       	ldd	r19, Y+9	; 0x09
    554e:	21 30       	cpi	r18, 0x01	; 1
    5550:	31 05       	cpc	r19, r1
    5552:	21 f1       	breq	.+72     	; 0x559c <UART_Init+0x18e>
    5554:	7a c0       	rjmp	.+244    	; 0x564a <UART_Init+0x23c>
    5556:	88 85       	ldd	r24, Y+8	; 0x08
    5558:	99 85       	ldd	r25, Y+9	; 0x09
    555a:	83 30       	cpi	r24, 0x03	; 3
    555c:	91 05       	cpc	r25, r1
    555e:	09 f4       	brne	.+2      	; 0x5562 <UART_Init+0x154>
    5560:	49 c0       	rjmp	.+146    	; 0x55f4 <UART_Init+0x1e6>
    5562:	28 85       	ldd	r18, Y+8	; 0x08
    5564:	39 85       	ldd	r19, Y+9	; 0x09
    5566:	24 30       	cpi	r18, 0x04	; 4
    5568:	31 05       	cpc	r19, r1
    556a:	09 f4       	brne	.+2      	; 0x556e <UART_Init+0x160>
    556c:	59 c0       	rjmp	.+178    	; 0x5620 <UART_Init+0x212>
    556e:	6d c0       	rjmp	.+218    	; 0x564a <UART_Init+0x23c>
    {
    case _5_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    5570:	a0 e4       	ldi	r26, 0x40	; 64
    5572:	b0 e0       	ldi	r27, 0x00	; 0
    5574:	e0 e4       	ldi	r30, 0x40	; 64
    5576:	f0 e0       	ldi	r31, 0x00	; 0
    5578:	80 81       	ld	r24, Z
    557a:	8d 7f       	andi	r24, 0xFD	; 253
    557c:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    557e:	a0 e4       	ldi	r26, 0x40	; 64
    5580:	b0 e0       	ldi	r27, 0x00	; 0
    5582:	e0 e4       	ldi	r30, 0x40	; 64
    5584:	f0 e0       	ldi	r31, 0x00	; 0
    5586:	80 81       	ld	r24, Z
    5588:	8b 7f       	andi	r24, 0xFB	; 251
    558a:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    558c:	a0 e4       	ldi	r26, 0x40	; 64
    558e:	b0 e0       	ldi	r27, 0x00	; 0
    5590:	e0 e4       	ldi	r30, 0x40	; 64
    5592:	f0 e0       	ldi	r31, 0x00	; 0
    5594:	80 81       	ld	r24, Z
    5596:	8b 7f       	andi	r24, 0xFB	; 251
    5598:	8c 93       	st	X, r24
    559a:	57 c0       	rjmp	.+174    	; 0x564a <UART_Init+0x23c>
        /* code */
        break;
    case _6_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    559c:	a0 e4       	ldi	r26, 0x40	; 64
    559e:	b0 e0       	ldi	r27, 0x00	; 0
    55a0:	e0 e4       	ldi	r30, 0x40	; 64
    55a2:	f0 e0       	ldi	r31, 0x00	; 0
    55a4:	80 81       	ld	r24, Z
    55a6:	8d 7f       	andi	r24, 0xFD	; 253
    55a8:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    55aa:	a0 e4       	ldi	r26, 0x40	; 64
    55ac:	b0 e0       	ldi	r27, 0x00	; 0
    55ae:	e0 e4       	ldi	r30, 0x40	; 64
    55b0:	f0 e0       	ldi	r31, 0x00	; 0
    55b2:	80 81       	ld	r24, Z
    55b4:	8b 7f       	andi	r24, 0xFB	; 251
    55b6:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    55b8:	a0 e4       	ldi	r26, 0x40	; 64
    55ba:	b0 e0       	ldi	r27, 0x00	; 0
    55bc:	e0 e4       	ldi	r30, 0x40	; 64
    55be:	f0 e0       	ldi	r31, 0x00	; 0
    55c0:	80 81       	ld	r24, Z
    55c2:	8b 7f       	andi	r24, 0xFB	; 251
    55c4:	8c 93       	st	X, r24
    55c6:	41 c0       	rjmp	.+130    	; 0x564a <UART_Init+0x23c>
        /* code */
        break;
    case _7_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    55c8:	a0 e4       	ldi	r26, 0x40	; 64
    55ca:	b0 e0       	ldi	r27, 0x00	; 0
    55cc:	e0 e4       	ldi	r30, 0x40	; 64
    55ce:	f0 e0       	ldi	r31, 0x00	; 0
    55d0:	80 81       	ld	r24, Z
    55d2:	8d 7f       	andi	r24, 0xFD	; 253
    55d4:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    55d6:	a0 e4       	ldi	r26, 0x40	; 64
    55d8:	b0 e0       	ldi	r27, 0x00	; 0
    55da:	e0 e4       	ldi	r30, 0x40	; 64
    55dc:	f0 e0       	ldi	r31, 0x00	; 0
    55de:	80 81       	ld	r24, Z
    55e0:	84 60       	ori	r24, 0x04	; 4
    55e2:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    55e4:	a0 e4       	ldi	r26, 0x40	; 64
    55e6:	b0 e0       	ldi	r27, 0x00	; 0
    55e8:	e0 e4       	ldi	r30, 0x40	; 64
    55ea:	f0 e0       	ldi	r31, 0x00	; 0
    55ec:	80 81       	ld	r24, Z
    55ee:	8b 7f       	andi	r24, 0xFB	; 251
    55f0:	8c 93       	st	X, r24
    55f2:	2b c0       	rjmp	.+86     	; 0x564a <UART_Init+0x23c>
        /* code */
        break;
    case _8_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    55f4:	a0 e4       	ldi	r26, 0x40	; 64
    55f6:	b0 e0       	ldi	r27, 0x00	; 0
    55f8:	e0 e4       	ldi	r30, 0x40	; 64
    55fa:	f0 e0       	ldi	r31, 0x00	; 0
    55fc:	80 81       	ld	r24, Z
    55fe:	82 60       	ori	r24, 0x02	; 2
    5600:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    5602:	a0 e4       	ldi	r26, 0x40	; 64
    5604:	b0 e0       	ldi	r27, 0x00	; 0
    5606:	e0 e4       	ldi	r30, 0x40	; 64
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	80 81       	ld	r24, Z
    560c:	84 60       	ori	r24, 0x04	; 4
    560e:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    5610:	a0 e4       	ldi	r26, 0x40	; 64
    5612:	b0 e0       	ldi	r27, 0x00	; 0
    5614:	e0 e4       	ldi	r30, 0x40	; 64
    5616:	f0 e0       	ldi	r31, 0x00	; 0
    5618:	80 81       	ld	r24, Z
    561a:	8b 7f       	andi	r24, 0xFB	; 251
    561c:	8c 93       	st	X, r24
    561e:	15 c0       	rjmp	.+42     	; 0x564a <UART_Init+0x23c>
        /* code */
        break;
    case _9_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    5620:	a0 e4       	ldi	r26, 0x40	; 64
    5622:	b0 e0       	ldi	r27, 0x00	; 0
    5624:	e0 e4       	ldi	r30, 0x40	; 64
    5626:	f0 e0       	ldi	r31, 0x00	; 0
    5628:	80 81       	ld	r24, Z
    562a:	82 60       	ori	r24, 0x02	; 2
    562c:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    562e:	a0 e4       	ldi	r26, 0x40	; 64
    5630:	b0 e0       	ldi	r27, 0x00	; 0
    5632:	e0 e4       	ldi	r30, 0x40	; 64
    5634:	f0 e0       	ldi	r31, 0x00	; 0
    5636:	80 81       	ld	r24, Z
    5638:	84 60       	ori	r24, 0x04	; 4
    563a:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRB_UCSZ2);
    563c:	a0 e4       	ldi	r26, 0x40	; 64
    563e:	b0 e0       	ldi	r27, 0x00	; 0
    5640:	e0 e4       	ldi	r30, 0x40	; 64
    5642:	f0 e0       	ldi	r31, 0x00	; 0
    5644:	80 81       	ld	r24, Z
    5646:	84 60       	ori	r24, 0x04	; 4
    5648:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    switch (brate)
    564a:	8d 81       	ldd	r24, Y+5	; 0x05
    564c:	28 2f       	mov	r18, r24
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	3f 83       	std	Y+7, r19	; 0x07
    5652:	2e 83       	std	Y+6, r18	; 0x06
    5654:	8e 81       	ldd	r24, Y+6	; 0x06
    5656:	9f 81       	ldd	r25, Y+7	; 0x07
    5658:	81 30       	cpi	r24, 0x01	; 1
    565a:	91 05       	cpc	r25, r1
    565c:	71 f0       	breq	.+28     	; 0x567a <UART_Init+0x26c>
    565e:	2e 81       	ldd	r18, Y+6	; 0x06
    5660:	3f 81       	ldd	r19, Y+7	; 0x07
    5662:	22 30       	cpi	r18, 0x02	; 2
    5664:	31 05       	cpc	r19, r1
    5666:	71 f0       	breq	.+28     	; 0x5684 <UART_Init+0x276>
    5668:	8e 81       	ldd	r24, Y+6	; 0x06
    566a:	9f 81       	ldd	r25, Y+7	; 0x07
    566c:	00 97       	sbiw	r24, 0x00	; 0
    566e:	71 f4       	brne	.+28     	; 0x568c <UART_Init+0x27e>
    {
    case _2400:
        UBRRL=416;
    5670:	e9 e2       	ldi	r30, 0x29	; 41
    5672:	f0 e0       	ldi	r31, 0x00	; 0
    5674:	80 ea       	ldi	r24, 0xA0	; 160
    5676:	80 83       	st	Z, r24
    5678:	09 c0       	rjmp	.+18     	; 0x568c <UART_Init+0x27e>
        /* code */
        break;
    case _4800:
        UBRRL=207;
    567a:	e9 e2       	ldi	r30, 0x29	; 41
    567c:	f0 e0       	ldi	r31, 0x00	; 0
    567e:	8f ec       	ldi	r24, 0xCF	; 207
    5680:	80 83       	st	Z, r24
    5682:	04 c0       	rjmp	.+8      	; 0x568c <UART_Init+0x27e>
        /* code */
        break;
    case _9600:
        UBRRL=103;
    5684:	e9 e2       	ldi	r30, 0x29	; 41
    5686:	f0 e0       	ldi	r31, 0x00	; 0
    5688:	87 e6       	ldi	r24, 0x67	; 103
    568a:	80 83       	st	Z, r24
        break;
    
    default:
        break;
    }
    SET_BIT(UCSRB,UCSRB_RXEN);
    568c:	aa e2       	ldi	r26, 0x2A	; 42
    568e:	b0 e0       	ldi	r27, 0x00	; 0
    5690:	ea e2       	ldi	r30, 0x2A	; 42
    5692:	f0 e0       	ldi	r31, 0x00	; 0
    5694:	80 81       	ld	r24, Z
    5696:	80 61       	ori	r24, 0x10	; 16
    5698:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    569a:	aa e2       	ldi	r26, 0x2A	; 42
    569c:	b0 e0       	ldi	r27, 0x00	; 0
    569e:	ea e2       	ldi	r30, 0x2A	; 42
    56a0:	f0 e0       	ldi	r31, 0x00	; 0
    56a2:	80 81       	ld	r24, Z
    56a4:	88 60       	ori	r24, 0x08	; 8
    56a6:	8c 93       	st	X, r24
}
    56a8:	2b 96       	adiw	r28, 0x0b	; 11
    56aa:	0f b6       	in	r0, 0x3f	; 63
    56ac:	f8 94       	cli
    56ae:	de bf       	out	0x3e, r29	; 62
    56b0:	0f be       	out	0x3f, r0	; 63
    56b2:	cd bf       	out	0x3d, r28	; 61
    56b4:	cf 91       	pop	r28
    56b6:	df 91       	pop	r29
    56b8:	0f 91       	pop	r16
    56ba:	08 95       	ret

000056bc <UART_Send_Data>:


void UART_Send_Data(u8 data){
    56bc:	df 93       	push	r29
    56be:	cf 93       	push	r28
    56c0:	0f 92       	push	r0
    56c2:	cd b7       	in	r28, 0x3d	; 61
    56c4:	de b7       	in	r29, 0x3e	; 62
    56c6:	89 83       	std	Y+1, r24	; 0x01
    
    UDR=data;
    56c8:	ec e2       	ldi	r30, 0x2C	; 44
    56ca:	f0 e0       	ldi	r31, 0x00	; 0
    56cc:	89 81       	ldd	r24, Y+1	; 0x01
    56ce:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC)==0);
    56d0:	eb e2       	ldi	r30, 0x2B	; 43
    56d2:	f0 e0       	ldi	r31, 0x00	; 0
    56d4:	80 81       	ld	r24, Z
    56d6:	82 95       	swap	r24
    56d8:	86 95       	lsr	r24
    56da:	86 95       	lsr	r24
    56dc:	83 70       	andi	r24, 0x03	; 3
    56de:	88 2f       	mov	r24, r24
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	81 70       	andi	r24, 0x01	; 1
    56e4:	90 70       	andi	r25, 0x00	; 0
    56e6:	00 97       	sbiw	r24, 0x00	; 0
    56e8:	99 f3       	breq	.-26     	; 0x56d0 <UART_Send_Data+0x14>
}
    56ea:	0f 90       	pop	r0
    56ec:	cf 91       	pop	r28
    56ee:	df 91       	pop	r29
    56f0:	08 95       	ret

000056f2 <Recieve_Data>:

u8 Recieve_Data(){
    56f2:	df 93       	push	r29
    56f4:	cf 93       	push	r28
    56f6:	cd b7       	in	r28, 0x3d	; 61
    56f8:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RCX)==0);
    56fa:	eb e2       	ldi	r30, 0x2B	; 43
    56fc:	f0 e0       	ldi	r31, 0x00	; 0
    56fe:	80 81       	ld	r24, Z
    5700:	88 23       	and	r24, r24
    5702:	dc f7       	brge	.-10     	; 0x56fa <Recieve_Data+0x8>
    return UDR;
    5704:	ec e2       	ldi	r30, 0x2C	; 44
    5706:	f0 e0       	ldi	r31, 0x00	; 0
    5708:	80 81       	ld	r24, Z
}
    570a:	cf 91       	pop	r28
    570c:	df 91       	pop	r29
    570e:	08 95       	ret

00005710 <Adc_Handler>:
u16 result = 0;
u8 Clocktime[2] = {0};
u8 prayerstime[10];

void Adc_Handler(u16 res)
{
    5710:	df 93       	push	r29
    5712:	cf 93       	push	r28
    5714:	00 d0       	rcall	.+0      	; 0x5716 <Adc_Handler+0x6>
    5716:	cd b7       	in	r28, 0x3d	; 61
    5718:	de b7       	in	r29, 0x3e	; 62
    571a:	9a 83       	std	Y+2, r25	; 0x02
    571c:	89 83       	std	Y+1, r24	; 0x01
	result = res;
    571e:	89 81       	ldd	r24, Y+1	; 0x01
    5720:	9a 81       	ldd	r25, Y+2	; 0x02
    5722:	90 93 d3 01 	sts	0x01D3, r25
    5726:	80 93 d2 01 	sts	0x01D2, r24
}
    572a:	0f 90       	pop	r0
    572c:	0f 90       	pop	r0
    572e:	cf 91       	pop	r28
    5730:	df 91       	pop	r29
    5732:	08 95       	ret

00005734 <DIO_FlipPinLevel>:

void DIO_FlipPinLevel(DIO_PortType port, DIO_PinType pin)
{
    5734:	df 93       	push	r29
    5736:	cf 93       	push	r28
    5738:	00 d0       	rcall	.+0      	; 0x573a <DIO_FlipPinLevel+0x6>
    573a:	00 d0       	rcall	.+0      	; 0x573c <DIO_FlipPinLevel+0x8>
    573c:	cd b7       	in	r28, 0x3d	; 61
    573e:	de b7       	in	r29, 0x3e	; 62
    5740:	89 83       	std	Y+1, r24	; 0x01
    5742:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    5744:	89 81       	ldd	r24, Y+1	; 0x01
    5746:	28 2f       	mov	r18, r24
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	3c 83       	std	Y+4, r19	; 0x04
    574c:	2b 83       	std	Y+3, r18	; 0x03
    574e:	8b 81       	ldd	r24, Y+3	; 0x03
    5750:	9c 81       	ldd	r25, Y+4	; 0x04
    5752:	81 30       	cpi	r24, 0x01	; 1
    5754:	91 05       	cpc	r25, r1
    5756:	49 f1       	breq	.+82     	; 0x57aa <DIO_FlipPinLevel+0x76>
    5758:	2b 81       	ldd	r18, Y+3	; 0x03
    575a:	3c 81       	ldd	r19, Y+4	; 0x04
    575c:	22 30       	cpi	r18, 0x02	; 2
    575e:	31 05       	cpc	r19, r1
    5760:	2c f4       	brge	.+10     	; 0x576c <DIO_FlipPinLevel+0x38>
    5762:	8b 81       	ldd	r24, Y+3	; 0x03
    5764:	9c 81       	ldd	r25, Y+4	; 0x04
    5766:	00 97       	sbiw	r24, 0x00	; 0
    5768:	61 f0       	breq	.+24     	; 0x5782 <DIO_FlipPinLevel+0x4e>
    576a:	5a c0       	rjmp	.+180    	; 0x5820 <DIO_FlipPinLevel+0xec>
    576c:	2b 81       	ldd	r18, Y+3	; 0x03
    576e:	3c 81       	ldd	r19, Y+4	; 0x04
    5770:	22 30       	cpi	r18, 0x02	; 2
    5772:	31 05       	cpc	r19, r1
    5774:	71 f1       	breq	.+92     	; 0x57d2 <DIO_FlipPinLevel+0x9e>
    5776:	8b 81       	ldd	r24, Y+3	; 0x03
    5778:	9c 81       	ldd	r25, Y+4	; 0x04
    577a:	83 30       	cpi	r24, 0x03	; 3
    577c:	91 05       	cpc	r25, r1
    577e:	e9 f1       	breq	.+122    	; 0x57fa <DIO_FlipPinLevel+0xc6>
    5780:	4f c0       	rjmp	.+158    	; 0x5820 <DIO_FlipPinLevel+0xec>
	{
	case DIO_PORTA:
		TOG_BIT(PORTA, pin);
    5782:	ab e3       	ldi	r26, 0x3B	; 59
    5784:	b0 e0       	ldi	r27, 0x00	; 0
    5786:	eb e3       	ldi	r30, 0x3B	; 59
    5788:	f0 e0       	ldi	r31, 0x00	; 0
    578a:	80 81       	ld	r24, Z
    578c:	48 2f       	mov	r20, r24
    578e:	8a 81       	ldd	r24, Y+2	; 0x02
    5790:	28 2f       	mov	r18, r24
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	81 e0       	ldi	r24, 0x01	; 1
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	02 2e       	mov	r0, r18
    579a:	02 c0       	rjmp	.+4      	; 0x57a0 <DIO_FlipPinLevel+0x6c>
    579c:	88 0f       	add	r24, r24
    579e:	99 1f       	adc	r25, r25
    57a0:	0a 94       	dec	r0
    57a2:	e2 f7       	brpl	.-8      	; 0x579c <DIO_FlipPinLevel+0x68>
    57a4:	84 27       	eor	r24, r20
    57a6:	8c 93       	st	X, r24
    57a8:	3b c0       	rjmp	.+118    	; 0x5820 <DIO_FlipPinLevel+0xec>
		break;
	case DIO_PORTB:
		TOG_BIT(PORTB, pin);
    57aa:	a8 e3       	ldi	r26, 0x38	; 56
    57ac:	b0 e0       	ldi	r27, 0x00	; 0
    57ae:	e8 e3       	ldi	r30, 0x38	; 56
    57b0:	f0 e0       	ldi	r31, 0x00	; 0
    57b2:	80 81       	ld	r24, Z
    57b4:	48 2f       	mov	r20, r24
    57b6:	8a 81       	ldd	r24, Y+2	; 0x02
    57b8:	28 2f       	mov	r18, r24
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	02 2e       	mov	r0, r18
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <DIO_FlipPinLevel+0x94>
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	0a 94       	dec	r0
    57ca:	e2 f7       	brpl	.-8      	; 0x57c4 <DIO_FlipPinLevel+0x90>
    57cc:	84 27       	eor	r24, r20
    57ce:	8c 93       	st	X, r24
    57d0:	27 c0       	rjmp	.+78     	; 0x5820 <DIO_FlipPinLevel+0xec>
		break;
	case DIO_PORTC:
		TOG_BIT(PORTC, pin);
    57d2:	a5 e3       	ldi	r26, 0x35	; 53
    57d4:	b0 e0       	ldi	r27, 0x00	; 0
    57d6:	e5 e3       	ldi	r30, 0x35	; 53
    57d8:	f0 e0       	ldi	r31, 0x00	; 0
    57da:	80 81       	ld	r24, Z
    57dc:	48 2f       	mov	r20, r24
    57de:	8a 81       	ldd	r24, Y+2	; 0x02
    57e0:	28 2f       	mov	r18, r24
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	81 e0       	ldi	r24, 0x01	; 1
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	02 2e       	mov	r0, r18
    57ea:	02 c0       	rjmp	.+4      	; 0x57f0 <DIO_FlipPinLevel+0xbc>
    57ec:	88 0f       	add	r24, r24
    57ee:	99 1f       	adc	r25, r25
    57f0:	0a 94       	dec	r0
    57f2:	e2 f7       	brpl	.-8      	; 0x57ec <DIO_FlipPinLevel+0xb8>
    57f4:	84 27       	eor	r24, r20
    57f6:	8c 93       	st	X, r24
    57f8:	13 c0       	rjmp	.+38     	; 0x5820 <DIO_FlipPinLevel+0xec>
		break;
	case DIO_PORTD:
		TOG_BIT(PORTD, pin);
    57fa:	a2 e3       	ldi	r26, 0x32	; 50
    57fc:	b0 e0       	ldi	r27, 0x00	; 0
    57fe:	e2 e3       	ldi	r30, 0x32	; 50
    5800:	f0 e0       	ldi	r31, 0x00	; 0
    5802:	80 81       	ld	r24, Z
    5804:	48 2f       	mov	r20, r24
    5806:	8a 81       	ldd	r24, Y+2	; 0x02
    5808:	28 2f       	mov	r18, r24
    580a:	30 e0       	ldi	r19, 0x00	; 0
    580c:	81 e0       	ldi	r24, 0x01	; 1
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	02 2e       	mov	r0, r18
    5812:	02 c0       	rjmp	.+4      	; 0x5818 <DIO_FlipPinLevel+0xe4>
    5814:	88 0f       	add	r24, r24
    5816:	99 1f       	adc	r25, r25
    5818:	0a 94       	dec	r0
    581a:	e2 f7       	brpl	.-8      	; 0x5814 <DIO_FlipPinLevel+0xe0>
    581c:	84 27       	eor	r24, r20
    581e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    5820:	0f 90       	pop	r0
    5822:	0f 90       	pop	r0
    5824:	0f 90       	pop	r0
    5826:	0f 90       	pop	r0
    5828:	cf 91       	pop	r28
    582a:	df 91       	pop	r29
    582c:	08 95       	ret

0000582e <Send_Data_UARTCOMM>:
void Set_Prayer_Time();
u8 Check_For_Password(u8 id, u8 *arr);
void Add_New_password();
void restoredprayerdata();
void Send_Data_UARTCOMM(int count, u8 c)
{
    582e:	0f 93       	push	r16
    5830:	1f 93       	push	r17
    5832:	df 93       	push	r29
    5834:	cf 93       	push	r28
    5836:	cd b7       	in	r28, 0x3d	; 61
    5838:	de b7       	in	r29, 0x3e	; 62
    583a:	ca 54       	subi	r28, 0x4A	; 74
    583c:	d0 40       	sbci	r29, 0x00	; 0
    583e:	0f b6       	in	r0, 0x3f	; 63
    5840:	f8 94       	cli
    5842:	de bf       	out	0x3e, r29	; 62
    5844:	0f be       	out	0x3f, r0	; 63
    5846:	cd bf       	out	0x3d, r28	; 61
    5848:	fe 01       	movw	r30, r28
    584a:	e8 5b       	subi	r30, 0xB8	; 184
    584c:	ff 4f       	sbci	r31, 0xFF	; 255
    584e:	91 83       	std	Z+1, r25	; 0x01
    5850:	80 83       	st	Z, r24
    5852:	fe 01       	movw	r30, r28
    5854:	e6 5b       	subi	r30, 0xB6	; 182
    5856:	ff 4f       	sbci	r31, 0xFF	; 255
    5858:	60 83       	st	Z, r22
	if (c == 1) // clock settings
    585a:	fe 01       	movw	r30, r28
    585c:	e6 5b       	subi	r30, 0xB6	; 182
    585e:	ff 4f       	sbci	r31, 0xFF	; 255
    5860:	80 81       	ld	r24, Z
    5862:	81 30       	cpi	r24, 0x01	; 1
    5864:	09 f0       	breq	.+2      	; 0x5868 <Send_Data_UARTCOMM+0x3a>
    5866:	78 c1       	rjmp	.+752    	; 0x5b58 <Send_Data_UARTCOMM+0x32a>
	{
		UART_Send_Data(5);
    5868:	85 e0       	ldi	r24, 0x05	; 5
    586a:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <UART_Send_Data>
    586e:	fe 01       	movw	r30, r28
    5870:	ed 5b       	subi	r30, 0xBD	; 189
    5872:	ff 4f       	sbci	r31, 0xFF	; 255
    5874:	80 e0       	ldi	r24, 0x00	; 0
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	a8 e4       	ldi	r26, 0x48	; 72
    587a:	b3 e4       	ldi	r27, 0x43	; 67
    587c:	80 83       	st	Z, r24
    587e:	91 83       	std	Z+1, r25	; 0x01
    5880:	a2 83       	std	Z+2, r26	; 0x02
    5882:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5884:	8e 01       	movw	r16, r28
    5886:	01 5c       	subi	r16, 0xC1	; 193
    5888:	1f 4f       	sbci	r17, 0xFF	; 255
    588a:	fe 01       	movw	r30, r28
    588c:	ed 5b       	subi	r30, 0xBD	; 189
    588e:	ff 4f       	sbci	r31, 0xFF	; 255
    5890:	60 81       	ld	r22, Z
    5892:	71 81       	ldd	r23, Z+1	; 0x01
    5894:	82 81       	ldd	r24, Z+2	; 0x02
    5896:	93 81       	ldd	r25, Z+3	; 0x03
    5898:	20 e0       	ldi	r18, 0x00	; 0
    589a:	30 e0       	ldi	r19, 0x00	; 0
    589c:	4a ef       	ldi	r20, 0xFA	; 250
    589e:	54 e4       	ldi	r21, 0x44	; 68
    58a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58a4:	dc 01       	movw	r26, r24
    58a6:	cb 01       	movw	r24, r22
    58a8:	f8 01       	movw	r30, r16
    58aa:	80 83       	st	Z, r24
    58ac:	91 83       	std	Z+1, r25	; 0x01
    58ae:	a2 83       	std	Z+2, r26	; 0x02
    58b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58b2:	fe 01       	movw	r30, r28
    58b4:	ff 96       	adiw	r30, 0x3f	; 63
    58b6:	60 81       	ld	r22, Z
    58b8:	71 81       	ldd	r23, Z+1	; 0x01
    58ba:	82 81       	ldd	r24, Z+2	; 0x02
    58bc:	93 81       	ldd	r25, Z+3	; 0x03
    58be:	20 e0       	ldi	r18, 0x00	; 0
    58c0:	30 e0       	ldi	r19, 0x00	; 0
    58c2:	40 e8       	ldi	r20, 0x80	; 128
    58c4:	5f e3       	ldi	r21, 0x3F	; 63
    58c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    58ca:	88 23       	and	r24, r24
    58cc:	2c f4       	brge	.+10     	; 0x58d8 <Send_Data_UARTCOMM+0xaa>
		__ticks = 1;
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	9e af       	std	Y+62, r25	; 0x3e
    58d4:	8d af       	std	Y+61, r24	; 0x3d
    58d6:	46 c0       	rjmp	.+140    	; 0x5964 <Send_Data_UARTCOMM+0x136>
	else if (__tmp > 65535)
    58d8:	fe 01       	movw	r30, r28
    58da:	ff 96       	adiw	r30, 0x3f	; 63
    58dc:	60 81       	ld	r22, Z
    58de:	71 81       	ldd	r23, Z+1	; 0x01
    58e0:	82 81       	ldd	r24, Z+2	; 0x02
    58e2:	93 81       	ldd	r25, Z+3	; 0x03
    58e4:	20 e0       	ldi	r18, 0x00	; 0
    58e6:	3f ef       	ldi	r19, 0xFF	; 255
    58e8:	4f e7       	ldi	r20, 0x7F	; 127
    58ea:	57 e4       	ldi	r21, 0x47	; 71
    58ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    58f0:	18 16       	cp	r1, r24
    58f2:	64 f5       	brge	.+88     	; 0x594c <Send_Data_UARTCOMM+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58f4:	fe 01       	movw	r30, r28
    58f6:	ed 5b       	subi	r30, 0xBD	; 189
    58f8:	ff 4f       	sbci	r31, 0xFF	; 255
    58fa:	60 81       	ld	r22, Z
    58fc:	71 81       	ldd	r23, Z+1	; 0x01
    58fe:	82 81       	ldd	r24, Z+2	; 0x02
    5900:	93 81       	ldd	r25, Z+3	; 0x03
    5902:	20 e0       	ldi	r18, 0x00	; 0
    5904:	30 e0       	ldi	r19, 0x00	; 0
    5906:	40 e2       	ldi	r20, 0x20	; 32
    5908:	51 e4       	ldi	r21, 0x41	; 65
    590a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    590e:	dc 01       	movw	r26, r24
    5910:	cb 01       	movw	r24, r22
    5912:	bc 01       	movw	r22, r24
    5914:	cd 01       	movw	r24, r26
    5916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    591a:	dc 01       	movw	r26, r24
    591c:	cb 01       	movw	r24, r22
    591e:	9e af       	std	Y+62, r25	; 0x3e
    5920:	8d af       	std	Y+61, r24	; 0x3d
    5922:	0f c0       	rjmp	.+30     	; 0x5942 <Send_Data_UARTCOMM+0x114>
    5924:	88 ec       	ldi	r24, 0xC8	; 200
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	9c af       	std	Y+60, r25	; 0x3c
    592a:	8b af       	std	Y+59, r24	; 0x3b
    592c:	8b ad       	ldd	r24, Y+59	; 0x3b
    592e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5930:	01 97       	sbiw	r24, 0x01	; 1
    5932:	f1 f7       	brne	.-4      	; 0x5930 <Send_Data_UARTCOMM+0x102>
    5934:	9c af       	std	Y+60, r25	; 0x3c
    5936:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5938:	8d ad       	ldd	r24, Y+61	; 0x3d
    593a:	9e ad       	ldd	r25, Y+62	; 0x3e
    593c:	01 97       	sbiw	r24, 0x01	; 1
    593e:	9e af       	std	Y+62, r25	; 0x3e
    5940:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5942:	8d ad       	ldd	r24, Y+61	; 0x3d
    5944:	9e ad       	ldd	r25, Y+62	; 0x3e
    5946:	00 97       	sbiw	r24, 0x00	; 0
    5948:	69 f7       	brne	.-38     	; 0x5924 <Send_Data_UARTCOMM+0xf6>
    594a:	16 c0       	rjmp	.+44     	; 0x5978 <Send_Data_UARTCOMM+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    594c:	fe 01       	movw	r30, r28
    594e:	ff 96       	adiw	r30, 0x3f	; 63
    5950:	60 81       	ld	r22, Z
    5952:	71 81       	ldd	r23, Z+1	; 0x01
    5954:	82 81       	ldd	r24, Z+2	; 0x02
    5956:	93 81       	ldd	r25, Z+3	; 0x03
    5958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    595c:	dc 01       	movw	r26, r24
    595e:	cb 01       	movw	r24, r22
    5960:	9e af       	std	Y+62, r25	; 0x3e
    5962:	8d af       	std	Y+61, r24	; 0x3d
    5964:	8d ad       	ldd	r24, Y+61	; 0x3d
    5966:	9e ad       	ldd	r25, Y+62	; 0x3e
    5968:	9a af       	std	Y+58, r25	; 0x3a
    596a:	89 af       	std	Y+57, r24	; 0x39
    596c:	89 ad       	ldd	r24, Y+57	; 0x39
    596e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5970:	01 97       	sbiw	r24, 0x01	; 1
    5972:	f1 f7       	brne	.-4      	; 0x5970 <Send_Data_UARTCOMM+0x142>
    5974:	9a af       	std	Y+58, r25	; 0x3a
    5976:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		UART_Send_Data(6);
    5978:	86 e0       	ldi	r24, 0x06	; 6
    597a:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <UART_Send_Data>
    597e:	80 e0       	ldi	r24, 0x00	; 0
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	a8 e4       	ldi	r26, 0x48	; 72
    5984:	b3 e4       	ldi	r27, 0x43	; 67
    5986:	8d ab       	std	Y+53, r24	; 0x35
    5988:	9e ab       	std	Y+54, r25	; 0x36
    598a:	af ab       	std	Y+55, r26	; 0x37
    598c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    598e:	6d a9       	ldd	r22, Y+53	; 0x35
    5990:	7e a9       	ldd	r23, Y+54	; 0x36
    5992:	8f a9       	ldd	r24, Y+55	; 0x37
    5994:	98 ad       	ldd	r25, Y+56	; 0x38
    5996:	20 e0       	ldi	r18, 0x00	; 0
    5998:	30 e0       	ldi	r19, 0x00	; 0
    599a:	4a ef       	ldi	r20, 0xFA	; 250
    599c:	54 e4       	ldi	r21, 0x44	; 68
    599e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59a2:	dc 01       	movw	r26, r24
    59a4:	cb 01       	movw	r24, r22
    59a6:	89 ab       	std	Y+49, r24	; 0x31
    59a8:	9a ab       	std	Y+50, r25	; 0x32
    59aa:	ab ab       	std	Y+51, r26	; 0x33
    59ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    59ae:	69 a9       	ldd	r22, Y+49	; 0x31
    59b0:	7a a9       	ldd	r23, Y+50	; 0x32
    59b2:	8b a9       	ldd	r24, Y+51	; 0x33
    59b4:	9c a9       	ldd	r25, Y+52	; 0x34
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	30 e0       	ldi	r19, 0x00	; 0
    59ba:	40 e8       	ldi	r20, 0x80	; 128
    59bc:	5f e3       	ldi	r21, 0x3F	; 63
    59be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    59c2:	88 23       	and	r24, r24
    59c4:	2c f4       	brge	.+10     	; 0x59d0 <Send_Data_UARTCOMM+0x1a2>
		__ticks = 1;
    59c6:	81 e0       	ldi	r24, 0x01	; 1
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	98 ab       	std	Y+48, r25	; 0x30
    59cc:	8f a7       	std	Y+47, r24	; 0x2f
    59ce:	3f c0       	rjmp	.+126    	; 0x5a4e <Send_Data_UARTCOMM+0x220>
	else if (__tmp > 65535)
    59d0:	69 a9       	ldd	r22, Y+49	; 0x31
    59d2:	7a a9       	ldd	r23, Y+50	; 0x32
    59d4:	8b a9       	ldd	r24, Y+51	; 0x33
    59d6:	9c a9       	ldd	r25, Y+52	; 0x34
    59d8:	20 e0       	ldi	r18, 0x00	; 0
    59da:	3f ef       	ldi	r19, 0xFF	; 255
    59dc:	4f e7       	ldi	r20, 0x7F	; 127
    59de:	57 e4       	ldi	r21, 0x47	; 71
    59e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    59e4:	18 16       	cp	r1, r24
    59e6:	4c f5       	brge	.+82     	; 0x5a3a <Send_Data_UARTCOMM+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59e8:	6d a9       	ldd	r22, Y+53	; 0x35
    59ea:	7e a9       	ldd	r23, Y+54	; 0x36
    59ec:	8f a9       	ldd	r24, Y+55	; 0x37
    59ee:	98 ad       	ldd	r25, Y+56	; 0x38
    59f0:	20 e0       	ldi	r18, 0x00	; 0
    59f2:	30 e0       	ldi	r19, 0x00	; 0
    59f4:	40 e2       	ldi	r20, 0x20	; 32
    59f6:	51 e4       	ldi	r21, 0x41	; 65
    59f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59fc:	dc 01       	movw	r26, r24
    59fe:	cb 01       	movw	r24, r22
    5a00:	bc 01       	movw	r22, r24
    5a02:	cd 01       	movw	r24, r26
    5a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a08:	dc 01       	movw	r26, r24
    5a0a:	cb 01       	movw	r24, r22
    5a0c:	98 ab       	std	Y+48, r25	; 0x30
    5a0e:	8f a7       	std	Y+47, r24	; 0x2f
    5a10:	0f c0       	rjmp	.+30     	; 0x5a30 <Send_Data_UARTCOMM+0x202>
    5a12:	88 ec       	ldi	r24, 0xC8	; 200
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	9e a7       	std	Y+46, r25	; 0x2e
    5a18:	8d a7       	std	Y+45, r24	; 0x2d
    5a1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    5a1e:	01 97       	sbiw	r24, 0x01	; 1
    5a20:	f1 f7       	brne	.-4      	; 0x5a1e <Send_Data_UARTCOMM+0x1f0>
    5a22:	9e a7       	std	Y+46, r25	; 0x2e
    5a24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a26:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a28:	98 a9       	ldd	r25, Y+48	; 0x30
    5a2a:	01 97       	sbiw	r24, 0x01	; 1
    5a2c:	98 ab       	std	Y+48, r25	; 0x30
    5a2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a32:	98 a9       	ldd	r25, Y+48	; 0x30
    5a34:	00 97       	sbiw	r24, 0x00	; 0
    5a36:	69 f7       	brne	.-38     	; 0x5a12 <Send_Data_UARTCOMM+0x1e4>
    5a38:	14 c0       	rjmp	.+40     	; 0x5a62 <Send_Data_UARTCOMM+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a3a:	69 a9       	ldd	r22, Y+49	; 0x31
    5a3c:	7a a9       	ldd	r23, Y+50	; 0x32
    5a3e:	8b a9       	ldd	r24, Y+51	; 0x33
    5a40:	9c a9       	ldd	r25, Y+52	; 0x34
    5a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a46:	dc 01       	movw	r26, r24
    5a48:	cb 01       	movw	r24, r22
    5a4a:	98 ab       	std	Y+48, r25	; 0x30
    5a4c:	8f a7       	std	Y+47, r24	; 0x2f
    5a4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a50:	98 a9       	ldd	r25, Y+48	; 0x30
    5a52:	9c a7       	std	Y+44, r25	; 0x2c
    5a54:	8b a7       	std	Y+43, r24	; 0x2b
    5a56:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a58:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a5a:	01 97       	sbiw	r24, 0x01	; 1
    5a5c:	f1 f7       	brne	.-4      	; 0x5a5a <Send_Data_UARTCOMM+0x22c>
    5a5e:	9c a7       	std	Y+44, r25	; 0x2c
    5a60:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		UART_Send_Data(Clocktime[0]);
    5a62:	80 91 d4 01 	lds	r24, 0x01D4
    5a66:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <UART_Send_Data>
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	a8 e4       	ldi	r26, 0x48	; 72
    5a70:	b3 e4       	ldi	r27, 0x43	; 67
    5a72:	8f a3       	std	Y+39, r24	; 0x27
    5a74:	98 a7       	std	Y+40, r25	; 0x28
    5a76:	a9 a7       	std	Y+41, r26	; 0x29
    5a78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    5a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    5a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    5a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a82:	20 e0       	ldi	r18, 0x00	; 0
    5a84:	30 e0       	ldi	r19, 0x00	; 0
    5a86:	4a ef       	ldi	r20, 0xFA	; 250
    5a88:	54 e4       	ldi	r21, 0x44	; 68
    5a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a8e:	dc 01       	movw	r26, r24
    5a90:	cb 01       	movw	r24, r22
    5a92:	8b a3       	std	Y+35, r24	; 0x23
    5a94:	9c a3       	std	Y+36, r25	; 0x24
    5a96:	ad a3       	std	Y+37, r26	; 0x25
    5a98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    5a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    5a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    5aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	40 e8       	ldi	r20, 0x80	; 128
    5aa8:	5f e3       	ldi	r21, 0x3F	; 63
    5aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5aae:	88 23       	and	r24, r24
    5ab0:	2c f4       	brge	.+10     	; 0x5abc <Send_Data_UARTCOMM+0x28e>
		__ticks = 1;
    5ab2:	81 e0       	ldi	r24, 0x01	; 1
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	9a a3       	std	Y+34, r25	; 0x22
    5ab8:	89 a3       	std	Y+33, r24	; 0x21
    5aba:	3f c0       	rjmp	.+126    	; 0x5b3a <Send_Data_UARTCOMM+0x30c>
	else if (__tmp > 65535)
    5abc:	6b a1       	ldd	r22, Y+35	; 0x23
    5abe:	7c a1       	ldd	r23, Y+36	; 0x24
    5ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    5ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    5ac4:	20 e0       	ldi	r18, 0x00	; 0
    5ac6:	3f ef       	ldi	r19, 0xFF	; 255
    5ac8:	4f e7       	ldi	r20, 0x7F	; 127
    5aca:	57 e4       	ldi	r21, 0x47	; 71
    5acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ad0:	18 16       	cp	r1, r24
    5ad2:	4c f5       	brge	.+82     	; 0x5b26 <Send_Data_UARTCOMM+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ad4:	6f a1       	ldd	r22, Y+39	; 0x27
    5ad6:	78 a5       	ldd	r23, Y+40	; 0x28
    5ad8:	89 a5       	ldd	r24, Y+41	; 0x29
    5ada:	9a a5       	ldd	r25, Y+42	; 0x2a
    5adc:	20 e0       	ldi	r18, 0x00	; 0
    5ade:	30 e0       	ldi	r19, 0x00	; 0
    5ae0:	40 e2       	ldi	r20, 0x20	; 32
    5ae2:	51 e4       	ldi	r21, 0x41	; 65
    5ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ae8:	dc 01       	movw	r26, r24
    5aea:	cb 01       	movw	r24, r22
    5aec:	bc 01       	movw	r22, r24
    5aee:	cd 01       	movw	r24, r26
    5af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5af4:	dc 01       	movw	r26, r24
    5af6:	cb 01       	movw	r24, r22
    5af8:	9a a3       	std	Y+34, r25	; 0x22
    5afa:	89 a3       	std	Y+33, r24	; 0x21
    5afc:	0f c0       	rjmp	.+30     	; 0x5b1c <Send_Data_UARTCOMM+0x2ee>
    5afe:	88 ec       	ldi	r24, 0xC8	; 200
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	98 a3       	std	Y+32, r25	; 0x20
    5b04:	8f 8f       	std	Y+31, r24	; 0x1f
    5b06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b08:	98 a1       	ldd	r25, Y+32	; 0x20
    5b0a:	01 97       	sbiw	r24, 0x01	; 1
    5b0c:	f1 f7       	brne	.-4      	; 0x5b0a <Send_Data_UARTCOMM+0x2dc>
    5b0e:	98 a3       	std	Y+32, r25	; 0x20
    5b10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b12:	89 a1       	ldd	r24, Y+33	; 0x21
    5b14:	9a a1       	ldd	r25, Y+34	; 0x22
    5b16:	01 97       	sbiw	r24, 0x01	; 1
    5b18:	9a a3       	std	Y+34, r25	; 0x22
    5b1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    5b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    5b20:	00 97       	sbiw	r24, 0x00	; 0
    5b22:	69 f7       	brne	.-38     	; 0x5afe <Send_Data_UARTCOMM+0x2d0>
    5b24:	14 c0       	rjmp	.+40     	; 0x5b4e <Send_Data_UARTCOMM+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b26:	6b a1       	ldd	r22, Y+35	; 0x23
    5b28:	7c a1       	ldd	r23, Y+36	; 0x24
    5b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    5b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    5b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b32:	dc 01       	movw	r26, r24
    5b34:	cb 01       	movw	r24, r22
    5b36:	9a a3       	std	Y+34, r25	; 0x22
    5b38:	89 a3       	std	Y+33, r24	; 0x21
    5b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    5b3c:	9a a1       	ldd	r25, Y+34	; 0x22
    5b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    5b40:	8d 8f       	std	Y+29, r24	; 0x1d
    5b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b46:	01 97       	sbiw	r24, 0x01	; 1
    5b48:	f1 f7       	brne	.-4      	; 0x5b46 <Send_Data_UARTCOMM+0x318>
    5b4a:	9e 8f       	std	Y+30, r25	; 0x1e
    5b4c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		UART_Send_Data(Clocktime[1]);
    5b4e:	80 91 d5 01 	lds	r24, 0x01D5
    5b52:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <UART_Send_Data>
    5b56:	13 c1       	rjmp	.+550    	; 0x5d7e <Send_Data_UARTCOMM+0x550>
	}
	else if (c == 2)
    5b58:	fe 01       	movw	r30, r28
    5b5a:	e6 5b       	subi	r30, 0xB6	; 182
    5b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5e:	80 81       	ld	r24, Z
    5b60:	82 30       	cpi	r24, 0x02	; 2
    5b62:	09 f0       	breq	.+2      	; 0x5b66 <Send_Data_UARTCOMM+0x338>
    5b64:	0c c1       	rjmp	.+536    	; 0x5d7e <Send_Data_UARTCOMM+0x550>
	{
		UART_Send_Data(6);
    5b66:	86 e0       	ldi	r24, 0x06	; 6
    5b68:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <UART_Send_Data>
    5b6c:	80 e0       	ldi	r24, 0x00	; 0
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	a8 e4       	ldi	r26, 0x48	; 72
    5b72:	b3 e4       	ldi	r27, 0x43	; 67
    5b74:	89 8f       	std	Y+25, r24	; 0x19
    5b76:	9a 8f       	std	Y+26, r25	; 0x1a
    5b78:	ab 8f       	std	Y+27, r26	; 0x1b
    5b7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    5b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b84:	20 e0       	ldi	r18, 0x00	; 0
    5b86:	30 e0       	ldi	r19, 0x00	; 0
    5b88:	4a ef       	ldi	r20, 0xFA	; 250
    5b8a:	54 e4       	ldi	r21, 0x44	; 68
    5b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b90:	dc 01       	movw	r26, r24
    5b92:	cb 01       	movw	r24, r22
    5b94:	8d 8b       	std	Y+21, r24	; 0x15
    5b96:	9e 8b       	std	Y+22, r25	; 0x16
    5b98:	af 8b       	std	Y+23, r26	; 0x17
    5b9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    5b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    5ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
    5ba8:	40 e8       	ldi	r20, 0x80	; 128
    5baa:	5f e3       	ldi	r21, 0x3F	; 63
    5bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5bb0:	88 23       	and	r24, r24
    5bb2:	2c f4       	brge	.+10     	; 0x5bbe <Send_Data_UARTCOMM+0x390>
		__ticks = 1;
    5bb4:	81 e0       	ldi	r24, 0x01	; 1
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	9c 8b       	std	Y+20, r25	; 0x14
    5bba:	8b 8b       	std	Y+19, r24	; 0x13
    5bbc:	3f c0       	rjmp	.+126    	; 0x5c3c <Send_Data_UARTCOMM+0x40e>
	else if (__tmp > 65535)
    5bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    5bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    5bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    5bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    5bc6:	20 e0       	ldi	r18, 0x00	; 0
    5bc8:	3f ef       	ldi	r19, 0xFF	; 255
    5bca:	4f e7       	ldi	r20, 0x7F	; 127
    5bcc:	57 e4       	ldi	r21, 0x47	; 71
    5bce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5bd2:	18 16       	cp	r1, r24
    5bd4:	4c f5       	brge	.+82     	; 0x5c28 <Send_Data_UARTCOMM+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    5bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bde:	20 e0       	ldi	r18, 0x00	; 0
    5be0:	30 e0       	ldi	r19, 0x00	; 0
    5be2:	40 e2       	ldi	r20, 0x20	; 32
    5be4:	51 e4       	ldi	r21, 0x41	; 65
    5be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bea:	dc 01       	movw	r26, r24
    5bec:	cb 01       	movw	r24, r22
    5bee:	bc 01       	movw	r22, r24
    5bf0:	cd 01       	movw	r24, r26
    5bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bf6:	dc 01       	movw	r26, r24
    5bf8:	cb 01       	movw	r24, r22
    5bfa:	9c 8b       	std	Y+20, r25	; 0x14
    5bfc:	8b 8b       	std	Y+19, r24	; 0x13
    5bfe:	0f c0       	rjmp	.+30     	; 0x5c1e <Send_Data_UARTCOMM+0x3f0>
    5c00:	88 ec       	ldi	r24, 0xC8	; 200
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	9a 8b       	std	Y+18, r25	; 0x12
    5c06:	89 8b       	std	Y+17, r24	; 0x11
    5c08:	89 89       	ldd	r24, Y+17	; 0x11
    5c0a:	9a 89       	ldd	r25, Y+18	; 0x12
    5c0c:	01 97       	sbiw	r24, 0x01	; 1
    5c0e:	f1 f7       	brne	.-4      	; 0x5c0c <Send_Data_UARTCOMM+0x3de>
    5c10:	9a 8b       	std	Y+18, r25	; 0x12
    5c12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c14:	8b 89       	ldd	r24, Y+19	; 0x13
    5c16:	9c 89       	ldd	r25, Y+20	; 0x14
    5c18:	01 97       	sbiw	r24, 0x01	; 1
    5c1a:	9c 8b       	std	Y+20, r25	; 0x14
    5c1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    5c20:	9c 89       	ldd	r25, Y+20	; 0x14
    5c22:	00 97       	sbiw	r24, 0x00	; 0
    5c24:	69 f7       	brne	.-38     	; 0x5c00 <Send_Data_UARTCOMM+0x3d2>
    5c26:	14 c0       	rjmp	.+40     	; 0x5c50 <Send_Data_UARTCOMM+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c28:	6d 89       	ldd	r22, Y+21	; 0x15
    5c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    5c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    5c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    5c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c34:	dc 01       	movw	r26, r24
    5c36:	cb 01       	movw	r24, r22
    5c38:	9c 8b       	std	Y+20, r25	; 0x14
    5c3a:	8b 8b       	std	Y+19, r24	; 0x13
    5c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    5c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    5c40:	98 8b       	std	Y+16, r25	; 0x10
    5c42:	8f 87       	std	Y+15, r24	; 0x0f
    5c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c46:	98 89       	ldd	r25, Y+16	; 0x10
    5c48:	01 97       	sbiw	r24, 0x01	; 1
    5c4a:	f1 f7       	brne	.-4      	; 0x5c48 <Send_Data_UARTCOMM+0x41a>
    5c4c:	98 8b       	std	Y+16, r25	; 0x10
    5c4e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		u8 i = 0;
    5c50:	fe 01       	movw	r30, r28
    5c52:	e9 5b       	subi	r30, 0xB9	; 185
    5c54:	ff 4f       	sbci	r31, 0xFF	; 255
    5c56:	10 82       	st	Z, r1

		for (i = 0; i < 10; i++)
    5c58:	fe 01       	movw	r30, r28
    5c5a:	e9 5b       	subi	r30, 0xB9	; 185
    5c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5e:	10 82       	st	Z, r1
    5c60:	87 c0       	rjmp	.+270    	; 0x5d70 <Send_Data_UARTCOMM+0x542>
		{
			UART_Send_Data(prayerstime[i]);
    5c62:	fe 01       	movw	r30, r28
    5c64:	e9 5b       	subi	r30, 0xB9	; 185
    5c66:	ff 4f       	sbci	r31, 0xFF	; 255
    5c68:	80 81       	ld	r24, Z
    5c6a:	88 2f       	mov	r24, r24
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	fc 01       	movw	r30, r24
    5c70:	e3 51       	subi	r30, 0x13	; 19
    5c72:	fe 4f       	sbci	r31, 0xFE	; 254
    5c74:	80 81       	ld	r24, Z
    5c76:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <UART_Send_Data>
    5c7a:	80 e0       	ldi	r24, 0x00	; 0
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	a8 e4       	ldi	r26, 0x48	; 72
    5c80:	b3 e4       	ldi	r27, 0x43	; 67
    5c82:	8b 87       	std	Y+11, r24	; 0x0b
    5c84:	9c 87       	std	Y+12, r25	; 0x0c
    5c86:	ad 87       	std	Y+13, r26	; 0x0d
    5c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c92:	20 e0       	ldi	r18, 0x00	; 0
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	4a ef       	ldi	r20, 0xFA	; 250
    5c98:	54 e4       	ldi	r21, 0x44	; 68
    5c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	cb 01       	movw	r24, r22
    5ca2:	8f 83       	std	Y+7, r24	; 0x07
    5ca4:	98 87       	std	Y+8, r25	; 0x08
    5ca6:	a9 87       	std	Y+9, r26	; 0x09
    5ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5caa:	6f 81       	ldd	r22, Y+7	; 0x07
    5cac:	78 85       	ldd	r23, Y+8	; 0x08
    5cae:	89 85       	ldd	r24, Y+9	; 0x09
    5cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	30 e0       	ldi	r19, 0x00	; 0
    5cb6:	40 e8       	ldi	r20, 0x80	; 128
    5cb8:	5f e3       	ldi	r21, 0x3F	; 63
    5cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5cbe:	88 23       	and	r24, r24
    5cc0:	2c f4       	brge	.+10     	; 0x5ccc <Send_Data_UARTCOMM+0x49e>
		__ticks = 1;
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	9e 83       	std	Y+6, r25	; 0x06
    5cc8:	8d 83       	std	Y+5, r24	; 0x05
    5cca:	3f c0       	rjmp	.+126    	; 0x5d4a <Send_Data_UARTCOMM+0x51c>
	else if (__tmp > 65535)
    5ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    5cce:	78 85       	ldd	r23, Y+8	; 0x08
    5cd0:	89 85       	ldd	r24, Y+9	; 0x09
    5cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cd4:	20 e0       	ldi	r18, 0x00	; 0
    5cd6:	3f ef       	ldi	r19, 0xFF	; 255
    5cd8:	4f e7       	ldi	r20, 0x7F	; 127
    5cda:	57 e4       	ldi	r21, 0x47	; 71
    5cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ce0:	18 16       	cp	r1, r24
    5ce2:	4c f5       	brge	.+82     	; 0x5d36 <Send_Data_UARTCOMM+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cec:	20 e0       	ldi	r18, 0x00	; 0
    5cee:	30 e0       	ldi	r19, 0x00	; 0
    5cf0:	40 e2       	ldi	r20, 0x20	; 32
    5cf2:	51 e4       	ldi	r21, 0x41	; 65
    5cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cf8:	dc 01       	movw	r26, r24
    5cfa:	cb 01       	movw	r24, r22
    5cfc:	bc 01       	movw	r22, r24
    5cfe:	cd 01       	movw	r24, r26
    5d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d04:	dc 01       	movw	r26, r24
    5d06:	cb 01       	movw	r24, r22
    5d08:	9e 83       	std	Y+6, r25	; 0x06
    5d0a:	8d 83       	std	Y+5, r24	; 0x05
    5d0c:	0f c0       	rjmp	.+30     	; 0x5d2c <Send_Data_UARTCOMM+0x4fe>
    5d0e:	88 ec       	ldi	r24, 0xC8	; 200
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	9c 83       	std	Y+4, r25	; 0x04
    5d14:	8b 83       	std	Y+3, r24	; 0x03
    5d16:	8b 81       	ldd	r24, Y+3	; 0x03
    5d18:	9c 81       	ldd	r25, Y+4	; 0x04
    5d1a:	01 97       	sbiw	r24, 0x01	; 1
    5d1c:	f1 f7       	brne	.-4      	; 0x5d1a <Send_Data_UARTCOMM+0x4ec>
    5d1e:	9c 83       	std	Y+4, r25	; 0x04
    5d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d22:	8d 81       	ldd	r24, Y+5	; 0x05
    5d24:	9e 81       	ldd	r25, Y+6	; 0x06
    5d26:	01 97       	sbiw	r24, 0x01	; 1
    5d28:	9e 83       	std	Y+6, r25	; 0x06
    5d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d30:	00 97       	sbiw	r24, 0x00	; 0
    5d32:	69 f7       	brne	.-38     	; 0x5d0e <Send_Data_UARTCOMM+0x4e0>
    5d34:	14 c0       	rjmp	.+40     	; 0x5d5e <Send_Data_UARTCOMM+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d36:	6f 81       	ldd	r22, Y+7	; 0x07
    5d38:	78 85       	ldd	r23, Y+8	; 0x08
    5d3a:	89 85       	ldd	r24, Y+9	; 0x09
    5d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d42:	dc 01       	movw	r26, r24
    5d44:	cb 01       	movw	r24, r22
    5d46:	9e 83       	std	Y+6, r25	; 0x06
    5d48:	8d 83       	std	Y+5, r24	; 0x05
    5d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5d4e:	9a 83       	std	Y+2, r25	; 0x02
    5d50:	89 83       	std	Y+1, r24	; 0x01
    5d52:	89 81       	ldd	r24, Y+1	; 0x01
    5d54:	9a 81       	ldd	r25, Y+2	; 0x02
    5d56:	01 97       	sbiw	r24, 0x01	; 1
    5d58:	f1 f7       	brne	.-4      	; 0x5d56 <Send_Data_UARTCOMM+0x528>
    5d5a:	9a 83       	std	Y+2, r25	; 0x02
    5d5c:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_Send_Data(6);
		_delay_ms(200);
		u8 i = 0;

		for (i = 0; i < 10; i++)
    5d5e:	de 01       	movw	r26, r28
    5d60:	a9 5b       	subi	r26, 0xB9	; 185
    5d62:	bf 4f       	sbci	r27, 0xFF	; 255
    5d64:	fe 01       	movw	r30, r28
    5d66:	e9 5b       	subi	r30, 0xB9	; 185
    5d68:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6a:	80 81       	ld	r24, Z
    5d6c:	8f 5f       	subi	r24, 0xFF	; 255
    5d6e:	8c 93       	st	X, r24
    5d70:	fe 01       	movw	r30, r28
    5d72:	e9 5b       	subi	r30, 0xB9	; 185
    5d74:	ff 4f       	sbci	r31, 0xFF	; 255
    5d76:	80 81       	ld	r24, Z
    5d78:	8a 30       	cpi	r24, 0x0A	; 10
    5d7a:	08 f4       	brcc	.+2      	; 0x5d7e <Send_Data_UARTCOMM+0x550>
    5d7c:	72 cf       	rjmp	.-284    	; 0x5c62 <Send_Data_UARTCOMM+0x434>
		{
			UART_Send_Data(prayerstime[i]);
			_delay_ms(200);
		}
	}
}
    5d7e:	c6 5b       	subi	r28, 0xB6	; 182
    5d80:	df 4f       	sbci	r29, 0xFF	; 255
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	de bf       	out	0x3e, r29	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	cd bf       	out	0x3d, r28	; 61
    5d8c:	cf 91       	pop	r28
    5d8e:	df 91       	pop	r29
    5d90:	1f 91       	pop	r17
    5d92:	0f 91       	pop	r16
    5d94:	08 95       	ret

00005d96 <TimerHandler>:
volatile u16 counter = 0;
u8 wp = 0;
void TimerHandler(void)
{
    5d96:	df 93       	push	r29
    5d98:	cf 93       	push	r28
    5d9a:	cd b7       	in	r28, 0x3d	; 61
    5d9c:	de b7       	in	r29, 0x3e	; 62
	counter++;
    5d9e:	80 91 d6 01 	lds	r24, 0x01D6
    5da2:	90 91 d7 01 	lds	r25, 0x01D7
    5da6:	01 96       	adiw	r24, 0x01	; 1
    5da8:	90 93 d7 01 	sts	0x01D7, r25
    5dac:	80 93 d6 01 	sts	0x01D6, r24
}
    5db0:	cf 91       	pop	r28
    5db2:	df 91       	pop	r29
    5db4:	08 95       	ret

00005db6 <servo90>:
void servo90()
{
    5db6:	df 93       	push	r29
    5db8:	cf 93       	push	r28
    5dba:	00 d0       	rcall	.+0      	; 0x5dbc <servo90+0x6>
    5dbc:	00 d0       	rcall	.+0      	; 0x5dbe <servo90+0x8>
    5dbe:	cd b7       	in	r28, 0x3d	; 61
    5dc0:	de b7       	in	r29, 0x3e	; 62
	Spt_ConfigType config = {SPT_CHANNEL_TIMER1A, SPT_MODE_FAST_PWM, SPT_OUTPUT_CLEAR, SPT_PRESCALER_8};
    5dc2:	81 e0       	ldi	r24, 0x01	; 1
    5dc4:	89 83       	std	Y+1, r24	; 0x01
    5dc6:	1a 82       	std	Y+2, r1	; 0x02
    5dc8:	83 e0       	ldi	r24, 0x03	; 3
    5dca:	8b 83       	std	Y+3, r24	; 0x03
    5dcc:	82 e0       	ldi	r24, 0x02	; 2
    5dce:	8c 83       	std	Y+4, r24	; 0x04
	DIO_SetPinMode(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);
    5dd0:	83 e0       	ldi	r24, 0x03	; 3
    5dd2:	65 e0       	ldi	r22, 0x05	; 5
    5dd4:	42 e0       	ldi	r20, 0x02	; 2
    5dd6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	Spt_Init(&config);
    5dda:	ce 01       	movw	r24, r28
    5ddc:	01 96       	adiw	r24, 0x01	; 1
    5dde:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <Spt_Init>
	Spt_Set_ICR1(20000);
    5de2:	80 e2       	ldi	r24, 0x20	; 32
    5de4:	9e e4       	ldi	r25, 0x4E	; 78
    5de6:	0e 94 b5 21 	call	0x436a	; 0x436a <Spt_Set_ICR1>
	Spt_StartTimer(SPT_CHANNEL_TIMER1A, Get_OCR_Value(180));
    5dea:	84 eb       	ldi	r24, 0xB4	; 180
    5dec:	0e 94 c7 21 	call	0x438e	; 0x438e <Get_OCR_Value>
    5df0:	9c 01       	movw	r18, r24
    5df2:	81 e0       	ldi	r24, 0x01	; 1
    5df4:	b9 01       	movw	r22, r18
    5df6:	0e 94 e6 21 	call	0x43cc	; 0x43cc <Spt_StartTimer>
	DIO_SetPinMode(DIO_PORTD, DIO_PIN5, DIO_INPUT_FLOATING);
    5dfa:	83 e0       	ldi	r24, 0x03	; 3
    5dfc:	65 e0       	ldi	r22, 0x05	; 5
    5dfe:	40 e0       	ldi	r20, 0x00	; 0
    5e00:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
}
    5e04:	0f 90       	pop	r0
    5e06:	0f 90       	pop	r0
    5e08:	0f 90       	pop	r0
    5e0a:	0f 90       	pop	r0
    5e0c:	cf 91       	pop	r28
    5e0e:	df 91       	pop	r29
    5e10:	08 95       	ret

00005e12 <main>:
int main(void)
{
    5e12:	0f 93       	push	r16
    5e14:	df 93       	push	r29
    5e16:	cf 93       	push	r28
    5e18:	cd b7       	in	r28, 0x3d	; 61
    5e1a:	de b7       	in	r29, 0x3e	; 62
    5e1c:	60 97       	sbiw	r28, 0x10	; 16
    5e1e:	0f b6       	in	r0, 0x3f	; 63
    5e20:	f8 94       	cli
    5e22:	de bf       	out	0x3e, r29	; 62
    5e24:	0f be       	out	0x3f, r0	; 63
    5e26:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinMode(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    5e28:	82 e0       	ldi	r24, 0x02	; 2
    5e2a:	62 e0       	ldi	r22, 0x02	; 2
    5e2c:	42 e0       	ldi	r20, 0x02	; 2
    5e2e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTC, DIO_PIN3, DIO_OUTPUT);
    5e32:	82 e0       	ldi	r24, 0x02	; 2
    5e34:	63 e0       	ldi	r22, 0x03	; 3
    5e36:	42 e0       	ldi	r20, 0x02	; 2
    5e38:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
    5e3c:	82 e0       	ldi	r24, 0x02	; 2
    5e3e:	64 e0       	ldi	r22, 0x04	; 4
    5e40:	42 e0       	ldi	r20, 0x02	; 2
    5e42:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    5e46:	81 e0       	ldi	r24, 0x01	; 1
    5e48:	65 e0       	ldi	r22, 0x05	; 5
    5e4a:	42 e0       	ldi	r20, 0x02	; 2
    5e4c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTB, DIO_PIN6, DIO_INPUT_FLOATING);
    5e50:	81 e0       	ldi	r24, 0x01	; 1
    5e52:	66 e0       	ldi	r22, 0x06	; 6
    5e54:	40 e0       	ldi	r20, 0x00	; 0
    5e56:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	/*for UART Communication interrupt pin Don't touch*/
	DIO_SetPinMode(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    5e5a:	81 e0       	ldi	r24, 0x01	; 1
    5e5c:	64 e0       	ldi	r22, 0x04	; 4
    5e5e:	42 e0       	ldi	r20, 0x02	; 2
    5e60:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	UART_Init(Asynchronous, Odd_Parity, one_Stop_bit, _8_bit, _9600);
    5e64:	80 e0       	ldi	r24, 0x00	; 0
    5e66:	62 e0       	ldi	r22, 0x02	; 2
    5e68:	40 e0       	ldi	r20, 0x00	; 0
    5e6a:	23 e0       	ldi	r18, 0x03	; 3
    5e6c:	02 e0       	ldi	r16, 0x02	; 2
    5e6e:	0e 94 07 2a 	call	0x540e	; 0x540e <UART_Init>
	/*************************************************/
	DIO_SetPinMode(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    5e72:	81 e0       	ldi	r24, 0x01	; 1
    5e74:	63 e0       	ldi	r22, 0x03	; 3
    5e76:	42 e0       	ldi	r20, 0x02	; 2
    5e78:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	GlobalInterrupt_Enable();
    5e7c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <GlobalInterrupt_Enable>
	DIO_SetPinMode(DIO_PORTC, DIO_PIN0, DIO_OUTPUT);
    5e80:	82 e0       	ldi	r24, 0x02	; 2
    5e82:	60 e0       	ldi	r22, 0x00	; 0
    5e84:	42 e0       	ldi	r20, 0x02	; 2
    5e86:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_SetPinMode>
	DIO_SetPinLevel(DIO_PORTC, DIO_PIN0, DIO_HIGH);
    5e8a:	82 e0       	ldi	r24, 0x02	; 2
    5e8c:	60 e0       	ldi	r22, 0x00	; 0
    5e8e:	41 e0       	ldi	r20, 0x01	; 1
    5e90:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
	LCD_Init();
    5e94:	0e 94 6e 19 	call	0x32dc	; 0x32dc <LCD_Init>
	EEPROM_Init();
    5e98:	0e 94 95 0c 	call	0x192a	; 0x192a <EEPROM_Init>
	LCD_Clear();
    5e9c:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	Keypad_Init();
    5ea0:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <Keypad_Init>
	EEPROM_Write_Byte(0b10100000, 25, 25);
    5ea4:	80 ea       	ldi	r24, 0xA0	; 160
    5ea6:	69 e1       	ldi	r22, 0x19	; 25
    5ea8:	49 e1       	ldi	r20, 0x19	; 25
    5eaa:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
    5eae:	80 e0       	ldi	r24, 0x00	; 0
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	a8 ec       	ldi	r26, 0xC8	; 200
    5eb4:	b2 e4       	ldi	r27, 0x42	; 66
    5eb6:	8b 87       	std	Y+11, r24	; 0x0b
    5eb8:	9c 87       	std	Y+12, r25	; 0x0c
    5eba:	ad 87       	std	Y+13, r26	; 0x0d
    5ebc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ebe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ec0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ec6:	20 e0       	ldi	r18, 0x00	; 0
    5ec8:	30 e0       	ldi	r19, 0x00	; 0
    5eca:	4a ef       	ldi	r20, 0xFA	; 250
    5ecc:	54 e4       	ldi	r21, 0x44	; 68
    5ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ed2:	dc 01       	movw	r26, r24
    5ed4:	cb 01       	movw	r24, r22
    5ed6:	8f 83       	std	Y+7, r24	; 0x07
    5ed8:	98 87       	std	Y+8, r25	; 0x08
    5eda:	a9 87       	std	Y+9, r26	; 0x09
    5edc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ede:	6f 81       	ldd	r22, Y+7	; 0x07
    5ee0:	78 85       	ldd	r23, Y+8	; 0x08
    5ee2:	89 85       	ldd	r24, Y+9	; 0x09
    5ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ee6:	20 e0       	ldi	r18, 0x00	; 0
    5ee8:	30 e0       	ldi	r19, 0x00	; 0
    5eea:	40 e8       	ldi	r20, 0x80	; 128
    5eec:	5f e3       	ldi	r21, 0x3F	; 63
    5eee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ef2:	88 23       	and	r24, r24
    5ef4:	2c f4       	brge	.+10     	; 0x5f00 <main+0xee>
		__ticks = 1;
    5ef6:	81 e0       	ldi	r24, 0x01	; 1
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	9e 83       	std	Y+6, r25	; 0x06
    5efc:	8d 83       	std	Y+5, r24	; 0x05
    5efe:	3f c0       	rjmp	.+126    	; 0x5f7e <main+0x16c>
	else if (__tmp > 65535)
    5f00:	6f 81       	ldd	r22, Y+7	; 0x07
    5f02:	78 85       	ldd	r23, Y+8	; 0x08
    5f04:	89 85       	ldd	r24, Y+9	; 0x09
    5f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f08:	20 e0       	ldi	r18, 0x00	; 0
    5f0a:	3f ef       	ldi	r19, 0xFF	; 255
    5f0c:	4f e7       	ldi	r20, 0x7F	; 127
    5f0e:	57 e4       	ldi	r21, 0x47	; 71
    5f10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5f14:	18 16       	cp	r1, r24
    5f16:	4c f5       	brge	.+82     	; 0x5f6a <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f20:	20 e0       	ldi	r18, 0x00	; 0
    5f22:	30 e0       	ldi	r19, 0x00	; 0
    5f24:	40 e2       	ldi	r20, 0x20	; 32
    5f26:	51 e4       	ldi	r21, 0x41	; 65
    5f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f2c:	dc 01       	movw	r26, r24
    5f2e:	cb 01       	movw	r24, r22
    5f30:	bc 01       	movw	r22, r24
    5f32:	cd 01       	movw	r24, r26
    5f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f38:	dc 01       	movw	r26, r24
    5f3a:	cb 01       	movw	r24, r22
    5f3c:	9e 83       	std	Y+6, r25	; 0x06
    5f3e:	8d 83       	std	Y+5, r24	; 0x05
    5f40:	0f c0       	rjmp	.+30     	; 0x5f60 <main+0x14e>
    5f42:	88 ec       	ldi	r24, 0xC8	; 200
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	9c 83       	std	Y+4, r25	; 0x04
    5f48:	8b 83       	std	Y+3, r24	; 0x03
    5f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    5f4e:	01 97       	sbiw	r24, 0x01	; 1
    5f50:	f1 f7       	brne	.-4      	; 0x5f4e <main+0x13c>
    5f52:	9c 83       	std	Y+4, r25	; 0x04
    5f54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f56:	8d 81       	ldd	r24, Y+5	; 0x05
    5f58:	9e 81       	ldd	r25, Y+6	; 0x06
    5f5a:	01 97       	sbiw	r24, 0x01	; 1
    5f5c:	9e 83       	std	Y+6, r25	; 0x06
    5f5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f60:	8d 81       	ldd	r24, Y+5	; 0x05
    5f62:	9e 81       	ldd	r25, Y+6	; 0x06
    5f64:	00 97       	sbiw	r24, 0x00	; 0
    5f66:	69 f7       	brne	.-38     	; 0x5f42 <main+0x130>
    5f68:	14 c0       	rjmp	.+40     	; 0x5f92 <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    5f6c:	78 85       	ldd	r23, Y+8	; 0x08
    5f6e:	89 85       	ldd	r24, Y+9	; 0x09
    5f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f76:	dc 01       	movw	r26, r24
    5f78:	cb 01       	movw	r24, r22
    5f7a:	9e 83       	std	Y+6, r25	; 0x06
    5f7c:	8d 83       	std	Y+5, r24	; 0x05
    5f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f80:	9e 81       	ldd	r25, Y+6	; 0x06
    5f82:	9a 83       	std	Y+2, r25	; 0x02
    5f84:	89 83       	std	Y+1, r24	; 0x01
    5f86:	89 81       	ldd	r24, Y+1	; 0x01
    5f88:	9a 81       	ldd	r25, Y+2	; 0x02
    5f8a:	01 97       	sbiw	r24, 0x01	; 1
    5f8c:	f1 f7       	brne	.-4      	; 0x5f8a <main+0x178>
    5f8e:	9a 83       	std	Y+2, r25	; 0x02
    5f90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	ID = EEPROM_Read_Byte(0b10100000, 25);
    5f92:	80 ea       	ldi	r24, 0xA0	; 160
    5f94:	69 e1       	ldi	r22, 0x19	; 25
    5f96:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    5f9a:	80 93 d0 01 	sts	0x01D0, r24
	LCD_Clear();
    5f9e:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	LCD_DisplayString("To start : Type any number when ");
    5fa2:	8a e6       	ldi	r24, 0x6A	; 106
    5fa4:	90 e0       	ldi	r25, 0x00	; 0
    5fa6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	LCD_SetCursorPosition(1, 0);
    5faa:	81 e0       	ldi	r24, 0x01	; 1
    5fac:	60 e0       	ldi	r22, 0x00	; 0
    5fae:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>
	LCD_DisplayString("prayer times appear");
    5fb2:	8b e8       	ldi	r24, 0x8B	; 139
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	Keypad_ButtonType pressed_button;
	Keypad_Init();
    5fba:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <Keypad_Init>
	restoredprayerdata();
    5fbe:	0e 94 c3 33 	call	0x6786	; 0x6786 <restoredprayerdata>
	DIO_FlipPinLevel(DIO_PORTB, DIO_PIN4);
    5fc2:	81 e0       	ldi	r24, 0x01	; 1
    5fc4:	64 e0       	ldi	r22, 0x04	; 4
    5fc6:	0e 94 9a 2b 	call	0x5734	; 0x5734 <DIO_FlipPinLevel>
	Send_Data_UARTCOMM(10, 2);
    5fca:	8a e0       	ldi	r24, 0x0A	; 10
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	62 e0       	ldi	r22, 0x02	; 2
    5fd0:	0e 94 17 2c 	call	0x582e	; 0x582e <Send_Data_UARTCOMM>
	dispaly_prayer();
    5fd4:	0e 94 5f 34 	call	0x68be	; 0x68be <dispaly_prayer>
	u8 toggle = 0;
    5fd8:	1f 86       	std	Y+15, r1	; 0x0f

	while (1)
	{
		if (DIO_ReadPinLevel(DIO_PORTB, DIO_PIN6) == 0)
    5fda:	81 e0       	ldi	r24, 0x01	; 1
    5fdc:	66 e0       	ldi	r22, 0x06	; 6
    5fde:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    5fe2:	88 23       	and	r24, r24
    5fe4:	a9 f4       	brne	.+42     	; 0x6010 <main+0x1fe>
		{
			DIO_SetPinLevel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    5fe6:	82 e0       	ldi	r24, 0x02	; 2
    5fe8:	62 e0       	ldi	r22, 0x02	; 2
    5fea:	41 e0       	ldi	r20, 0x01	; 1
    5fec:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
			DIO_SetPinLevel(DIO_PORTC, DIO_PIN3, DIO_HIGH);
    5ff0:	82 e0       	ldi	r24, 0x02	; 2
    5ff2:	63 e0       	ldi	r22, 0x03	; 3
    5ff4:	41 e0       	ldi	r20, 0x01	; 1
    5ff6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
			DIO_SetPinLevel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    5ffa:	82 e0       	ldi	r24, 0x02	; 2
    5ffc:	64 e0       	ldi	r22, 0x04	; 4
    5ffe:	41 e0       	ldi	r20, 0x01	; 1
    6000:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
			DIO_SetPinLevel(DIO_PORTB, DIO_PIN5, DIO_HIGH);
    6004:	81 e0       	ldi	r24, 0x01	; 1
    6006:	65 e0       	ldi	r22, 0x05	; 5
    6008:	41 e0       	ldi	r20, 0x01	; 1
    600a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
    600e:	1a c0       	rjmp	.+52     	; 0x6044 <main+0x232>
		}else if (DIO_ReadPinLevel(DIO_PORTB, DIO_PIN6) == 1)
    6010:	81 e0       	ldi	r24, 0x01	; 1
    6012:	66 e0       	ldi	r22, 0x06	; 6
    6014:	0e 94 9d 0b 	call	0x173a	; 0x173a <DIO_ReadPinLevel>
    6018:	81 30       	cpi	r24, 0x01	; 1
    601a:	a1 f4       	brne	.+40     	; 0x6044 <main+0x232>
		{
			DIO_SetPinLevel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    601c:	82 e0       	ldi	r24, 0x02	; 2
    601e:	62 e0       	ldi	r22, 0x02	; 2
    6020:	40 e0       	ldi	r20, 0x00	; 0
    6022:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
			DIO_SetPinLevel(DIO_PORTC, DIO_PIN3, DIO_LOW);
    6026:	82 e0       	ldi	r24, 0x02	; 2
    6028:	63 e0       	ldi	r22, 0x03	; 3
    602a:	40 e0       	ldi	r20, 0x00	; 0
    602c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
			DIO_SetPinLevel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    6030:	82 e0       	ldi	r24, 0x02	; 2
    6032:	64 e0       	ldi	r22, 0x04	; 4
    6034:	40 e0       	ldi	r20, 0x00	; 0
    6036:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
			DIO_SetPinLevel(DIO_PORTB, DIO_PIN5, DIO_LOW);
    603a:	81 e0       	ldi	r24, 0x01	; 1
    603c:	65 e0       	ldi	r22, 0x05	; 5
    603e:	40 e0       	ldi	r20, 0x00	; 0
    6040:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
		}

		if (counter >= 31 * 5)
    6044:	80 91 d6 01 	lds	r24, 0x01D6
    6048:	90 91 d7 01 	lds	r25, 0x01D7
    604c:	8b 39       	cpi	r24, 0x9B	; 155
    604e:	91 05       	cpc	r25, r1
    6050:	58 f0       	brcs	.+22     	; 0x6068 <main+0x256>
		{
			wp = 0;
    6052:	10 92 d8 01 	sts	0x01D8, r1
			counter = 0;
    6056:	10 92 d7 01 	sts	0x01D7, r1
    605a:	10 92 d6 01 	sts	0x01D6, r1
			DIO_SetPinLevel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    605e:	81 e0       	ldi	r24, 0x01	; 1
    6060:	63 e0       	ldi	r22, 0x03	; 3
    6062:	40 e0       	ldi	r20, 0x00	; 0
    6064:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
		}
		pressed_button = Keypad_GetPressedButton();
    6068:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    606c:	88 8b       	std	Y+16, r24	; 0x10
		if (pressed_button != KEYPAD_BUTTON_INVALID && !toggle)
    606e:	88 89       	ldd	r24, Y+16	; 0x10
    6070:	80 31       	cpi	r24, 0x10	; 16
    6072:	e1 f0       	breq	.+56     	; 0x60ac <main+0x29a>
    6074:	8f 85       	ldd	r24, Y+15	; 0x0f
    6076:	88 23       	and	r24, r24
    6078:	c9 f4       	brne	.+50     	; 0x60ac <main+0x29a>
		{
			// dispaly_prayer();
			LCD_Clear();
    607a:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
			LCD_DisplayString("Prayers Settings->1 ");
    607e:	8f e9       	ldi	r24, 0x9F	; 159
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			LCD_DisplayString("Unlock->2 ");
    6086:	84 eb       	ldi	r24, 0xB4	; 180
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			LCD_SetCursorPosition(1, 0);
    608e:	81 e0       	ldi	r24, 0x01	; 1
    6090:	60 e0       	ldi	r22, 0x00	; 0
    6092:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>
			LCD_DisplayString("ClockSettings->3 ");
    6096:	8f eb       	ldi	r24, 0xBF	; 191
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			LCD_DisplayString("Add Password->4 ");
    609e:	81 ed       	ldi	r24, 0xD1	; 209
    60a0:	90 e0       	ldi	r25, 0x00	; 0
    60a2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			toggle = 1;
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	8f 87       	std	Y+15, r24	; 0x0f
    60aa:	97 cf       	rjmp	.-210    	; 0x5fda <main+0x1c8>
			continue;
		}
		if (pressed_button != KEYPAD_BUTTON_INVALID && toggle)
    60ac:	88 89       	ldd	r24, Y+16	; 0x10
    60ae:	80 31       	cpi	r24, 0x10	; 16
    60b0:	09 f4       	brne	.+2      	; 0x60b4 <main+0x2a2>
    60b2:	93 cf       	rjmp	.-218    	; 0x5fda <main+0x1c8>
    60b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    60b6:	88 23       	and	r24, r24
    60b8:	09 f4       	brne	.+2      	; 0x60bc <main+0x2aa>
    60ba:	8f cf       	rjmp	.-226    	; 0x5fda <main+0x1c8>
		{
			toggle = 0;
    60bc:	1f 86       	std	Y+15, r1	; 0x0f
			if (pressed_button == CALCULATOR_BUTTON_CLR)
    60be:	88 89       	ldd	r24, Y+16	; 0x10
    60c0:	88 23       	and	r24, r24
    60c2:	19 f4       	brne	.+6      	; 0x60ca <main+0x2b8>
			{
				Check_For_PassWord();
    60c4:	0e 94 8b 3a 	call	0x7516	; 0x7516 <Check_For_PassWord>
    60c8:	2d c0       	rjmp	.+90     	; 0x6124 <main+0x312>
			}
			else if (pressed_button == CALCULATOR_BUTTON_NUM1)
    60ca:	88 89       	ldd	r24, Y+16	; 0x10
    60cc:	84 30       	cpi	r24, 0x04	; 4
    60ce:	61 f4       	brne	.+24     	; 0x60e8 <main+0x2d6>
			{
				Set_Prayer_Time();
    60d0:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <Set_Prayer_Time>
				DIO_FlipPinLevel(DIO_PORTB, DIO_PIN4);
    60d4:	81 e0       	ldi	r24, 0x01	; 1
    60d6:	64 e0       	ldi	r22, 0x04	; 4
    60d8:	0e 94 9a 2b 	call	0x5734	; 0x5734 <DIO_FlipPinLevel>
				Send_Data_UARTCOMM(10, 2);
    60dc:	8a e0       	ldi	r24, 0x0A	; 10
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	62 e0       	ldi	r22, 0x02	; 2
    60e2:	0e 94 17 2c 	call	0x582e	; 0x582e <Send_Data_UARTCOMM>
    60e6:	1e c0       	rjmp	.+60     	; 0x6124 <main+0x312>
			}
			else if (pressed_button == CALCULATOR_BUTTON_NUM2 && !wp)
    60e8:	88 89       	ldd	r24, Y+16	; 0x10
    60ea:	85 30       	cpi	r24, 0x05	; 5
    60ec:	39 f4       	brne	.+14     	; 0x60fc <main+0x2ea>
    60ee:	80 91 d8 01 	lds	r24, 0x01D8
    60f2:	88 23       	and	r24, r24
    60f4:	19 f4       	brne	.+6      	; 0x60fc <main+0x2ea>
			{
				Check_For_PassWord();
    60f6:	0e 94 8b 3a 	call	0x7516	; 0x7516 <Check_For_PassWord>
    60fa:	14 c0       	rjmp	.+40     	; 0x6124 <main+0x312>
			}
			else if (pressed_button == CALCULATOR_BUTTON_NUM3)
    60fc:	88 89       	ldd	r24, Y+16	; 0x10
    60fe:	86 30       	cpi	r24, 0x06	; 6
    6100:	61 f4       	brne	.+24     	; 0x611a <main+0x308>
			{
				DIO_FlipPinLevel(DIO_PORTB, DIO_PIN4);
    6102:	81 e0       	ldi	r24, 0x01	; 1
    6104:	64 e0       	ldi	r22, 0x04	; 4
    6106:	0e 94 9a 2b 	call	0x5734	; 0x5734 <DIO_FlipPinLevel>
				set_Clock_Settings();
    610a:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <set_Clock_Settings>
				Send_Data_UARTCOMM(2, 1);
    610e:	82 e0       	ldi	r24, 0x02	; 2
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	61 e0       	ldi	r22, 0x01	; 1
    6114:	0e 94 17 2c 	call	0x582e	; 0x582e <Send_Data_UARTCOMM>
    6118:	05 c0       	rjmp	.+10     	; 0x6124 <main+0x312>
			}
			else if (pressed_button == CALCULATOR_BUTTON_NUM4)
    611a:	88 89       	ldd	r24, Y+16	; 0x10
    611c:	88 30       	cpi	r24, 0x08	; 8
    611e:	11 f4       	brne	.+4      	; 0x6124 <main+0x312>
			{
				Add_New_password();
    6120:	0e 94 95 30 	call	0x612a	; 0x612a <Add_New_password>
			}
			dispaly_prayer();
    6124:	0e 94 5f 34 	call	0x68be	; 0x68be <dispaly_prayer>
    6128:	58 cf       	rjmp	.-336    	; 0x5fda <main+0x1c8>

0000612a <Add_New_password>:
		}
	}
}
void Add_New_password()
{
    612a:	df 93       	push	r29
    612c:	cf 93       	push	r28
    612e:	cd b7       	in	r28, 0x3d	; 61
    6130:	de b7       	in	r29, 0x3e	; 62
    6132:	ed 97       	sbiw	r28, 0x3d	; 61
    6134:	0f b6       	in	r0, 0x3f	; 63
    6136:	f8 94       	cli
    6138:	de bf       	out	0x3e, r29	; 62
    613a:	0f be       	out	0x3f, r0	; 63
    613c:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    613e:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	LCD_DisplayString("YOUR ID will be:");
    6142:	82 ee       	ldi	r24, 0xE2	; 226
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	LCD_DisplayNumber(ID);
    614a:	80 91 d0 01 	lds	r24, 0x01D0
    614e:	88 2f       	mov	r24, r24
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	Keypad_ButtonType pressed_button;

	LCD_DisplayString(" Pass:");
    6156:	83 ef       	ldi	r24, 0xF3	; 243
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	do
	{
		pressed_button = Keypad_GetPressedButton();
    615e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6162:	8d af       	std	Y+61, r24	; 0x3d
	} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    6164:	8d ad       	ldd	r24, Y+61	; 0x3d
    6166:	80 31       	cpi	r24, 0x10	; 16
    6168:	d1 f3       	breq	.-12     	; 0x615e <Add_New_password+0x34>
    616a:	8d ad       	ldd	r24, Y+61	; 0x3d
    616c:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6170:	88 23       	and	r24, r24
    6172:	a9 f3       	breq	.-22     	; 0x615e <Add_New_password+0x34>
	u8 x = Calculator_GetRealNumber(pressed_button);										// 1
    6174:	8d ad       	ldd	r24, Y+61	; 0x3d
    6176:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    617a:	8c af       	std	Y+60, r24	; 0x3c
	LCD_DisplayNumber(x);
    617c:	8c ad       	ldd	r24, Y+60	; 0x3c
    617e:	88 2f       	mov	r24, r24
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	do
	{
		pressed_button = Keypad_GetPressedButton();
    6186:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    618a:	8d af       	std	Y+61, r24	; 0x3d
	} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    618c:	8d ad       	ldd	r24, Y+61	; 0x3d
    618e:	80 31       	cpi	r24, 0x10	; 16
    6190:	d1 f3       	breq	.-12     	; 0x6186 <Add_New_password+0x5c>
    6192:	8d ad       	ldd	r24, Y+61	; 0x3d
    6194:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6198:	88 23       	and	r24, r24
    619a:	a9 f3       	breq	.-22     	; 0x6186 <Add_New_password+0x5c>
	u8 x1 = Calculator_GetRealNumber(pressed_button);
    619c:	8d ad       	ldd	r24, Y+61	; 0x3d
    619e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    61a2:	8b af       	std	Y+59, r24	; 0x3b
	LCD_DisplayNumber(x1);
    61a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    61a6:	88 2f       	mov	r24, r24
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	// LCD_DisplayString(":"); // 12:
	do
	{
		pressed_button = Keypad_GetPressedButton();
    61ae:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    61b2:	8d af       	std	Y+61, r24	; 0x3d
	} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    61b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    61b6:	80 31       	cpi	r24, 0x10	; 16
    61b8:	d1 f3       	breq	.-12     	; 0x61ae <Add_New_password+0x84>
    61ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    61bc:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    61c0:	88 23       	and	r24, r24
    61c2:	a9 f3       	breq	.-22     	; 0x61ae <Add_New_password+0x84>
	u8 x2 = Calculator_GetRealNumber(pressed_button);
    61c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    61c6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    61ca:	8a af       	std	Y+58, r24	; 0x3a
	LCD_DisplayNumber(x2);
    61cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    61ce:	88 2f       	mov	r24, r24
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	do
	{
		pressed_button = Keypad_GetPressedButton();
    61d6:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    61da:	8d af       	std	Y+61, r24	; 0x3d
	} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    61dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    61de:	80 31       	cpi	r24, 0x10	; 16
    61e0:	d1 f3       	breq	.-12     	; 0x61d6 <Add_New_password+0xac>
    61e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    61e4:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    61e8:	88 23       	and	r24, r24
    61ea:	a9 f3       	breq	.-22     	; 0x61d6 <Add_New_password+0xac>
	u8 x3 = Calculator_GetRealNumber(pressed_button);
    61ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    61ee:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    61f2:	89 af       	std	Y+57, r24	; 0x39
	LCD_DisplayNumber(x3);
    61f4:	89 ad       	ldd	r24, Y+57	; 0x39
    61f6:	88 2f       	mov	r24, r24
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	EEPROM_Write_Byte(0b10100000, ID + 1, x); // 26
    61fe:	80 91 d0 01 	lds	r24, 0x01D0
    6202:	98 2f       	mov	r25, r24
    6204:	9f 5f       	subi	r25, 0xFF	; 255
    6206:	80 ea       	ldi	r24, 0xA0	; 160
    6208:	69 2f       	mov	r22, r25
    620a:	4c ad       	ldd	r20, Y+60	; 0x3c
    620c:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
	ID++;
    6210:	80 91 d0 01 	lds	r24, 0x01D0
    6214:	8f 5f       	subi	r24, 0xFF	; 255
    6216:	80 93 d0 01 	sts	0x01D0, r24
    621a:	80 e0       	ldi	r24, 0x00	; 0
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	a8 ec       	ldi	r26, 0xC8	; 200
    6220:	b2 e4       	ldi	r27, 0x42	; 66
    6222:	8d ab       	std	Y+53, r24	; 0x35
    6224:	9e ab       	std	Y+54, r25	; 0x36
    6226:	af ab       	std	Y+55, r26	; 0x37
    6228:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    622a:	6d a9       	ldd	r22, Y+53	; 0x35
    622c:	7e a9       	ldd	r23, Y+54	; 0x36
    622e:	8f a9       	ldd	r24, Y+55	; 0x37
    6230:	98 ad       	ldd	r25, Y+56	; 0x38
    6232:	20 e0       	ldi	r18, 0x00	; 0
    6234:	30 e0       	ldi	r19, 0x00	; 0
    6236:	4a ef       	ldi	r20, 0xFA	; 250
    6238:	54 e4       	ldi	r21, 0x44	; 68
    623a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    623e:	dc 01       	movw	r26, r24
    6240:	cb 01       	movw	r24, r22
    6242:	89 ab       	std	Y+49, r24	; 0x31
    6244:	9a ab       	std	Y+50, r25	; 0x32
    6246:	ab ab       	std	Y+51, r26	; 0x33
    6248:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    624a:	69 a9       	ldd	r22, Y+49	; 0x31
    624c:	7a a9       	ldd	r23, Y+50	; 0x32
    624e:	8b a9       	ldd	r24, Y+51	; 0x33
    6250:	9c a9       	ldd	r25, Y+52	; 0x34
    6252:	20 e0       	ldi	r18, 0x00	; 0
    6254:	30 e0       	ldi	r19, 0x00	; 0
    6256:	40 e8       	ldi	r20, 0x80	; 128
    6258:	5f e3       	ldi	r21, 0x3F	; 63
    625a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    625e:	88 23       	and	r24, r24
    6260:	2c f4       	brge	.+10     	; 0x626c <Add_New_password+0x142>
		__ticks = 1;
    6262:	81 e0       	ldi	r24, 0x01	; 1
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	98 ab       	std	Y+48, r25	; 0x30
    6268:	8f a7       	std	Y+47, r24	; 0x2f
    626a:	3f c0       	rjmp	.+126    	; 0x62ea <Add_New_password+0x1c0>
	else if (__tmp > 65535)
    626c:	69 a9       	ldd	r22, Y+49	; 0x31
    626e:	7a a9       	ldd	r23, Y+50	; 0x32
    6270:	8b a9       	ldd	r24, Y+51	; 0x33
    6272:	9c a9       	ldd	r25, Y+52	; 0x34
    6274:	20 e0       	ldi	r18, 0x00	; 0
    6276:	3f ef       	ldi	r19, 0xFF	; 255
    6278:	4f e7       	ldi	r20, 0x7F	; 127
    627a:	57 e4       	ldi	r21, 0x47	; 71
    627c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6280:	18 16       	cp	r1, r24
    6282:	4c f5       	brge	.+82     	; 0x62d6 <Add_New_password+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6284:	6d a9       	ldd	r22, Y+53	; 0x35
    6286:	7e a9       	ldd	r23, Y+54	; 0x36
    6288:	8f a9       	ldd	r24, Y+55	; 0x37
    628a:	98 ad       	ldd	r25, Y+56	; 0x38
    628c:	20 e0       	ldi	r18, 0x00	; 0
    628e:	30 e0       	ldi	r19, 0x00	; 0
    6290:	40 e2       	ldi	r20, 0x20	; 32
    6292:	51 e4       	ldi	r21, 0x41	; 65
    6294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6298:	dc 01       	movw	r26, r24
    629a:	cb 01       	movw	r24, r22
    629c:	bc 01       	movw	r22, r24
    629e:	cd 01       	movw	r24, r26
    62a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62a4:	dc 01       	movw	r26, r24
    62a6:	cb 01       	movw	r24, r22
    62a8:	98 ab       	std	Y+48, r25	; 0x30
    62aa:	8f a7       	std	Y+47, r24	; 0x2f
    62ac:	0f c0       	rjmp	.+30     	; 0x62cc <Add_New_password+0x1a2>
    62ae:	88 ec       	ldi	r24, 0xC8	; 200
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	9e a7       	std	Y+46, r25	; 0x2e
    62b4:	8d a7       	std	Y+45, r24	; 0x2d
    62b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    62b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    62ba:	01 97       	sbiw	r24, 0x01	; 1
    62bc:	f1 f7       	brne	.-4      	; 0x62ba <Add_New_password+0x190>
    62be:	9e a7       	std	Y+46, r25	; 0x2e
    62c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    62c4:	98 a9       	ldd	r25, Y+48	; 0x30
    62c6:	01 97       	sbiw	r24, 0x01	; 1
    62c8:	98 ab       	std	Y+48, r25	; 0x30
    62ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    62ce:	98 a9       	ldd	r25, Y+48	; 0x30
    62d0:	00 97       	sbiw	r24, 0x00	; 0
    62d2:	69 f7       	brne	.-38     	; 0x62ae <Add_New_password+0x184>
    62d4:	14 c0       	rjmp	.+40     	; 0x62fe <Add_New_password+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62d6:	69 a9       	ldd	r22, Y+49	; 0x31
    62d8:	7a a9       	ldd	r23, Y+50	; 0x32
    62da:	8b a9       	ldd	r24, Y+51	; 0x33
    62dc:	9c a9       	ldd	r25, Y+52	; 0x34
    62de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62e2:	dc 01       	movw	r26, r24
    62e4:	cb 01       	movw	r24, r22
    62e6:	98 ab       	std	Y+48, r25	; 0x30
    62e8:	8f a7       	std	Y+47, r24	; 0x2f
    62ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    62ec:	98 a9       	ldd	r25, Y+48	; 0x30
    62ee:	9c a7       	std	Y+44, r25	; 0x2c
    62f0:	8b a7       	std	Y+43, r24	; 0x2b
    62f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    62f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    62f6:	01 97       	sbiw	r24, 0x01	; 1
    62f8:	f1 f7       	brne	.-4      	; 0x62f6 <Add_New_password+0x1cc>
    62fa:	9c a7       	std	Y+44, r25	; 0x2c
    62fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	EEPROM_Write_Byte(0b10100000, ID + 1, x1); // 27
    62fe:	80 91 d0 01 	lds	r24, 0x01D0
    6302:	98 2f       	mov	r25, r24
    6304:	9f 5f       	subi	r25, 0xFF	; 255
    6306:	80 ea       	ldi	r24, 0xA0	; 160
    6308:	69 2f       	mov	r22, r25
    630a:	4b ad       	ldd	r20, Y+59	; 0x3b
    630c:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
	ID++;
    6310:	80 91 d0 01 	lds	r24, 0x01D0
    6314:	8f 5f       	subi	r24, 0xFF	; 255
    6316:	80 93 d0 01 	sts	0x01D0, r24
    631a:	80 e0       	ldi	r24, 0x00	; 0
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	a8 ec       	ldi	r26, 0xC8	; 200
    6320:	b2 e4       	ldi	r27, 0x42	; 66
    6322:	8f a3       	std	Y+39, r24	; 0x27
    6324:	98 a7       	std	Y+40, r25	; 0x28
    6326:	a9 a7       	std	Y+41, r26	; 0x29
    6328:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    632a:	6f a1       	ldd	r22, Y+39	; 0x27
    632c:	78 a5       	ldd	r23, Y+40	; 0x28
    632e:	89 a5       	ldd	r24, Y+41	; 0x29
    6330:	9a a5       	ldd	r25, Y+42	; 0x2a
    6332:	20 e0       	ldi	r18, 0x00	; 0
    6334:	30 e0       	ldi	r19, 0x00	; 0
    6336:	4a ef       	ldi	r20, 0xFA	; 250
    6338:	54 e4       	ldi	r21, 0x44	; 68
    633a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    633e:	dc 01       	movw	r26, r24
    6340:	cb 01       	movw	r24, r22
    6342:	8b a3       	std	Y+35, r24	; 0x23
    6344:	9c a3       	std	Y+36, r25	; 0x24
    6346:	ad a3       	std	Y+37, r26	; 0x25
    6348:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    634a:	6b a1       	ldd	r22, Y+35	; 0x23
    634c:	7c a1       	ldd	r23, Y+36	; 0x24
    634e:	8d a1       	ldd	r24, Y+37	; 0x25
    6350:	9e a1       	ldd	r25, Y+38	; 0x26
    6352:	20 e0       	ldi	r18, 0x00	; 0
    6354:	30 e0       	ldi	r19, 0x00	; 0
    6356:	40 e8       	ldi	r20, 0x80	; 128
    6358:	5f e3       	ldi	r21, 0x3F	; 63
    635a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    635e:	88 23       	and	r24, r24
    6360:	2c f4       	brge	.+10     	; 0x636c <Add_New_password+0x242>
		__ticks = 1;
    6362:	81 e0       	ldi	r24, 0x01	; 1
    6364:	90 e0       	ldi	r25, 0x00	; 0
    6366:	9a a3       	std	Y+34, r25	; 0x22
    6368:	89 a3       	std	Y+33, r24	; 0x21
    636a:	3f c0       	rjmp	.+126    	; 0x63ea <Add_New_password+0x2c0>
	else if (__tmp > 65535)
    636c:	6b a1       	ldd	r22, Y+35	; 0x23
    636e:	7c a1       	ldd	r23, Y+36	; 0x24
    6370:	8d a1       	ldd	r24, Y+37	; 0x25
    6372:	9e a1       	ldd	r25, Y+38	; 0x26
    6374:	20 e0       	ldi	r18, 0x00	; 0
    6376:	3f ef       	ldi	r19, 0xFF	; 255
    6378:	4f e7       	ldi	r20, 0x7F	; 127
    637a:	57 e4       	ldi	r21, 0x47	; 71
    637c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6380:	18 16       	cp	r1, r24
    6382:	4c f5       	brge	.+82     	; 0x63d6 <Add_New_password+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6384:	6f a1       	ldd	r22, Y+39	; 0x27
    6386:	78 a5       	ldd	r23, Y+40	; 0x28
    6388:	89 a5       	ldd	r24, Y+41	; 0x29
    638a:	9a a5       	ldd	r25, Y+42	; 0x2a
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	40 e2       	ldi	r20, 0x20	; 32
    6392:	51 e4       	ldi	r21, 0x41	; 65
    6394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6398:	dc 01       	movw	r26, r24
    639a:	cb 01       	movw	r24, r22
    639c:	bc 01       	movw	r22, r24
    639e:	cd 01       	movw	r24, r26
    63a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63a4:	dc 01       	movw	r26, r24
    63a6:	cb 01       	movw	r24, r22
    63a8:	9a a3       	std	Y+34, r25	; 0x22
    63aa:	89 a3       	std	Y+33, r24	; 0x21
    63ac:	0f c0       	rjmp	.+30     	; 0x63cc <Add_New_password+0x2a2>
    63ae:	88 ec       	ldi	r24, 0xC8	; 200
    63b0:	90 e0       	ldi	r25, 0x00	; 0
    63b2:	98 a3       	std	Y+32, r25	; 0x20
    63b4:	8f 8f       	std	Y+31, r24	; 0x1f
    63b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    63b8:	98 a1       	ldd	r25, Y+32	; 0x20
    63ba:	01 97       	sbiw	r24, 0x01	; 1
    63bc:	f1 f7       	brne	.-4      	; 0x63ba <Add_New_password+0x290>
    63be:	98 a3       	std	Y+32, r25	; 0x20
    63c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63c2:	89 a1       	ldd	r24, Y+33	; 0x21
    63c4:	9a a1       	ldd	r25, Y+34	; 0x22
    63c6:	01 97       	sbiw	r24, 0x01	; 1
    63c8:	9a a3       	std	Y+34, r25	; 0x22
    63ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63cc:	89 a1       	ldd	r24, Y+33	; 0x21
    63ce:	9a a1       	ldd	r25, Y+34	; 0x22
    63d0:	00 97       	sbiw	r24, 0x00	; 0
    63d2:	69 f7       	brne	.-38     	; 0x63ae <Add_New_password+0x284>
    63d4:	14 c0       	rjmp	.+40     	; 0x63fe <Add_New_password+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63d6:	6b a1       	ldd	r22, Y+35	; 0x23
    63d8:	7c a1       	ldd	r23, Y+36	; 0x24
    63da:	8d a1       	ldd	r24, Y+37	; 0x25
    63dc:	9e a1       	ldd	r25, Y+38	; 0x26
    63de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63e2:	dc 01       	movw	r26, r24
    63e4:	cb 01       	movw	r24, r22
    63e6:	9a a3       	std	Y+34, r25	; 0x22
    63e8:	89 a3       	std	Y+33, r24	; 0x21
    63ea:	89 a1       	ldd	r24, Y+33	; 0x21
    63ec:	9a a1       	ldd	r25, Y+34	; 0x22
    63ee:	9e 8f       	std	Y+30, r25	; 0x1e
    63f0:	8d 8f       	std	Y+29, r24	; 0x1d
    63f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    63f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    63f6:	01 97       	sbiw	r24, 0x01	; 1
    63f8:	f1 f7       	brne	.-4      	; 0x63f6 <Add_New_password+0x2cc>
    63fa:	9e 8f       	std	Y+30, r25	; 0x1e
    63fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	EEPROM_Write_Byte(0b10100000, ID + 1, x2); // 28
    63fe:	80 91 d0 01 	lds	r24, 0x01D0
    6402:	98 2f       	mov	r25, r24
    6404:	9f 5f       	subi	r25, 0xFF	; 255
    6406:	80 ea       	ldi	r24, 0xA0	; 160
    6408:	69 2f       	mov	r22, r25
    640a:	4a ad       	ldd	r20, Y+58	; 0x3a
    640c:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
	ID++;
    6410:	80 91 d0 01 	lds	r24, 0x01D0
    6414:	8f 5f       	subi	r24, 0xFF	; 255
    6416:	80 93 d0 01 	sts	0x01D0, r24
    641a:	80 e0       	ldi	r24, 0x00	; 0
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	a8 ec       	ldi	r26, 0xC8	; 200
    6420:	b2 e4       	ldi	r27, 0x42	; 66
    6422:	89 8f       	std	Y+25, r24	; 0x19
    6424:	9a 8f       	std	Y+26, r25	; 0x1a
    6426:	ab 8f       	std	Y+27, r26	; 0x1b
    6428:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    642a:	69 8d       	ldd	r22, Y+25	; 0x19
    642c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    642e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6432:	20 e0       	ldi	r18, 0x00	; 0
    6434:	30 e0       	ldi	r19, 0x00	; 0
    6436:	4a ef       	ldi	r20, 0xFA	; 250
    6438:	54 e4       	ldi	r21, 0x44	; 68
    643a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    643e:	dc 01       	movw	r26, r24
    6440:	cb 01       	movw	r24, r22
    6442:	8d 8b       	std	Y+21, r24	; 0x15
    6444:	9e 8b       	std	Y+22, r25	; 0x16
    6446:	af 8b       	std	Y+23, r26	; 0x17
    6448:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    644a:	6d 89       	ldd	r22, Y+21	; 0x15
    644c:	7e 89       	ldd	r23, Y+22	; 0x16
    644e:	8f 89       	ldd	r24, Y+23	; 0x17
    6450:	98 8d       	ldd	r25, Y+24	; 0x18
    6452:	20 e0       	ldi	r18, 0x00	; 0
    6454:	30 e0       	ldi	r19, 0x00	; 0
    6456:	40 e8       	ldi	r20, 0x80	; 128
    6458:	5f e3       	ldi	r21, 0x3F	; 63
    645a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    645e:	88 23       	and	r24, r24
    6460:	2c f4       	brge	.+10     	; 0x646c <Add_New_password+0x342>
		__ticks = 1;
    6462:	81 e0       	ldi	r24, 0x01	; 1
    6464:	90 e0       	ldi	r25, 0x00	; 0
    6466:	9c 8b       	std	Y+20, r25	; 0x14
    6468:	8b 8b       	std	Y+19, r24	; 0x13
    646a:	3f c0       	rjmp	.+126    	; 0x64ea <Add_New_password+0x3c0>
	else if (__tmp > 65535)
    646c:	6d 89       	ldd	r22, Y+21	; 0x15
    646e:	7e 89       	ldd	r23, Y+22	; 0x16
    6470:	8f 89       	ldd	r24, Y+23	; 0x17
    6472:	98 8d       	ldd	r25, Y+24	; 0x18
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	3f ef       	ldi	r19, 0xFF	; 255
    6478:	4f e7       	ldi	r20, 0x7F	; 127
    647a:	57 e4       	ldi	r21, 0x47	; 71
    647c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6480:	18 16       	cp	r1, r24
    6482:	4c f5       	brge	.+82     	; 0x64d6 <Add_New_password+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6484:	69 8d       	ldd	r22, Y+25	; 0x19
    6486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    648a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    648c:	20 e0       	ldi	r18, 0x00	; 0
    648e:	30 e0       	ldi	r19, 0x00	; 0
    6490:	40 e2       	ldi	r20, 0x20	; 32
    6492:	51 e4       	ldi	r21, 0x41	; 65
    6494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6498:	dc 01       	movw	r26, r24
    649a:	cb 01       	movw	r24, r22
    649c:	bc 01       	movw	r22, r24
    649e:	cd 01       	movw	r24, r26
    64a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64a4:	dc 01       	movw	r26, r24
    64a6:	cb 01       	movw	r24, r22
    64a8:	9c 8b       	std	Y+20, r25	; 0x14
    64aa:	8b 8b       	std	Y+19, r24	; 0x13
    64ac:	0f c0       	rjmp	.+30     	; 0x64cc <Add_New_password+0x3a2>
    64ae:	88 ec       	ldi	r24, 0xC8	; 200
    64b0:	90 e0       	ldi	r25, 0x00	; 0
    64b2:	9a 8b       	std	Y+18, r25	; 0x12
    64b4:	89 8b       	std	Y+17, r24	; 0x11
    64b6:	89 89       	ldd	r24, Y+17	; 0x11
    64b8:	9a 89       	ldd	r25, Y+18	; 0x12
    64ba:	01 97       	sbiw	r24, 0x01	; 1
    64bc:	f1 f7       	brne	.-4      	; 0x64ba <Add_New_password+0x390>
    64be:	9a 8b       	std	Y+18, r25	; 0x12
    64c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64c2:	8b 89       	ldd	r24, Y+19	; 0x13
    64c4:	9c 89       	ldd	r25, Y+20	; 0x14
    64c6:	01 97       	sbiw	r24, 0x01	; 1
    64c8:	9c 8b       	std	Y+20, r25	; 0x14
    64ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64cc:	8b 89       	ldd	r24, Y+19	; 0x13
    64ce:	9c 89       	ldd	r25, Y+20	; 0x14
    64d0:	00 97       	sbiw	r24, 0x00	; 0
    64d2:	69 f7       	brne	.-38     	; 0x64ae <Add_New_password+0x384>
    64d4:	14 c0       	rjmp	.+40     	; 0x64fe <Add_New_password+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64d6:	6d 89       	ldd	r22, Y+21	; 0x15
    64d8:	7e 89       	ldd	r23, Y+22	; 0x16
    64da:	8f 89       	ldd	r24, Y+23	; 0x17
    64dc:	98 8d       	ldd	r25, Y+24	; 0x18
    64de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64e2:	dc 01       	movw	r26, r24
    64e4:	cb 01       	movw	r24, r22
    64e6:	9c 8b       	std	Y+20, r25	; 0x14
    64e8:	8b 8b       	std	Y+19, r24	; 0x13
    64ea:	8b 89       	ldd	r24, Y+19	; 0x13
    64ec:	9c 89       	ldd	r25, Y+20	; 0x14
    64ee:	98 8b       	std	Y+16, r25	; 0x10
    64f0:	8f 87       	std	Y+15, r24	; 0x0f
    64f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    64f4:	98 89       	ldd	r25, Y+16	; 0x10
    64f6:	01 97       	sbiw	r24, 0x01	; 1
    64f8:	f1 f7       	brne	.-4      	; 0x64f6 <Add_New_password+0x3cc>
    64fa:	98 8b       	std	Y+16, r25	; 0x10
    64fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	EEPROM_Write_Byte(0b10100000, ID + 1, x3); // 29
    64fe:	80 91 d0 01 	lds	r24, 0x01D0
    6502:	98 2f       	mov	r25, r24
    6504:	9f 5f       	subi	r25, 0xFF	; 255
    6506:	80 ea       	ldi	r24, 0xA0	; 160
    6508:	69 2f       	mov	r22, r25
    650a:	49 ad       	ldd	r20, Y+57	; 0x39
    650c:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
	ID++;
    6510:	80 91 d0 01 	lds	r24, 0x01D0
    6514:	8f 5f       	subi	r24, 0xFF	; 255
    6516:	80 93 d0 01 	sts	0x01D0, r24
    651a:	80 e0       	ldi	r24, 0x00	; 0
    651c:	90 e0       	ldi	r25, 0x00	; 0
    651e:	a8 ec       	ldi	r26, 0xC8	; 200
    6520:	b2 e4       	ldi	r27, 0x42	; 66
    6522:	8b 87       	std	Y+11, r24	; 0x0b
    6524:	9c 87       	std	Y+12, r25	; 0x0c
    6526:	ad 87       	std	Y+13, r26	; 0x0d
    6528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    652a:	6b 85       	ldd	r22, Y+11	; 0x0b
    652c:	7c 85       	ldd	r23, Y+12	; 0x0c
    652e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6530:	9e 85       	ldd	r25, Y+14	; 0x0e
    6532:	20 e0       	ldi	r18, 0x00	; 0
    6534:	30 e0       	ldi	r19, 0x00	; 0
    6536:	4a ef       	ldi	r20, 0xFA	; 250
    6538:	54 e4       	ldi	r21, 0x44	; 68
    653a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    653e:	dc 01       	movw	r26, r24
    6540:	cb 01       	movw	r24, r22
    6542:	8f 83       	std	Y+7, r24	; 0x07
    6544:	98 87       	std	Y+8, r25	; 0x08
    6546:	a9 87       	std	Y+9, r26	; 0x09
    6548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    654a:	6f 81       	ldd	r22, Y+7	; 0x07
    654c:	78 85       	ldd	r23, Y+8	; 0x08
    654e:	89 85       	ldd	r24, Y+9	; 0x09
    6550:	9a 85       	ldd	r25, Y+10	; 0x0a
    6552:	20 e0       	ldi	r18, 0x00	; 0
    6554:	30 e0       	ldi	r19, 0x00	; 0
    6556:	40 e8       	ldi	r20, 0x80	; 128
    6558:	5f e3       	ldi	r21, 0x3F	; 63
    655a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    655e:	88 23       	and	r24, r24
    6560:	2c f4       	brge	.+10     	; 0x656c <Add_New_password+0x442>
		__ticks = 1;
    6562:	81 e0       	ldi	r24, 0x01	; 1
    6564:	90 e0       	ldi	r25, 0x00	; 0
    6566:	9e 83       	std	Y+6, r25	; 0x06
    6568:	8d 83       	std	Y+5, r24	; 0x05
    656a:	3f c0       	rjmp	.+126    	; 0x65ea <Add_New_password+0x4c0>
	else if (__tmp > 65535)
    656c:	6f 81       	ldd	r22, Y+7	; 0x07
    656e:	78 85       	ldd	r23, Y+8	; 0x08
    6570:	89 85       	ldd	r24, Y+9	; 0x09
    6572:	9a 85       	ldd	r25, Y+10	; 0x0a
    6574:	20 e0       	ldi	r18, 0x00	; 0
    6576:	3f ef       	ldi	r19, 0xFF	; 255
    6578:	4f e7       	ldi	r20, 0x7F	; 127
    657a:	57 e4       	ldi	r21, 0x47	; 71
    657c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6580:	18 16       	cp	r1, r24
    6582:	4c f5       	brge	.+82     	; 0x65d6 <Add_New_password+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6584:	6b 85       	ldd	r22, Y+11	; 0x0b
    6586:	7c 85       	ldd	r23, Y+12	; 0x0c
    6588:	8d 85       	ldd	r24, Y+13	; 0x0d
    658a:	9e 85       	ldd	r25, Y+14	; 0x0e
    658c:	20 e0       	ldi	r18, 0x00	; 0
    658e:	30 e0       	ldi	r19, 0x00	; 0
    6590:	40 e2       	ldi	r20, 0x20	; 32
    6592:	51 e4       	ldi	r21, 0x41	; 65
    6594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6598:	dc 01       	movw	r26, r24
    659a:	cb 01       	movw	r24, r22
    659c:	bc 01       	movw	r22, r24
    659e:	cd 01       	movw	r24, r26
    65a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65a4:	dc 01       	movw	r26, r24
    65a6:	cb 01       	movw	r24, r22
    65a8:	9e 83       	std	Y+6, r25	; 0x06
    65aa:	8d 83       	std	Y+5, r24	; 0x05
    65ac:	0f c0       	rjmp	.+30     	; 0x65cc <Add_New_password+0x4a2>
    65ae:	88 ec       	ldi	r24, 0xC8	; 200
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	9c 83       	std	Y+4, r25	; 0x04
    65b4:	8b 83       	std	Y+3, r24	; 0x03
    65b6:	8b 81       	ldd	r24, Y+3	; 0x03
    65b8:	9c 81       	ldd	r25, Y+4	; 0x04
    65ba:	01 97       	sbiw	r24, 0x01	; 1
    65bc:	f1 f7       	brne	.-4      	; 0x65ba <Add_New_password+0x490>
    65be:	9c 83       	std	Y+4, r25	; 0x04
    65c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65c2:	8d 81       	ldd	r24, Y+5	; 0x05
    65c4:	9e 81       	ldd	r25, Y+6	; 0x06
    65c6:	01 97       	sbiw	r24, 0x01	; 1
    65c8:	9e 83       	std	Y+6, r25	; 0x06
    65ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65cc:	8d 81       	ldd	r24, Y+5	; 0x05
    65ce:	9e 81       	ldd	r25, Y+6	; 0x06
    65d0:	00 97       	sbiw	r24, 0x00	; 0
    65d2:	69 f7       	brne	.-38     	; 0x65ae <Add_New_password+0x484>
    65d4:	14 c0       	rjmp	.+40     	; 0x65fe <Add_New_password+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65d6:	6f 81       	ldd	r22, Y+7	; 0x07
    65d8:	78 85       	ldd	r23, Y+8	; 0x08
    65da:	89 85       	ldd	r24, Y+9	; 0x09
    65dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    65de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65e2:	dc 01       	movw	r26, r24
    65e4:	cb 01       	movw	r24, r22
    65e6:	9e 83       	std	Y+6, r25	; 0x06
    65e8:	8d 83       	std	Y+5, r24	; 0x05
    65ea:	8d 81       	ldd	r24, Y+5	; 0x05
    65ec:	9e 81       	ldd	r25, Y+6	; 0x06
    65ee:	9a 83       	std	Y+2, r25	; 0x02
    65f0:	89 83       	std	Y+1, r24	; 0x01
    65f2:	89 81       	ldd	r24, Y+1	; 0x01
    65f4:	9a 81       	ldd	r25, Y+2	; 0x02
    65f6:	01 97       	sbiw	r24, 0x01	; 1
    65f8:	f1 f7       	brne	.-4      	; 0x65f6 <Add_New_password+0x4cc>
    65fa:	9a 83       	std	Y+2, r25	; 0x02
    65fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	EEPROM_Write_Byte(0b10100000, 25, ID); // password 4 char
    65fe:	90 91 d0 01 	lds	r25, 0x01D0
    6602:	80 ea       	ldi	r24, 0xA0	; 160
    6604:	69 e1       	ldi	r22, 0x19	; 25
    6606:	49 2f       	mov	r20, r25
    6608:	0e 94 9e 0c 	call	0x193c	; 0x193c <EEPROM_Write_Byte>
}
    660c:	ed 96       	adiw	r28, 0x3d	; 61
    660e:	0f b6       	in	r0, 0x3f	; 63
    6610:	f8 94       	cli
    6612:	de bf       	out	0x3e, r29	; 62
    6614:	0f be       	out	0x3f, r0	; 63
    6616:	cd bf       	out	0x3d, r28	; 61
    6618:	cf 91       	pop	r28
    661a:	df 91       	pop	r29
    661c:	08 95       	ret

0000661e <Check_For_Password>:
u8 Check_For_Password(u8 id, u8 *arr)
{
    661e:	df 93       	push	r29
    6620:	cf 93       	push	r28
    6622:	cd b7       	in	r28, 0x3d	; 61
    6624:	de b7       	in	r29, 0x3e	; 62
    6626:	65 97       	sbiw	r28, 0x15	; 21
    6628:	0f b6       	in	r0, 0x3f	; 63
    662a:	f8 94       	cli
    662c:	de bf       	out	0x3e, r29	; 62
    662e:	0f be       	out	0x3f, r0	; 63
    6630:	cd bf       	out	0x3d, r28	; 61
    6632:	8a 8b       	std	Y+18, r24	; 0x12
    6634:	7c 8b       	std	Y+20, r23	; 0x14
    6636:	6b 8b       	std	Y+19, r22	; 0x13
	u8 f = 0;
    6638:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < 4; i++)
    663a:	18 8a       	std	Y+16, r1	; 0x10
    663c:	8f c0       	rjmp	.+286    	; 0x675c <Check_For_Password+0x13e>
	{
		u8 x = EEPROM_Read_Byte(0b10100000, id + 1);
    663e:	8a 89       	ldd	r24, Y+18	; 0x12
    6640:	98 2f       	mov	r25, r24
    6642:	9f 5f       	subi	r25, 0xFF	; 255
    6644:	80 ea       	ldi	r24, 0xA0	; 160
    6646:	69 2f       	mov	r22, r25
    6648:	0e 94 ba 0c 	call	0x1974	; 0x1974 <EEPROM_Read_Byte>
    664c:	8f 87       	std	Y+15, r24	; 0x0f
		id++;
    664e:	8a 89       	ldd	r24, Y+18	; 0x12
    6650:	8f 5f       	subi	r24, 0xFF	; 255
    6652:	8a 8b       	std	Y+18, r24	; 0x12
    6654:	80 e0       	ldi	r24, 0x00	; 0
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	a8 ec       	ldi	r26, 0xC8	; 200
    665a:	b2 e4       	ldi	r27, 0x42	; 66
    665c:	8b 87       	std	Y+11, r24	; 0x0b
    665e:	9c 87       	std	Y+12, r25	; 0x0c
    6660:	ad 87       	std	Y+13, r26	; 0x0d
    6662:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6664:	6b 85       	ldd	r22, Y+11	; 0x0b
    6666:	7c 85       	ldd	r23, Y+12	; 0x0c
    6668:	8d 85       	ldd	r24, Y+13	; 0x0d
    666a:	9e 85       	ldd	r25, Y+14	; 0x0e
    666c:	20 e0       	ldi	r18, 0x00	; 0
    666e:	30 e0       	ldi	r19, 0x00	; 0
    6670:	4a ef       	ldi	r20, 0xFA	; 250
    6672:	54 e4       	ldi	r21, 0x44	; 68
    6674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6678:	dc 01       	movw	r26, r24
    667a:	cb 01       	movw	r24, r22
    667c:	8f 83       	std	Y+7, r24	; 0x07
    667e:	98 87       	std	Y+8, r25	; 0x08
    6680:	a9 87       	std	Y+9, r26	; 0x09
    6682:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6684:	6f 81       	ldd	r22, Y+7	; 0x07
    6686:	78 85       	ldd	r23, Y+8	; 0x08
    6688:	89 85       	ldd	r24, Y+9	; 0x09
    668a:	9a 85       	ldd	r25, Y+10	; 0x0a
    668c:	20 e0       	ldi	r18, 0x00	; 0
    668e:	30 e0       	ldi	r19, 0x00	; 0
    6690:	40 e8       	ldi	r20, 0x80	; 128
    6692:	5f e3       	ldi	r21, 0x3F	; 63
    6694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6698:	88 23       	and	r24, r24
    669a:	2c f4       	brge	.+10     	; 0x66a6 <Check_For_Password+0x88>
		__ticks = 1;
    669c:	81 e0       	ldi	r24, 0x01	; 1
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	9e 83       	std	Y+6, r25	; 0x06
    66a2:	8d 83       	std	Y+5, r24	; 0x05
    66a4:	3f c0       	rjmp	.+126    	; 0x6724 <Check_For_Password+0x106>
	else if (__tmp > 65535)
    66a6:	6f 81       	ldd	r22, Y+7	; 0x07
    66a8:	78 85       	ldd	r23, Y+8	; 0x08
    66aa:	89 85       	ldd	r24, Y+9	; 0x09
    66ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    66ae:	20 e0       	ldi	r18, 0x00	; 0
    66b0:	3f ef       	ldi	r19, 0xFF	; 255
    66b2:	4f e7       	ldi	r20, 0x7F	; 127
    66b4:	57 e4       	ldi	r21, 0x47	; 71
    66b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    66ba:	18 16       	cp	r1, r24
    66bc:	4c f5       	brge	.+82     	; 0x6710 <Check_For_Password+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66be:	6b 85       	ldd	r22, Y+11	; 0x0b
    66c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    66c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    66c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    66c6:	20 e0       	ldi	r18, 0x00	; 0
    66c8:	30 e0       	ldi	r19, 0x00	; 0
    66ca:	40 e2       	ldi	r20, 0x20	; 32
    66cc:	51 e4       	ldi	r21, 0x41	; 65
    66ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66d2:	dc 01       	movw	r26, r24
    66d4:	cb 01       	movw	r24, r22
    66d6:	bc 01       	movw	r22, r24
    66d8:	cd 01       	movw	r24, r26
    66da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66de:	dc 01       	movw	r26, r24
    66e0:	cb 01       	movw	r24, r22
    66e2:	9e 83       	std	Y+6, r25	; 0x06
    66e4:	8d 83       	std	Y+5, r24	; 0x05
    66e6:	0f c0       	rjmp	.+30     	; 0x6706 <Check_For_Password+0xe8>
    66e8:	88 ec       	ldi	r24, 0xC8	; 200
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	9c 83       	std	Y+4, r25	; 0x04
    66ee:	8b 83       	std	Y+3, r24	; 0x03
    66f0:	8b 81       	ldd	r24, Y+3	; 0x03
    66f2:	9c 81       	ldd	r25, Y+4	; 0x04
    66f4:	01 97       	sbiw	r24, 0x01	; 1
    66f6:	f1 f7       	brne	.-4      	; 0x66f4 <Check_For_Password+0xd6>
    66f8:	9c 83       	std	Y+4, r25	; 0x04
    66fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66fc:	8d 81       	ldd	r24, Y+5	; 0x05
    66fe:	9e 81       	ldd	r25, Y+6	; 0x06
    6700:	01 97       	sbiw	r24, 0x01	; 1
    6702:	9e 83       	std	Y+6, r25	; 0x06
    6704:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6706:	8d 81       	ldd	r24, Y+5	; 0x05
    6708:	9e 81       	ldd	r25, Y+6	; 0x06
    670a:	00 97       	sbiw	r24, 0x00	; 0
    670c:	69 f7       	brne	.-38     	; 0x66e8 <Check_For_Password+0xca>
    670e:	14 c0       	rjmp	.+40     	; 0x6738 <Check_For_Password+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6710:	6f 81       	ldd	r22, Y+7	; 0x07
    6712:	78 85       	ldd	r23, Y+8	; 0x08
    6714:	89 85       	ldd	r24, Y+9	; 0x09
    6716:	9a 85       	ldd	r25, Y+10	; 0x0a
    6718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    671c:	dc 01       	movw	r26, r24
    671e:	cb 01       	movw	r24, r22
    6720:	9e 83       	std	Y+6, r25	; 0x06
    6722:	8d 83       	std	Y+5, r24	; 0x05
    6724:	8d 81       	ldd	r24, Y+5	; 0x05
    6726:	9e 81       	ldd	r25, Y+6	; 0x06
    6728:	9a 83       	std	Y+2, r25	; 0x02
    672a:	89 83       	std	Y+1, r24	; 0x01
    672c:	89 81       	ldd	r24, Y+1	; 0x01
    672e:	9a 81       	ldd	r25, Y+2	; 0x02
    6730:	01 97       	sbiw	r24, 0x01	; 1
    6732:	f1 f7       	brne	.-4      	; 0x6730 <Check_For_Password+0x112>
    6734:	9a 83       	std	Y+2, r25	; 0x02
    6736:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		if (!(arr[i] == x))
    6738:	88 89       	ldd	r24, Y+16	; 0x10
    673a:	28 2f       	mov	r18, r24
    673c:	30 e0       	ldi	r19, 0x00	; 0
    673e:	8b 89       	ldd	r24, Y+19	; 0x13
    6740:	9c 89       	ldd	r25, Y+20	; 0x14
    6742:	fc 01       	movw	r30, r24
    6744:	e2 0f       	add	r30, r18
    6746:	f3 1f       	adc	r31, r19
    6748:	90 81       	ld	r25, Z
    674a:	8f 85       	ldd	r24, Y+15	; 0x0f
    674c:	98 17       	cp	r25, r24
    674e:	19 f0       	breq	.+6      	; 0x6756 <Check_For_Password+0x138>
		{
			f = 1;
    6750:	81 e0       	ldi	r24, 0x01	; 1
    6752:	89 8b       	std	Y+17, r24	; 0x11
    6754:	07 c0       	rjmp	.+14     	; 0x6764 <Check_For_Password+0x146>
	EEPROM_Write_Byte(0b10100000, 25, ID); // password 4 char
}
u8 Check_For_Password(u8 id, u8 *arr)
{
	u8 f = 0;
	for (u8 i = 0; i < 4; i++)
    6756:	88 89       	ldd	r24, Y+16	; 0x10
    6758:	8f 5f       	subi	r24, 0xFF	; 255
    675a:	88 8b       	std	Y+16, r24	; 0x10
    675c:	88 89       	ldd	r24, Y+16	; 0x10
    675e:	84 30       	cpi	r24, 0x04	; 4
    6760:	08 f4       	brcc	.+2      	; 0x6764 <Check_For_Password+0x146>
    6762:	6d cf       	rjmp	.-294    	; 0x663e <Check_For_Password+0x20>
			f = 1;
			break;
		}
		/* code */
	}
	if (f)
    6764:	89 89       	ldd	r24, Y+17	; 0x11
    6766:	88 23       	and	r24, r24
    6768:	11 f0       	breq	.+4      	; 0x676e <Check_For_Password+0x150>
		return 0;
    676a:	1d 8a       	std	Y+21, r1	; 0x15
    676c:	02 c0       	rjmp	.+4      	; 0x6772 <Check_For_Password+0x154>
	return 1;
    676e:	81 e0       	ldi	r24, 0x01	; 1
    6770:	8d 8b       	std	Y+21, r24	; 0x15
    6772:	8d 89       	ldd	r24, Y+21	; 0x15
}
    6774:	65 96       	adiw	r28, 0x15	; 21
    6776:	0f b6       	in	r0, 0x3f	; 63
    6778:	f8 94       	cli
    677a:	de bf       	out	0x3e, r29	; 62
    677c:	0f be       	out	0x3f, r0	; 63
    677e:	cd bf       	out	0x3d, r28	; 61
    6780:	cf 91       	pop	r28
    6782:	df 91       	pop	r29
    6784:	08 95       	ret

00006786 <restoredprayerdata>:
void restoredprayerdata()
{
    6786:	df 93       	push	r29
    6788:	cf 93       	push	r28
    678a:	00 d0       	rcall	.+0      	; 0x678c <restoredprayerdata+0x6>
    678c:	00 d0       	rcall	.+0      	; 0x678e <restoredprayerdata+0x8>
    678e:	cd b7       	in	r28, 0x3d	; 61
    6790:	de b7       	in	r29, 0x3e	; 62
	u16 y = Clock_Get_Fajr();
    6792:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <Clock_Get_Fajr>
    6796:	9c 83       	std	Y+4, r25	; 0x04
    6798:	8b 83       	std	Y+3, r24	; 0x03
	u8 M = y % 100;
    679a:	8b 81       	ldd	r24, Y+3	; 0x03
    679c:	9c 81       	ldd	r25, Y+4	; 0x04
    679e:	24 e6       	ldi	r18, 0x64	; 100
    67a0:	30 e0       	ldi	r19, 0x00	; 0
    67a2:	b9 01       	movw	r22, r18
    67a4:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    67a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 H = y / 100; // 5/10 5
    67aa:	8b 81       	ldd	r24, Y+3	; 0x03
    67ac:	9c 81       	ldd	r25, Y+4	; 0x04
    67ae:	24 e6       	ldi	r18, 0x64	; 100
    67b0:	30 e0       	ldi	r19, 0x00	; 0
    67b2:	b9 01       	movw	r22, r18
    67b4:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    67b8:	cb 01       	movw	r24, r22
    67ba:	89 83       	std	Y+1, r24	; 0x01
	y = 0;
    67bc:	1c 82       	std	Y+4, r1	; 0x04
    67be:	1b 82       	std	Y+3, r1	; 0x03
	prayerstime[0] = H;
    67c0:	89 81       	ldd	r24, Y+1	; 0x01
    67c2:	80 93 ed 01 	sts	0x01ED, r24
	prayerstime[1] = M;
    67c6:	8a 81       	ldd	r24, Y+2	; 0x02
    67c8:	80 93 ee 01 	sts	0x01EE, r24

	y = Clock_Get_Dhuhr();
    67cc:	0e 94 83 27 	call	0x4f06	; 0x4f06 <Clock_Get_Dhuhr>
    67d0:	9c 83       	std	Y+4, r25	; 0x04
    67d2:	8b 83       	std	Y+3, r24	; 0x03
	M = y % 100;
    67d4:	8b 81       	ldd	r24, Y+3	; 0x03
    67d6:	9c 81       	ldd	r25, Y+4	; 0x04
    67d8:	24 e6       	ldi	r18, 0x64	; 100
    67da:	30 e0       	ldi	r19, 0x00	; 0
    67dc:	b9 01       	movw	r22, r18
    67de:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    67e2:	8a 83       	std	Y+2, r24	; 0x02
	H = y / 100; // 5/10 5
    67e4:	8b 81       	ldd	r24, Y+3	; 0x03
    67e6:	9c 81       	ldd	r25, Y+4	; 0x04
    67e8:	24 e6       	ldi	r18, 0x64	; 100
    67ea:	30 e0       	ldi	r19, 0x00	; 0
    67ec:	b9 01       	movw	r22, r18
    67ee:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    67f2:	cb 01       	movw	r24, r22
    67f4:	89 83       	std	Y+1, r24	; 0x01
	y = 0;
    67f6:	1c 82       	std	Y+4, r1	; 0x04
    67f8:	1b 82       	std	Y+3, r1	; 0x03
	prayerstime[2] = H;
    67fa:	89 81       	ldd	r24, Y+1	; 0x01
    67fc:	80 93 ef 01 	sts	0x01EF, r24
	prayerstime[3] = M;
    6800:	8a 81       	ldd	r24, Y+2	; 0x02
    6802:	80 93 f0 01 	sts	0x01F0, r24

	y = Clock_Get_Asr();
    6806:	0e 94 24 28 	call	0x5048	; 0x5048 <Clock_Get_Asr>
    680a:	9c 83       	std	Y+4, r25	; 0x04
    680c:	8b 83       	std	Y+3, r24	; 0x03
	M = y % 100;
    680e:	8b 81       	ldd	r24, Y+3	; 0x03
    6810:	9c 81       	ldd	r25, Y+4	; 0x04
    6812:	24 e6       	ldi	r18, 0x64	; 100
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	b9 01       	movw	r22, r18
    6818:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    681c:	8a 83       	std	Y+2, r24	; 0x02
	H = y / 100; // 5/10 5
    681e:	8b 81       	ldd	r24, Y+3	; 0x03
    6820:	9c 81       	ldd	r25, Y+4	; 0x04
    6822:	24 e6       	ldi	r18, 0x64	; 100
    6824:	30 e0       	ldi	r19, 0x00	; 0
    6826:	b9 01       	movw	r22, r18
    6828:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    682c:	cb 01       	movw	r24, r22
    682e:	89 83       	std	Y+1, r24	; 0x01
	y = 0;
    6830:	1c 82       	std	Y+4, r1	; 0x04
    6832:	1b 82       	std	Y+3, r1	; 0x03
	prayerstime[4] = H;
    6834:	89 81       	ldd	r24, Y+1	; 0x01
    6836:	80 93 f1 01 	sts	0x01F1, r24
	prayerstime[5] = M;
    683a:	8a 81       	ldd	r24, Y+2	; 0x02
    683c:	80 93 f2 01 	sts	0x01F2, r24

	y = Clock_Get_Maghrib();
    6840:	0e 94 c5 28 	call	0x518a	; 0x518a <Clock_Get_Maghrib>
    6844:	9c 83       	std	Y+4, r25	; 0x04
    6846:	8b 83       	std	Y+3, r24	; 0x03
	M = y % 100;
    6848:	8b 81       	ldd	r24, Y+3	; 0x03
    684a:	9c 81       	ldd	r25, Y+4	; 0x04
    684c:	24 e6       	ldi	r18, 0x64	; 100
    684e:	30 e0       	ldi	r19, 0x00	; 0
    6850:	b9 01       	movw	r22, r18
    6852:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6856:	8a 83       	std	Y+2, r24	; 0x02
	H = y / 100; // 5/10 5
    6858:	8b 81       	ldd	r24, Y+3	; 0x03
    685a:	9c 81       	ldd	r25, Y+4	; 0x04
    685c:	24 e6       	ldi	r18, 0x64	; 100
    685e:	30 e0       	ldi	r19, 0x00	; 0
    6860:	b9 01       	movw	r22, r18
    6862:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6866:	cb 01       	movw	r24, r22
    6868:	89 83       	std	Y+1, r24	; 0x01
	y = 0;
    686a:	1c 82       	std	Y+4, r1	; 0x04
    686c:	1b 82       	std	Y+3, r1	; 0x03
	prayerstime[6] = H;
    686e:	89 81       	ldd	r24, Y+1	; 0x01
    6870:	80 93 f3 01 	sts	0x01F3, r24
	prayerstime[7] = M;
    6874:	8a 81       	ldd	r24, Y+2	; 0x02
    6876:	80 93 f4 01 	sts	0x01F4, r24

	y = Clock_Get_Isha();
    687a:	0e 94 66 29 	call	0x52cc	; 0x52cc <Clock_Get_Isha>
    687e:	9c 83       	std	Y+4, r25	; 0x04
    6880:	8b 83       	std	Y+3, r24	; 0x03
	M = y % 100;
    6882:	8b 81       	ldd	r24, Y+3	; 0x03
    6884:	9c 81       	ldd	r25, Y+4	; 0x04
    6886:	24 e6       	ldi	r18, 0x64	; 100
    6888:	30 e0       	ldi	r19, 0x00	; 0
    688a:	b9 01       	movw	r22, r18
    688c:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6890:	8a 83       	std	Y+2, r24	; 0x02
	H = y / 100; // 5/10 5
    6892:	8b 81       	ldd	r24, Y+3	; 0x03
    6894:	9c 81       	ldd	r25, Y+4	; 0x04
    6896:	24 e6       	ldi	r18, 0x64	; 100
    6898:	30 e0       	ldi	r19, 0x00	; 0
    689a:	b9 01       	movw	r22, r18
    689c:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    68a0:	cb 01       	movw	r24, r22
    68a2:	89 83       	std	Y+1, r24	; 0x01

	prayerstime[8] = H;
    68a4:	89 81       	ldd	r24, Y+1	; 0x01
    68a6:	80 93 f5 01 	sts	0x01F5, r24
	prayerstime[9] = M;
    68aa:	8a 81       	ldd	r24, Y+2	; 0x02
    68ac:	80 93 f6 01 	sts	0x01F6, r24
}
    68b0:	0f 90       	pop	r0
    68b2:	0f 90       	pop	r0
    68b4:	0f 90       	pop	r0
    68b6:	0f 90       	pop	r0
    68b8:	cf 91       	pop	r28
    68ba:	df 91       	pop	r29
    68bc:	08 95       	ret

000068be <dispaly_prayer>:
void dispaly_prayer()
{
    68be:	df 93       	push	r29
    68c0:	cf 93       	push	r28
    68c2:	00 d0       	rcall	.+0      	; 0x68c4 <dispaly_prayer+0x6>
    68c4:	00 d0       	rcall	.+0      	; 0x68c6 <dispaly_prayer+0x8>
    68c6:	cd b7       	in	r28, 0x3d	; 61
    68c8:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    68ca:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	LCD_DisplayString("Fajr:");
    68ce:	8a ef       	ldi	r24, 0xFA	; 250
    68d0:	90 e0       	ldi	r25, 0x00	; 0
    68d2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	u16 y = Clock_Get_Fajr();
    68d6:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <Clock_Get_Fajr>
    68da:	9c 83       	std	Y+4, r25	; 0x04
    68dc:	8b 83       	std	Y+3, r24	; 0x03
	u8 M = y % 100;
    68de:	8b 81       	ldd	r24, Y+3	; 0x03
    68e0:	9c 81       	ldd	r25, Y+4	; 0x04
    68e2:	24 e6       	ldi	r18, 0x64	; 100
    68e4:	30 e0       	ldi	r19, 0x00	; 0
    68e6:	b9 01       	movw	r22, r18
    68e8:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    68ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 H = y / 100; // 5/10 5
    68ee:	8b 81       	ldd	r24, Y+3	; 0x03
    68f0:	9c 81       	ldd	r25, Y+4	; 0x04
    68f2:	24 e6       	ldi	r18, 0x64	; 100
    68f4:	30 e0       	ldi	r19, 0x00	; 0
    68f6:	b9 01       	movw	r22, r18
    68f8:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    68fc:	cb 01       	movw	r24, r22
    68fe:	89 83       	std	Y+1, r24	; 0x01
	y = 0;
    6900:	1c 82       	std	Y+4, r1	; 0x04
    6902:	1b 82       	std	Y+3, r1	; 0x03

	LCD_DisplayNumber(H / 10);
    6904:	89 81       	ldd	r24, Y+1	; 0x01
    6906:	9a e0       	ldi	r25, 0x0A	; 10
    6908:	69 2f       	mov	r22, r25
    690a:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    690e:	88 2f       	mov	r24, r24
    6910:	90 e0       	ldi	r25, 0x00	; 0
    6912:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(H % 10);
    6916:	89 81       	ldd	r24, Y+1	; 0x01
    6918:	9a e0       	ldi	r25, 0x0A	; 10
    691a:	69 2f       	mov	r22, r25
    691c:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6920:	89 2f       	mov	r24, r25
    6922:	88 2f       	mov	r24, r24
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayString(":");
    692a:	80 e0       	ldi	r24, 0x00	; 0
    692c:	91 e0       	ldi	r25, 0x01	; 1
    692e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	LCD_DisplayNumber(M / 10);
    6932:	8a 81       	ldd	r24, Y+2	; 0x02
    6934:	9a e0       	ldi	r25, 0x0A	; 10
    6936:	69 2f       	mov	r22, r25
    6938:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    693c:	88 2f       	mov	r24, r24
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(M % 10);
    6944:	8a 81       	ldd	r24, Y+2	; 0x02
    6946:	9a e0       	ldi	r25, 0x0A	; 10
    6948:	69 2f       	mov	r22, r25
    694a:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    694e:	89 2f       	mov	r24, r25
    6950:	88 2f       	mov	r24, r24
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>

	LCD_DisplayString(" Dhr:");
    6958:	82 e0       	ldi	r24, 0x02	; 2
    695a:	91 e0       	ldi	r25, 0x01	; 1
    695c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	y = Clock_Get_Dhuhr();
    6960:	0e 94 83 27 	call	0x4f06	; 0x4f06 <Clock_Get_Dhuhr>
    6964:	9c 83       	std	Y+4, r25	; 0x04
    6966:	8b 83       	std	Y+3, r24	; 0x03
	M = y % 100;
    6968:	8b 81       	ldd	r24, Y+3	; 0x03
    696a:	9c 81       	ldd	r25, Y+4	; 0x04
    696c:	24 e6       	ldi	r18, 0x64	; 100
    696e:	30 e0       	ldi	r19, 0x00	; 0
    6970:	b9 01       	movw	r22, r18
    6972:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6976:	8a 83       	std	Y+2, r24	; 0x02
	H = y / 100; // 5/10 5
    6978:	8b 81       	ldd	r24, Y+3	; 0x03
    697a:	9c 81       	ldd	r25, Y+4	; 0x04
    697c:	24 e6       	ldi	r18, 0x64	; 100
    697e:	30 e0       	ldi	r19, 0x00	; 0
    6980:	b9 01       	movw	r22, r18
    6982:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6986:	cb 01       	movw	r24, r22
    6988:	89 83       	std	Y+1, r24	; 0x01
	LCD_DisplayNumber(H / 10);
    698a:	89 81       	ldd	r24, Y+1	; 0x01
    698c:	9a e0       	ldi	r25, 0x0A	; 10
    698e:	69 2f       	mov	r22, r25
    6990:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6994:	88 2f       	mov	r24, r24
    6996:	90 e0       	ldi	r25, 0x00	; 0
    6998:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(H % 10);
    699c:	89 81       	ldd	r24, Y+1	; 0x01
    699e:	9a e0       	ldi	r25, 0x0A	; 10
    69a0:	69 2f       	mov	r22, r25
    69a2:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    69a6:	89 2f       	mov	r24, r25
    69a8:	88 2f       	mov	r24, r24
    69aa:	90 e0       	ldi	r25, 0x00	; 0
    69ac:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayString(":");
    69b0:	80 e0       	ldi	r24, 0x00	; 0
    69b2:	91 e0       	ldi	r25, 0x01	; 1
    69b4:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	LCD_DisplayNumber(M / 10);
    69b8:	8a 81       	ldd	r24, Y+2	; 0x02
    69ba:	9a e0       	ldi	r25, 0x0A	; 10
    69bc:	69 2f       	mov	r22, r25
    69be:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    69c2:	88 2f       	mov	r24, r24
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(M % 10);
    69ca:	8a 81       	ldd	r24, Y+2	; 0x02
    69cc:	9a e0       	ldi	r25, 0x0A	; 10
    69ce:	69 2f       	mov	r22, r25
    69d0:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    69d4:	89 2f       	mov	r24, r25
    69d6:	88 2f       	mov	r24, r24
    69d8:	90 e0       	ldi	r25, 0x00	; 0
    69da:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	y = 0;
    69de:	1c 82       	std	Y+4, r1	; 0x04
    69e0:	1b 82       	std	Y+3, r1	; 0x03

	LCD_DisplayString(" Asr:");
    69e2:	88 e0       	ldi	r24, 0x08	; 8
    69e4:	91 e0       	ldi	r25, 0x01	; 1
    69e6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	y = Clock_Get_Asr();
    69ea:	0e 94 24 28 	call	0x5048	; 0x5048 <Clock_Get_Asr>
    69ee:	9c 83       	std	Y+4, r25	; 0x04
    69f0:	8b 83       	std	Y+3, r24	; 0x03
	M = y % 100;
    69f2:	8b 81       	ldd	r24, Y+3	; 0x03
    69f4:	9c 81       	ldd	r25, Y+4	; 0x04
    69f6:	24 e6       	ldi	r18, 0x64	; 100
    69f8:	30 e0       	ldi	r19, 0x00	; 0
    69fa:	b9 01       	movw	r22, r18
    69fc:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6a00:	8a 83       	std	Y+2, r24	; 0x02
	H = y / 100; // 5/10 5
    6a02:	8b 81       	ldd	r24, Y+3	; 0x03
    6a04:	9c 81       	ldd	r25, Y+4	; 0x04
    6a06:	24 e6       	ldi	r18, 0x64	; 100
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	b9 01       	movw	r22, r18
    6a0c:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6a10:	cb 01       	movw	r24, r22
    6a12:	89 83       	std	Y+1, r24	; 0x01
	LCD_DisplayNumber(H / 10);
    6a14:	89 81       	ldd	r24, Y+1	; 0x01
    6a16:	9a e0       	ldi	r25, 0x0A	; 10
    6a18:	69 2f       	mov	r22, r25
    6a1a:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6a1e:	88 2f       	mov	r24, r24
    6a20:	90 e0       	ldi	r25, 0x00	; 0
    6a22:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(H % 10);
    6a26:	89 81       	ldd	r24, Y+1	; 0x01
    6a28:	9a e0       	ldi	r25, 0x0A	; 10
    6a2a:	69 2f       	mov	r22, r25
    6a2c:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6a30:	89 2f       	mov	r24, r25
    6a32:	88 2f       	mov	r24, r24
    6a34:	90 e0       	ldi	r25, 0x00	; 0
    6a36:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayString(":");
    6a3a:	80 e0       	ldi	r24, 0x00	; 0
    6a3c:	91 e0       	ldi	r25, 0x01	; 1
    6a3e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	LCD_DisplayNumber(M / 10);
    6a42:	8a 81       	ldd	r24, Y+2	; 0x02
    6a44:	9a e0       	ldi	r25, 0x0A	; 10
    6a46:	69 2f       	mov	r22, r25
    6a48:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6a4c:	88 2f       	mov	r24, r24
    6a4e:	90 e0       	ldi	r25, 0x00	; 0
    6a50:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(M % 10);
    6a54:	8a 81       	ldd	r24, Y+2	; 0x02
    6a56:	9a e0       	ldi	r25, 0x0A	; 10
    6a58:	69 2f       	mov	r22, r25
    6a5a:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6a5e:	89 2f       	mov	r24, r25
    6a60:	88 2f       	mov	r24, r24
    6a62:	90 e0       	ldi	r25, 0x00	; 0
    6a64:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	y = 0;
    6a68:	1c 82       	std	Y+4, r1	; 0x04
    6a6a:	1b 82       	std	Y+3, r1	; 0x03

	LCD_SetCursorPosition(1, 0);
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
    6a6e:	60 e0       	ldi	r22, 0x00	; 0
    6a70:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>

	LCD_DisplayString("Magh:");
    6a74:	8e e0       	ldi	r24, 0x0E	; 14
    6a76:	91 e0       	ldi	r25, 0x01	; 1
    6a78:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	y = Clock_Get_Maghrib();
    6a7c:	0e 94 c5 28 	call	0x518a	; 0x518a <Clock_Get_Maghrib>
    6a80:	9c 83       	std	Y+4, r25	; 0x04
    6a82:	8b 83       	std	Y+3, r24	; 0x03
	M = y % 100;
    6a84:	8b 81       	ldd	r24, Y+3	; 0x03
    6a86:	9c 81       	ldd	r25, Y+4	; 0x04
    6a88:	24 e6       	ldi	r18, 0x64	; 100
    6a8a:	30 e0       	ldi	r19, 0x00	; 0
    6a8c:	b9 01       	movw	r22, r18
    6a8e:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6a92:	8a 83       	std	Y+2, r24	; 0x02
	H = y / 100; // 5/10 5
    6a94:	8b 81       	ldd	r24, Y+3	; 0x03
    6a96:	9c 81       	ldd	r25, Y+4	; 0x04
    6a98:	24 e6       	ldi	r18, 0x64	; 100
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
    6a9c:	b9 01       	movw	r22, r18
    6a9e:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6aa2:	cb 01       	movw	r24, r22
    6aa4:	89 83       	std	Y+1, r24	; 0x01
	LCD_DisplayNumber(H / 10);
    6aa6:	89 81       	ldd	r24, Y+1	; 0x01
    6aa8:	9a e0       	ldi	r25, 0x0A	; 10
    6aaa:	69 2f       	mov	r22, r25
    6aac:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6ab0:	88 2f       	mov	r24, r24
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(H % 10);
    6ab8:	89 81       	ldd	r24, Y+1	; 0x01
    6aba:	9a e0       	ldi	r25, 0x0A	; 10
    6abc:	69 2f       	mov	r22, r25
    6abe:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6ac2:	89 2f       	mov	r24, r25
    6ac4:	88 2f       	mov	r24, r24
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayString(":");
    6acc:	80 e0       	ldi	r24, 0x00	; 0
    6ace:	91 e0       	ldi	r25, 0x01	; 1
    6ad0:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	LCD_DisplayNumber(M / 10);
    6ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    6ad6:	9a e0       	ldi	r25, 0x0A	; 10
    6ad8:	69 2f       	mov	r22, r25
    6ada:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6ade:	88 2f       	mov	r24, r24
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(M % 10);
    6ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae8:	9a e0       	ldi	r25, 0x0A	; 10
    6aea:	69 2f       	mov	r22, r25
    6aec:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6af0:	89 2f       	mov	r24, r25
    6af2:	88 2f       	mov	r24, r24
    6af4:	90 e0       	ldi	r25, 0x00	; 0
    6af6:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	y = 0;
    6afa:	1c 82       	std	Y+4, r1	; 0x04
    6afc:	1b 82       	std	Y+3, r1	; 0x03

	LCD_DisplayString(" Isha:");
    6afe:	84 e1       	ldi	r24, 0x14	; 20
    6b00:	91 e0       	ldi	r25, 0x01	; 1
    6b02:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	y = Clock_Get_Isha();
    6b06:	0e 94 66 29 	call	0x52cc	; 0x52cc <Clock_Get_Isha>
    6b0a:	9c 83       	std	Y+4, r25	; 0x04
    6b0c:	8b 83       	std	Y+3, r24	; 0x03
	M = y % 100;
    6b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b10:	9c 81       	ldd	r25, Y+4	; 0x04
    6b12:	24 e6       	ldi	r18, 0x64	; 100
    6b14:	30 e0       	ldi	r19, 0x00	; 0
    6b16:	b9 01       	movw	r22, r18
    6b18:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6b1c:	8a 83       	std	Y+2, r24	; 0x02
	H = y / 100; // 5/10 5
    6b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b20:	9c 81       	ldd	r25, Y+4	; 0x04
    6b22:	24 e6       	ldi	r18, 0x64	; 100
    6b24:	30 e0       	ldi	r19, 0x00	; 0
    6b26:	b9 01       	movw	r22, r18
    6b28:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <__udivmodhi4>
    6b2c:	cb 01       	movw	r24, r22
    6b2e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DisplayNumber(H / 10);
    6b30:	89 81       	ldd	r24, Y+1	; 0x01
    6b32:	9a e0       	ldi	r25, 0x0A	; 10
    6b34:	69 2f       	mov	r22, r25
    6b36:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6b3a:	88 2f       	mov	r24, r24
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(H % 10);
    6b42:	89 81       	ldd	r24, Y+1	; 0x01
    6b44:	9a e0       	ldi	r25, 0x0A	; 10
    6b46:	69 2f       	mov	r22, r25
    6b48:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6b4c:	89 2f       	mov	r24, r25
    6b4e:	88 2f       	mov	r24, r24
    6b50:	90 e0       	ldi	r25, 0x00	; 0
    6b52:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayString(":");
    6b56:	80 e0       	ldi	r24, 0x00	; 0
    6b58:	91 e0       	ldi	r25, 0x01	; 1
    6b5a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	LCD_DisplayNumber(M / 10);
    6b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b60:	9a e0       	ldi	r25, 0x0A	; 10
    6b62:	69 2f       	mov	r22, r25
    6b64:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6b68:	88 2f       	mov	r24, r24
    6b6a:	90 e0       	ldi	r25, 0x00	; 0
    6b6c:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	LCD_DisplayNumber(M % 10);
    6b70:	8a 81       	ldd	r24, Y+2	; 0x02
    6b72:	9a e0       	ldi	r25, 0x0A	; 10
    6b74:	69 2f       	mov	r22, r25
    6b76:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__udivmodqi4>
    6b7a:	89 2f       	mov	r24, r25
    6b7c:	88 2f       	mov	r24, r24
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
}
    6b84:	0f 90       	pop	r0
    6b86:	0f 90       	pop	r0
    6b88:	0f 90       	pop	r0
    6b8a:	0f 90       	pop	r0
    6b8c:	cf 91       	pop	r28
    6b8e:	df 91       	pop	r29
    6b90:	08 95       	ret

00006b92 <set_Clock_Settings>:
void set_Clock_Settings()
{
    6b92:	df 93       	push	r29
    6b94:	cf 93       	push	r28
    6b96:	00 d0       	rcall	.+0      	; 0x6b98 <set_Clock_Settings+0x6>
    6b98:	00 d0       	rcall	.+0      	; 0x6b9a <set_Clock_Settings+0x8>
    6b9a:	0f 92       	push	r0
    6b9c:	cd b7       	in	r28, 0x3d	; 61
    6b9e:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    6ba0:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	LCD_DisplayString("Clock settings..");
    6ba4:	8b e1       	ldi	r24, 0x1B	; 27
    6ba6:	91 e0       	ldi	r25, 0x01	; 1
    6ba8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	//_delay_ms(1000);
	LCD_Clear();
    6bac:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	Keypad_ButtonType pressed_button;
	LCD_DisplayString("Hour:");
    6bb0:	8c e2       	ldi	r24, 0x2C	; 44
    6bb2:	91 e0       	ldi	r25, 0x01	; 1
    6bb4:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	do
	{
		pressed_button = Keypad_GetPressedButton();
    6bb8:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6bbc:	8d 83       	std	Y+5, r24	; 0x05
	} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    6bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    6bc0:	80 31       	cpi	r24, 0x10	; 16
    6bc2:	d1 f3       	breq	.-12     	; 0x6bb8 <set_Clock_Settings+0x26>
    6bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    6bc6:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6bca:	88 23       	and	r24, r24
    6bcc:	a9 f3       	breq	.-22     	; 0x6bb8 <set_Clock_Settings+0x26>
	// LCD_DisplayString("Fjr1:");
	if ((pressed_button != KEYPAD_BUTTON_INVALID))
    6bce:	8d 81       	ldd	r24, Y+5	; 0x05
    6bd0:	80 31       	cpi	r24, 0x10	; 16
    6bd2:	09 f4       	brne	.+2      	; 0x6bd6 <set_Clock_Settings+0x44>
    6bd4:	9c c0       	rjmp	.+312    	; 0x6d0e <set_Clock_Settings+0x17c>
	{
		if (Check_IS_Anumber(pressed_button))
    6bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    6bd8:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6bdc:	88 23       	and	r24, r24
    6bde:	09 f4       	brne	.+2      	; 0x6be2 <set_Clock_Settings+0x50>
    6be0:	92 c0       	rjmp	.+292    	; 0x6d06 <set_Clock_Settings+0x174>
		{
			u8 x = Calculator_GetRealNumber(pressed_button); // 1
    6be2:	8d 81       	ldd	r24, Y+5	; 0x05
    6be4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6be8:	8c 83       	std	Y+4, r24	; 0x04
			LCD_DisplayNumber(x);
    6bea:	8c 81       	ldd	r24, Y+4	; 0x04
    6bec:	88 2f       	mov	r24, r24
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6bf4:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6bf8:	8d 83       	std	Y+5, r24	; 0x05
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    6bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    6bfc:	80 31       	cpi	r24, 0x10	; 16
    6bfe:	d1 f3       	breq	.-12     	; 0x6bf4 <set_Clock_Settings+0x62>
    6c00:	8d 81       	ldd	r24, Y+5	; 0x05
    6c02:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6c06:	88 23       	and	r24, r24
    6c08:	a9 f3       	breq	.-22     	; 0x6bf4 <set_Clock_Settings+0x62>
			u8 x1 = Calculator_GetRealNumber(pressed_button);
    6c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c0c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6c10:	8b 83       	std	Y+3, r24	; 0x03
			LCD_DisplayNumber(x1);
    6c12:	8b 81       	ldd	r24, Y+3	; 0x03
    6c14:	88 2f       	mov	r24, r24
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			LCD_DisplayString(":"); // 12:
    6c1c:	80 e0       	ldi	r24, 0x00	; 0
    6c1e:	91 e0       	ldi	r25, 0x01	; 1
    6c20:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6c24:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6c28:	8d 83       	std	Y+5, r24	; 0x05
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    6c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c2c:	80 31       	cpi	r24, 0x10	; 16
    6c2e:	d1 f3       	breq	.-12     	; 0x6c24 <set_Clock_Settings+0x92>
    6c30:	8d 81       	ldd	r24, Y+5	; 0x05
    6c32:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6c36:	88 23       	and	r24, r24
    6c38:	a9 f3       	breq	.-22     	; 0x6c24 <set_Clock_Settings+0x92>
			u8 x2 = Calculator_GetRealNumber(pressed_button);
    6c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c3c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6c40:	8a 83       	std	Y+2, r24	; 0x02
			LCD_DisplayNumber(x2);
    6c42:	8a 81       	ldd	r24, Y+2	; 0x02
    6c44:	88 2f       	mov	r24, r24
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6c4c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6c50:	8d 83       	std	Y+5, r24	; 0x05
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    6c52:	8d 81       	ldd	r24, Y+5	; 0x05
    6c54:	80 31       	cpi	r24, 0x10	; 16
    6c56:	d1 f3       	breq	.-12     	; 0x6c4c <set_Clock_Settings+0xba>
    6c58:	8d 81       	ldd	r24, Y+5	; 0x05
    6c5a:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6c5e:	88 23       	and	r24, r24
    6c60:	a9 f3       	breq	.-22     	; 0x6c4c <set_Clock_Settings+0xba>
			u8 x3 = Calculator_GetRealNumber(pressed_button);
    6c62:	8d 81       	ldd	r24, Y+5	; 0x05
    6c64:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6c68:	89 83       	std	Y+1, r24	; 0x01
			LCD_DisplayNumber(x3);
    6c6a:	89 81       	ldd	r24, Y+1	; 0x01
    6c6c:	88 2f       	mov	r24, r24
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			Clock_Set_Hour((u8)(x * 10 + x1), (u8)(x2 * 10 + x3));
    6c74:	8c 81       	ldd	r24, Y+4	; 0x04
    6c76:	88 2f       	mov	r24, r24
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	9c 01       	movw	r18, r24
    6c7c:	22 0f       	add	r18, r18
    6c7e:	33 1f       	adc	r19, r19
    6c80:	c9 01       	movw	r24, r18
    6c82:	88 0f       	add	r24, r24
    6c84:	99 1f       	adc	r25, r25
    6c86:	88 0f       	add	r24, r24
    6c88:	99 1f       	adc	r25, r25
    6c8a:	82 0f       	add	r24, r18
    6c8c:	93 1f       	adc	r25, r19
    6c8e:	98 2f       	mov	r25, r24
    6c90:	8b 81       	ldd	r24, Y+3	; 0x03
    6c92:	49 2f       	mov	r20, r25
    6c94:	48 0f       	add	r20, r24
    6c96:	8a 81       	ldd	r24, Y+2	; 0x02
    6c98:	88 2f       	mov	r24, r24
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	9c 01       	movw	r18, r24
    6c9e:	22 0f       	add	r18, r18
    6ca0:	33 1f       	adc	r19, r19
    6ca2:	c9 01       	movw	r24, r18
    6ca4:	88 0f       	add	r24, r24
    6ca6:	99 1f       	adc	r25, r25
    6ca8:	88 0f       	add	r24, r24
    6caa:	99 1f       	adc	r25, r25
    6cac:	82 0f       	add	r24, r18
    6cae:	93 1f       	adc	r25, r19
    6cb0:	98 2f       	mov	r25, r24
    6cb2:	89 81       	ldd	r24, Y+1	; 0x01
    6cb4:	98 0f       	add	r25, r24
    6cb6:	84 2f       	mov	r24, r20
    6cb8:	69 2f       	mov	r22, r25
    6cba:	0e 94 29 22 	call	0x4452	; 0x4452 <Clock_Set_Hour>
			Clocktime[0] = (u8)(x * 10 + x1);
    6cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    6cc0:	88 2f       	mov	r24, r24
    6cc2:	90 e0       	ldi	r25, 0x00	; 0
    6cc4:	9c 01       	movw	r18, r24
    6cc6:	22 0f       	add	r18, r18
    6cc8:	33 1f       	adc	r19, r19
    6cca:	c9 01       	movw	r24, r18
    6ccc:	88 0f       	add	r24, r24
    6cce:	99 1f       	adc	r25, r25
    6cd0:	88 0f       	add	r24, r24
    6cd2:	99 1f       	adc	r25, r25
    6cd4:	82 0f       	add	r24, r18
    6cd6:	93 1f       	adc	r25, r19
    6cd8:	98 2f       	mov	r25, r24
    6cda:	8b 81       	ldd	r24, Y+3	; 0x03
    6cdc:	89 0f       	add	r24, r25
    6cde:	80 93 d4 01 	sts	0x01D4, r24
			Clocktime[1] = (u8)(x2 * 10 + x3);
    6ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ce4:	88 2f       	mov	r24, r24
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	9c 01       	movw	r18, r24
    6cea:	22 0f       	add	r18, r18
    6cec:	33 1f       	adc	r19, r19
    6cee:	c9 01       	movw	r24, r18
    6cf0:	88 0f       	add	r24, r24
    6cf2:	99 1f       	adc	r25, r25
    6cf4:	88 0f       	add	r24, r24
    6cf6:	99 1f       	adc	r25, r25
    6cf8:	82 0f       	add	r24, r18
    6cfa:	93 1f       	adc	r25, r19
    6cfc:	98 2f       	mov	r25, r24
    6cfe:	89 81       	ldd	r24, Y+1	; 0x01
    6d00:	89 0f       	add	r24, r25
    6d02:	80 93 d5 01 	sts	0x01D5, r24
		}
		LCD_DisplayString("Done...");
    6d06:	82 e3       	ldi	r24, 0x32	; 50
    6d08:	91 e0       	ldi	r25, 0x01	; 1
    6d0a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
		// _delay_ms(5000);
	}
}
    6d0e:	0f 90       	pop	r0
    6d10:	0f 90       	pop	r0
    6d12:	0f 90       	pop	r0
    6d14:	0f 90       	pop	r0
    6d16:	0f 90       	pop	r0
    6d18:	cf 91       	pop	r28
    6d1a:	df 91       	pop	r29
    6d1c:	08 95       	ret

00006d1e <Set_Prayer_Time>:
void Set_Prayer_Time(u8 **prayerstime)
{
    6d1e:	df 93       	push	r29
    6d20:	cf 93       	push	r28
    6d22:	cd b7       	in	r28, 0x3d	; 61
    6d24:	de b7       	in	r29, 0x3e	; 62
    6d26:	65 97       	sbiw	r28, 0x15	; 21
    6d28:	0f b6       	in	r0, 0x3f	; 63
    6d2a:	f8 94       	cli
    6d2c:	de bf       	out	0x3e, r29	; 62
    6d2e:	0f be       	out	0x3f, r0	; 63
    6d30:	cd bf       	out	0x3d, r28	; 61
    6d32:	9d 8b       	std	Y+21, r25	; 0x15
    6d34:	8c 8b       	std	Y+20, r24	; 0x14
	// u8 prayerstime[20];
	LCD_Clear();
    6d36:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	LCD_DisplayString("Prayers clock settings");
    6d3a:	8a e3       	ldi	r24, 0x3A	; 58
    6d3c:	91 e0       	ldi	r25, 0x01	; 1
    6d3e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
    6d42:	80 e0       	ldi	r24, 0x00	; 0
    6d44:	90 e0       	ldi	r25, 0x00	; 0
    6d46:	aa e7       	ldi	r26, 0x7A	; 122
    6d48:	b4 e4       	ldi	r27, 0x44	; 68
    6d4a:	8b 87       	std	Y+11, r24	; 0x0b
    6d4c:	9c 87       	std	Y+12, r25	; 0x0c
    6d4e:	ad 87       	std	Y+13, r26	; 0x0d
    6d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d5a:	20 e0       	ldi	r18, 0x00	; 0
    6d5c:	30 e0       	ldi	r19, 0x00	; 0
    6d5e:	4a ef       	ldi	r20, 0xFA	; 250
    6d60:	54 e4       	ldi	r21, 0x44	; 68
    6d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d66:	dc 01       	movw	r26, r24
    6d68:	cb 01       	movw	r24, r22
    6d6a:	8f 83       	std	Y+7, r24	; 0x07
    6d6c:	98 87       	std	Y+8, r25	; 0x08
    6d6e:	a9 87       	std	Y+9, r26	; 0x09
    6d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d72:	6f 81       	ldd	r22, Y+7	; 0x07
    6d74:	78 85       	ldd	r23, Y+8	; 0x08
    6d76:	89 85       	ldd	r24, Y+9	; 0x09
    6d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d7a:	20 e0       	ldi	r18, 0x00	; 0
    6d7c:	30 e0       	ldi	r19, 0x00	; 0
    6d7e:	40 e8       	ldi	r20, 0x80	; 128
    6d80:	5f e3       	ldi	r21, 0x3F	; 63
    6d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6d86:	88 23       	and	r24, r24
    6d88:	2c f4       	brge	.+10     	; 0x6d94 <Set_Prayer_Time+0x76>
		__ticks = 1;
    6d8a:	81 e0       	ldi	r24, 0x01	; 1
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	9e 83       	std	Y+6, r25	; 0x06
    6d90:	8d 83       	std	Y+5, r24	; 0x05
    6d92:	3f c0       	rjmp	.+126    	; 0x6e12 <Set_Prayer_Time+0xf4>
	else if (__tmp > 65535)
    6d94:	6f 81       	ldd	r22, Y+7	; 0x07
    6d96:	78 85       	ldd	r23, Y+8	; 0x08
    6d98:	89 85       	ldd	r24, Y+9	; 0x09
    6d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d9c:	20 e0       	ldi	r18, 0x00	; 0
    6d9e:	3f ef       	ldi	r19, 0xFF	; 255
    6da0:	4f e7       	ldi	r20, 0x7F	; 127
    6da2:	57 e4       	ldi	r21, 0x47	; 71
    6da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6da8:	18 16       	cp	r1, r24
    6daa:	4c f5       	brge	.+82     	; 0x6dfe <Set_Prayer_Time+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    6dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    6db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6db4:	20 e0       	ldi	r18, 0x00	; 0
    6db6:	30 e0       	ldi	r19, 0x00	; 0
    6db8:	40 e2       	ldi	r20, 0x20	; 32
    6dba:	51 e4       	ldi	r21, 0x41	; 65
    6dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6dc0:	dc 01       	movw	r26, r24
    6dc2:	cb 01       	movw	r24, r22
    6dc4:	bc 01       	movw	r22, r24
    6dc6:	cd 01       	movw	r24, r26
    6dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dcc:	dc 01       	movw	r26, r24
    6dce:	cb 01       	movw	r24, r22
    6dd0:	9e 83       	std	Y+6, r25	; 0x06
    6dd2:	8d 83       	std	Y+5, r24	; 0x05
    6dd4:	0f c0       	rjmp	.+30     	; 0x6df4 <Set_Prayer_Time+0xd6>
    6dd6:	88 ec       	ldi	r24, 0xC8	; 200
    6dd8:	90 e0       	ldi	r25, 0x00	; 0
    6dda:	9c 83       	std	Y+4, r25	; 0x04
    6ddc:	8b 83       	std	Y+3, r24	; 0x03
    6dde:	8b 81       	ldd	r24, Y+3	; 0x03
    6de0:	9c 81       	ldd	r25, Y+4	; 0x04
    6de2:	01 97       	sbiw	r24, 0x01	; 1
    6de4:	f1 f7       	brne	.-4      	; 0x6de2 <Set_Prayer_Time+0xc4>
    6de6:	9c 83       	std	Y+4, r25	; 0x04
    6de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6dea:	8d 81       	ldd	r24, Y+5	; 0x05
    6dec:	9e 81       	ldd	r25, Y+6	; 0x06
    6dee:	01 97       	sbiw	r24, 0x01	; 1
    6df0:	9e 83       	std	Y+6, r25	; 0x06
    6df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6df4:	8d 81       	ldd	r24, Y+5	; 0x05
    6df6:	9e 81       	ldd	r25, Y+6	; 0x06
    6df8:	00 97       	sbiw	r24, 0x00	; 0
    6dfa:	69 f7       	brne	.-38     	; 0x6dd6 <Set_Prayer_Time+0xb8>
    6dfc:	14 c0       	rjmp	.+40     	; 0x6e26 <Set_Prayer_Time+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    6e00:	78 85       	ldd	r23, Y+8	; 0x08
    6e02:	89 85       	ldd	r24, Y+9	; 0x09
    6e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e0a:	dc 01       	movw	r26, r24
    6e0c:	cb 01       	movw	r24, r22
    6e0e:	9e 83       	std	Y+6, r25	; 0x06
    6e10:	8d 83       	std	Y+5, r24	; 0x05
    6e12:	8d 81       	ldd	r24, Y+5	; 0x05
    6e14:	9e 81       	ldd	r25, Y+6	; 0x06
    6e16:	9a 83       	std	Y+2, r25	; 0x02
    6e18:	89 83       	std	Y+1, r24	; 0x01
    6e1a:	89 81       	ldd	r24, Y+1	; 0x01
    6e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    6e1e:	01 97       	sbiw	r24, 0x01	; 1
    6e20:	f1 f7       	brne	.-4      	; 0x6e1e <Set_Prayer_Time+0x100>
    6e22:	9a 83       	std	Y+2, r25	; 0x02
    6e24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_Clear();
    6e26:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	Keypad_ButtonType pressed_button;
	LCD_DisplayString("Fjr:");
    6e2a:	81 e5       	ldi	r24, 0x51	; 81
    6e2c:	91 e0       	ldi	r25, 0x01	; 1
    6e2e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	do
	{
		pressed_button = Keypad_GetPressedButton();
    6e32:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6e36:	8b 8b       	std	Y+19, r24	; 0x13
	} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    6e38:	8b 89       	ldd	r24, Y+19	; 0x13
    6e3a:	80 31       	cpi	r24, 0x10	; 16
    6e3c:	d1 f3       	breq	.-12     	; 0x6e32 <Set_Prayer_Time+0x114>
    6e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    6e40:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6e44:	88 23       	and	r24, r24
    6e46:	a9 f3       	breq	.-22     	; 0x6e32 <Set_Prayer_Time+0x114>
	// LCD_DisplayString("Fjr1:");
	if ((pressed_button != KEYPAD_BUTTON_INVALID))
    6e48:	8b 89       	ldd	r24, Y+19	; 0x13
    6e4a:	80 31       	cpi	r24, 0x10	; 16
    6e4c:	09 f4       	brne	.+2      	; 0x6e50 <Set_Prayer_Time+0x132>
    6e4e:	5a c3       	rjmp	.+1716   	; 0x7504 <Set_Prayer_Time+0x7e6>
	{
		if (Check_IS_Anumber(pressed_button))
    6e50:	8b 89       	ldd	r24, Y+19	; 0x13
    6e52:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6e56:	88 23       	and	r24, r24
    6e58:	09 f4       	brne	.+2      	; 0x6e5c <Set_Prayer_Time+0x13e>
    6e5a:	54 c3       	rjmp	.+1704   	; 0x7504 <Set_Prayer_Time+0x7e6>
		{
			u8 x = Calculator_GetRealNumber(pressed_button); // 1
    6e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    6e5e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6e62:	8a 8b       	std	Y+18, r24	; 0x12
			LCD_DisplayNumber(x);
    6e64:	8a 89       	ldd	r24, Y+18	; 0x12
    6e66:	88 2f       	mov	r24, r24
    6e68:	90 e0       	ldi	r25, 0x00	; 0
    6e6a:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6e6e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6e72:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    6e74:	8b 89       	ldd	r24, Y+19	; 0x13
    6e76:	80 31       	cpi	r24, 0x10	; 16
    6e78:	d1 f3       	breq	.-12     	; 0x6e6e <Set_Prayer_Time+0x150>
    6e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    6e7c:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6e80:	88 23       	and	r24, r24
    6e82:	a9 f3       	breq	.-22     	; 0x6e6e <Set_Prayer_Time+0x150>
			u8 x1 = Calculator_GetRealNumber(pressed_button);
    6e84:	8b 89       	ldd	r24, Y+19	; 0x13
    6e86:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6e8a:	89 8b       	std	Y+17, r24	; 0x11
			LCD_DisplayNumber(x1);
    6e8c:	89 89       	ldd	r24, Y+17	; 0x11
    6e8e:	88 2f       	mov	r24, r24
    6e90:	90 e0       	ldi	r25, 0x00	; 0
    6e92:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			LCD_DisplayString(":"); // 12:
    6e96:	80 e0       	ldi	r24, 0x00	; 0
    6e98:	91 e0       	ldi	r25, 0x01	; 1
    6e9a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6e9e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6ea2:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    6ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    6ea6:	80 31       	cpi	r24, 0x10	; 16
    6ea8:	d1 f3       	breq	.-12     	; 0x6e9e <Set_Prayer_Time+0x180>
    6eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    6eac:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6eb0:	88 23       	and	r24, r24
    6eb2:	a9 f3       	breq	.-22     	; 0x6e9e <Set_Prayer_Time+0x180>
			u8 x2 = Calculator_GetRealNumber(pressed_button);
    6eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    6eb6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6eba:	88 8b       	std	Y+16, r24	; 0x10
			LCD_DisplayNumber(x2);
    6ebc:	88 89       	ldd	r24, Y+16	; 0x10
    6ebe:	88 2f       	mov	r24, r24
    6ec0:	90 e0       	ldi	r25, 0x00	; 0
    6ec2:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6ec6:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6eca:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    6ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    6ece:	80 31       	cpi	r24, 0x10	; 16
    6ed0:	d1 f3       	breq	.-12     	; 0x6ec6 <Set_Prayer_Time+0x1a8>
    6ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    6ed4:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6ed8:	88 23       	and	r24, r24
    6eda:	a9 f3       	breq	.-22     	; 0x6ec6 <Set_Prayer_Time+0x1a8>
			u8 x3 = Calculator_GetRealNumber(pressed_button);
    6edc:	8b 89       	ldd	r24, Y+19	; 0x13
    6ede:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6ee2:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_DisplayNumber(x3);
    6ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ee6:	88 2f       	mov	r24, r24
    6ee8:	90 e0       	ldi	r25, 0x00	; 0
    6eea:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			//LCD_DisplayString("|");
			Clock_Set_Fajr((u8)(x * 10 + x1), (u8)(x2 * 10 + x3));
    6eee:	8a 89       	ldd	r24, Y+18	; 0x12
    6ef0:	88 2f       	mov	r24, r24
    6ef2:	90 e0       	ldi	r25, 0x00	; 0
    6ef4:	9c 01       	movw	r18, r24
    6ef6:	22 0f       	add	r18, r18
    6ef8:	33 1f       	adc	r19, r19
    6efa:	c9 01       	movw	r24, r18
    6efc:	88 0f       	add	r24, r24
    6efe:	99 1f       	adc	r25, r25
    6f00:	88 0f       	add	r24, r24
    6f02:	99 1f       	adc	r25, r25
    6f04:	82 0f       	add	r24, r18
    6f06:	93 1f       	adc	r25, r19
    6f08:	98 2f       	mov	r25, r24
    6f0a:	89 89       	ldd	r24, Y+17	; 0x11
    6f0c:	49 2f       	mov	r20, r25
    6f0e:	48 0f       	add	r20, r24
    6f10:	88 89       	ldd	r24, Y+16	; 0x10
    6f12:	88 2f       	mov	r24, r24
    6f14:	90 e0       	ldi	r25, 0x00	; 0
    6f16:	9c 01       	movw	r18, r24
    6f18:	22 0f       	add	r18, r18
    6f1a:	33 1f       	adc	r19, r19
    6f1c:	c9 01       	movw	r24, r18
    6f1e:	88 0f       	add	r24, r24
    6f20:	99 1f       	adc	r25, r25
    6f22:	88 0f       	add	r24, r24
    6f24:	99 1f       	adc	r25, r25
    6f26:	82 0f       	add	r24, r18
    6f28:	93 1f       	adc	r25, r19
    6f2a:	98 2f       	mov	r25, r24
    6f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f2e:	98 0f       	add	r25, r24
    6f30:	84 2f       	mov	r24, r20
    6f32:	69 2f       	mov	r22, r25
    6f34:	0e 94 cb 22 	call	0x4596	; 0x4596 <Clock_Set_Fajr>
			prayerstime[0] = (u8)(x * 10 + x1);
    6f38:	8a 89       	ldd	r24, Y+18	; 0x12
    6f3a:	88 2f       	mov	r24, r24
    6f3c:	90 e0       	ldi	r25, 0x00	; 0
    6f3e:	9c 01       	movw	r18, r24
    6f40:	22 0f       	add	r18, r18
    6f42:	33 1f       	adc	r19, r19
    6f44:	c9 01       	movw	r24, r18
    6f46:	88 0f       	add	r24, r24
    6f48:	99 1f       	adc	r25, r25
    6f4a:	88 0f       	add	r24, r24
    6f4c:	99 1f       	adc	r25, r25
    6f4e:	82 0f       	add	r24, r18
    6f50:	93 1f       	adc	r25, r19
    6f52:	98 2f       	mov	r25, r24
    6f54:	89 89       	ldd	r24, Y+17	; 0x11
    6f56:	89 0f       	add	r24, r25
    6f58:	88 2f       	mov	r24, r24
    6f5a:	90 e0       	ldi	r25, 0x00	; 0
    6f5c:	ec 89       	ldd	r30, Y+20	; 0x14
    6f5e:	fd 89       	ldd	r31, Y+21	; 0x15
    6f60:	91 83       	std	Z+1, r25	; 0x01
    6f62:	80 83       	st	Z, r24
			prayerstime[1] = (u8)(x2 * 10 + x3);
    6f64:	8c 89       	ldd	r24, Y+20	; 0x14
    6f66:	9d 89       	ldd	r25, Y+21	; 0x15
    6f68:	fc 01       	movw	r30, r24
    6f6a:	32 96       	adiw	r30, 0x02	; 2
    6f6c:	88 89       	ldd	r24, Y+16	; 0x10
    6f6e:	88 2f       	mov	r24, r24
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	9c 01       	movw	r18, r24
    6f74:	22 0f       	add	r18, r18
    6f76:	33 1f       	adc	r19, r19
    6f78:	c9 01       	movw	r24, r18
    6f7a:	88 0f       	add	r24, r24
    6f7c:	99 1f       	adc	r25, r25
    6f7e:	88 0f       	add	r24, r24
    6f80:	99 1f       	adc	r25, r25
    6f82:	82 0f       	add	r24, r18
    6f84:	93 1f       	adc	r25, r19
    6f86:	98 2f       	mov	r25, r24
    6f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f8a:	89 0f       	add	r24, r25
    6f8c:	88 2f       	mov	r24, r24
    6f8e:	90 e0       	ldi	r25, 0x00	; 0
    6f90:	91 83       	std	Z+1, r25	; 0x01
    6f92:	80 83       	st	Z, r24
			LCD_DisplayString(" Dhr:");
    6f94:	82 e0       	ldi	r24, 0x02	; 2
    6f96:	91 e0       	ldi	r25, 0x01	; 1
    6f98:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6f9c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6fa0:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    6fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    6fa4:	80 31       	cpi	r24, 0x10	; 16
    6fa6:	d1 f3       	breq	.-12     	; 0x6f9c <Set_Prayer_Time+0x27e>
    6fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    6faa:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6fae:	88 23       	and	r24, r24
    6fb0:	a9 f3       	breq	.-22     	; 0x6f9c <Set_Prayer_Time+0x27e>
			x = Calculator_GetRealNumber(pressed_button);											// 1
    6fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    6fb4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6fb8:	8a 8b       	std	Y+18, r24	; 0x12
			LCD_DisplayNumber(x);
    6fba:	8a 89       	ldd	r24, Y+18	; 0x12
    6fbc:	88 2f       	mov	r24, r24
    6fbe:	90 e0       	ldi	r25, 0x00	; 0
    6fc0:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6fc4:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6fc8:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    6fca:	8b 89       	ldd	r24, Y+19	; 0x13
    6fcc:	80 31       	cpi	r24, 0x10	; 16
    6fce:	d1 f3       	breq	.-12     	; 0x6fc4 <Set_Prayer_Time+0x2a6>
    6fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    6fd2:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    6fd6:	88 23       	and	r24, r24
    6fd8:	a9 f3       	breq	.-22     	; 0x6fc4 <Set_Prayer_Time+0x2a6>
			x1 = Calculator_GetRealNumber(pressed_button);
    6fda:	8b 89       	ldd	r24, Y+19	; 0x13
    6fdc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    6fe0:	89 8b       	std	Y+17, r24	; 0x11
			LCD_DisplayNumber(x1);
    6fe2:	89 89       	ldd	r24, Y+17	; 0x11
    6fe4:	88 2f       	mov	r24, r24
    6fe6:	90 e0       	ldi	r25, 0x00	; 0
    6fe8:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			LCD_DisplayString(":"); // 12:
    6fec:	80 e0       	ldi	r24, 0x00	; 0
    6fee:	91 e0       	ldi	r25, 0x01	; 1
    6ff0:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    6ff4:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    6ff8:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    6ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    6ffc:	80 31       	cpi	r24, 0x10	; 16
    6ffe:	d1 f3       	breq	.-12     	; 0x6ff4 <Set_Prayer_Time+0x2d6>
    7000:	8b 89       	ldd	r24, Y+19	; 0x13
    7002:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    7006:	88 23       	and	r24, r24
    7008:	a9 f3       	breq	.-22     	; 0x6ff4 <Set_Prayer_Time+0x2d6>
			x2 = Calculator_GetRealNumber(pressed_button);
    700a:	8b 89       	ldd	r24, Y+19	; 0x13
    700c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    7010:	88 8b       	std	Y+16, r24	; 0x10
			LCD_DisplayNumber(x2);
    7012:	88 89       	ldd	r24, Y+16	; 0x10
    7014:	88 2f       	mov	r24, r24
    7016:	90 e0       	ldi	r25, 0x00	; 0
    7018:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    701c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    7020:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    7022:	8b 89       	ldd	r24, Y+19	; 0x13
    7024:	80 31       	cpi	r24, 0x10	; 16
    7026:	d1 f3       	breq	.-12     	; 0x701c <Set_Prayer_Time+0x2fe>
    7028:	8b 89       	ldd	r24, Y+19	; 0x13
    702a:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    702e:	88 23       	and	r24, r24
    7030:	a9 f3       	breq	.-22     	; 0x701c <Set_Prayer_Time+0x2fe>
			x3 = Calculator_GetRealNumber(pressed_button);
    7032:	8b 89       	ldd	r24, Y+19	; 0x13
    7034:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    7038:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_DisplayNumber(x3);
    703a:	8f 85       	ldd	r24, Y+15	; 0x0f
    703c:	88 2f       	mov	r24, r24
    703e:	90 e0       	ldi	r25, 0x00	; 0
    7040:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			//LCD_DisplayString("|");
			Clock_Set_Dhuhr((u8)(x * 10 + x1), (u8)(x2 * 10 + x3));
    7044:	8a 89       	ldd	r24, Y+18	; 0x12
    7046:	88 2f       	mov	r24, r24
    7048:	90 e0       	ldi	r25, 0x00	; 0
    704a:	9c 01       	movw	r18, r24
    704c:	22 0f       	add	r18, r18
    704e:	33 1f       	adc	r19, r19
    7050:	c9 01       	movw	r24, r18
    7052:	88 0f       	add	r24, r24
    7054:	99 1f       	adc	r25, r25
    7056:	88 0f       	add	r24, r24
    7058:	99 1f       	adc	r25, r25
    705a:	82 0f       	add	r24, r18
    705c:	93 1f       	adc	r25, r19
    705e:	98 2f       	mov	r25, r24
    7060:	89 89       	ldd	r24, Y+17	; 0x11
    7062:	49 2f       	mov	r20, r25
    7064:	48 0f       	add	r20, r24
    7066:	88 89       	ldd	r24, Y+16	; 0x10
    7068:	88 2f       	mov	r24, r24
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	9c 01       	movw	r18, r24
    706e:	22 0f       	add	r18, r18
    7070:	33 1f       	adc	r19, r19
    7072:	c9 01       	movw	r24, r18
    7074:	88 0f       	add	r24, r24
    7076:	99 1f       	adc	r25, r25
    7078:	88 0f       	add	r24, r24
    707a:	99 1f       	adc	r25, r25
    707c:	82 0f       	add	r24, r18
    707e:	93 1f       	adc	r25, r19
    7080:	98 2f       	mov	r25, r24
    7082:	8f 85       	ldd	r24, Y+15	; 0x0f
    7084:	98 0f       	add	r25, r24
    7086:	84 2f       	mov	r24, r20
    7088:	69 2f       	mov	r22, r25
    708a:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <Clock_Set_Dhuhr>
			prayerstime[2] = (u8)(x * 10 + x1);
    708e:	8c 89       	ldd	r24, Y+20	; 0x14
    7090:	9d 89       	ldd	r25, Y+21	; 0x15
    7092:	fc 01       	movw	r30, r24
    7094:	34 96       	adiw	r30, 0x04	; 4
    7096:	8a 89       	ldd	r24, Y+18	; 0x12
    7098:	88 2f       	mov	r24, r24
    709a:	90 e0       	ldi	r25, 0x00	; 0
    709c:	9c 01       	movw	r18, r24
    709e:	22 0f       	add	r18, r18
    70a0:	33 1f       	adc	r19, r19
    70a2:	c9 01       	movw	r24, r18
    70a4:	88 0f       	add	r24, r24
    70a6:	99 1f       	adc	r25, r25
    70a8:	88 0f       	add	r24, r24
    70aa:	99 1f       	adc	r25, r25
    70ac:	82 0f       	add	r24, r18
    70ae:	93 1f       	adc	r25, r19
    70b0:	98 2f       	mov	r25, r24
    70b2:	89 89       	ldd	r24, Y+17	; 0x11
    70b4:	89 0f       	add	r24, r25
    70b6:	88 2f       	mov	r24, r24
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	91 83       	std	Z+1, r25	; 0x01
    70bc:	80 83       	st	Z, r24
			prayerstime[3] = (u8)(x2 * 10 + x3);
    70be:	8c 89       	ldd	r24, Y+20	; 0x14
    70c0:	9d 89       	ldd	r25, Y+21	; 0x15
    70c2:	fc 01       	movw	r30, r24
    70c4:	36 96       	adiw	r30, 0x06	; 6
    70c6:	88 89       	ldd	r24, Y+16	; 0x10
    70c8:	88 2f       	mov	r24, r24
    70ca:	90 e0       	ldi	r25, 0x00	; 0
    70cc:	9c 01       	movw	r18, r24
    70ce:	22 0f       	add	r18, r18
    70d0:	33 1f       	adc	r19, r19
    70d2:	c9 01       	movw	r24, r18
    70d4:	88 0f       	add	r24, r24
    70d6:	99 1f       	adc	r25, r25
    70d8:	88 0f       	add	r24, r24
    70da:	99 1f       	adc	r25, r25
    70dc:	82 0f       	add	r24, r18
    70de:	93 1f       	adc	r25, r19
    70e0:	98 2f       	mov	r25, r24
    70e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    70e4:	89 0f       	add	r24, r25
    70e6:	88 2f       	mov	r24, r24
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	91 83       	std	Z+1, r25	; 0x01
    70ec:	80 83       	st	Z, r24
			LCD_DisplayString(" Asr:");
    70ee:	88 e0       	ldi	r24, 0x08	; 8
    70f0:	91 e0       	ldi	r25, 0x01	; 1
    70f2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    70f6:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    70fa:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    70fc:	8b 89       	ldd	r24, Y+19	; 0x13
    70fe:	80 31       	cpi	r24, 0x10	; 16
    7100:	d1 f3       	breq	.-12     	; 0x70f6 <Set_Prayer_Time+0x3d8>
    7102:	8b 89       	ldd	r24, Y+19	; 0x13
    7104:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    7108:	88 23       	and	r24, r24
    710a:	a9 f3       	breq	.-22     	; 0x70f6 <Set_Prayer_Time+0x3d8>
			x = Calculator_GetRealNumber(pressed_button);											// 1
    710c:	8b 89       	ldd	r24, Y+19	; 0x13
    710e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    7112:	8a 8b       	std	Y+18, r24	; 0x12
			LCD_DisplayNumber(x);
    7114:	8a 89       	ldd	r24, Y+18	; 0x12
    7116:	88 2f       	mov	r24, r24
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    711e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    7122:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    7124:	8b 89       	ldd	r24, Y+19	; 0x13
    7126:	80 31       	cpi	r24, 0x10	; 16
    7128:	d1 f3       	breq	.-12     	; 0x711e <Set_Prayer_Time+0x400>
    712a:	8b 89       	ldd	r24, Y+19	; 0x13
    712c:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    7130:	88 23       	and	r24, r24
    7132:	a9 f3       	breq	.-22     	; 0x711e <Set_Prayer_Time+0x400>
			x1 = Calculator_GetRealNumber(pressed_button);
    7134:	8b 89       	ldd	r24, Y+19	; 0x13
    7136:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    713a:	89 8b       	std	Y+17, r24	; 0x11
			LCD_DisplayNumber(x1);
    713c:	89 89       	ldd	r24, Y+17	; 0x11
    713e:	88 2f       	mov	r24, r24
    7140:	90 e0       	ldi	r25, 0x00	; 0
    7142:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			LCD_DisplayString(":"); // 12:
    7146:	80 e0       	ldi	r24, 0x00	; 0
    7148:	91 e0       	ldi	r25, 0x01	; 1
    714a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    714e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    7152:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    7154:	8b 89       	ldd	r24, Y+19	; 0x13
    7156:	80 31       	cpi	r24, 0x10	; 16
    7158:	d1 f3       	breq	.-12     	; 0x714e <Set_Prayer_Time+0x430>
    715a:	8b 89       	ldd	r24, Y+19	; 0x13
    715c:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    7160:	88 23       	and	r24, r24
    7162:	a9 f3       	breq	.-22     	; 0x714e <Set_Prayer_Time+0x430>
			x2 = Calculator_GetRealNumber(pressed_button);
    7164:	8b 89       	ldd	r24, Y+19	; 0x13
    7166:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    716a:	88 8b       	std	Y+16, r24	; 0x10
			LCD_DisplayNumber(x2);
    716c:	88 89       	ldd	r24, Y+16	; 0x10
    716e:	88 2f       	mov	r24, r24
    7170:	90 e0       	ldi	r25, 0x00	; 0
    7172:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    7176:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    717a:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    717c:	8b 89       	ldd	r24, Y+19	; 0x13
    717e:	80 31       	cpi	r24, 0x10	; 16
    7180:	d1 f3       	breq	.-12     	; 0x7176 <Set_Prayer_Time+0x458>
    7182:	8b 89       	ldd	r24, Y+19	; 0x13
    7184:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    7188:	88 23       	and	r24, r24
    718a:	a9 f3       	breq	.-22     	; 0x7176 <Set_Prayer_Time+0x458>
			x3 = Calculator_GetRealNumber(pressed_button);
    718c:	8b 89       	ldd	r24, Y+19	; 0x13
    718e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    7192:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_DisplayNumber(x3);
    7194:	8f 85       	ldd	r24, Y+15	; 0x0f
    7196:	88 2f       	mov	r24, r24
    7198:	90 e0       	ldi	r25, 0x00	; 0
    719a:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			//LCD_DisplayString("|");
			Clock_Set_Asr((u8)(x * 10 + x1), (u8)(x2 * 10 + x3));
    719e:	8a 89       	ldd	r24, Y+18	; 0x12
    71a0:	88 2f       	mov	r24, r24
    71a2:	90 e0       	ldi	r25, 0x00	; 0
    71a4:	9c 01       	movw	r18, r24
    71a6:	22 0f       	add	r18, r18
    71a8:	33 1f       	adc	r19, r19
    71aa:	c9 01       	movw	r24, r18
    71ac:	88 0f       	add	r24, r24
    71ae:	99 1f       	adc	r25, r25
    71b0:	88 0f       	add	r24, r24
    71b2:	99 1f       	adc	r25, r25
    71b4:	82 0f       	add	r24, r18
    71b6:	93 1f       	adc	r25, r19
    71b8:	98 2f       	mov	r25, r24
    71ba:	89 89       	ldd	r24, Y+17	; 0x11
    71bc:	49 2f       	mov	r20, r25
    71be:	48 0f       	add	r20, r24
    71c0:	88 89       	ldd	r24, Y+16	; 0x10
    71c2:	88 2f       	mov	r24, r24
    71c4:	90 e0       	ldi	r25, 0x00	; 0
    71c6:	9c 01       	movw	r18, r24
    71c8:	22 0f       	add	r18, r18
    71ca:	33 1f       	adc	r19, r19
    71cc:	c9 01       	movw	r24, r18
    71ce:	88 0f       	add	r24, r24
    71d0:	99 1f       	adc	r25, r25
    71d2:	88 0f       	add	r24, r24
    71d4:	99 1f       	adc	r25, r25
    71d6:	82 0f       	add	r24, r18
    71d8:	93 1f       	adc	r25, r19
    71da:	98 2f       	mov	r25, r24
    71dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    71de:	98 0f       	add	r25, r24
    71e0:	84 2f       	mov	r24, r20
    71e2:	69 2f       	mov	r22, r25
    71e4:	0e 94 ed 23 	call	0x47da	; 0x47da <Clock_Set_Asr>
			prayerstime[4] = (u8)(x * 10 + x1);
    71e8:	8c 89       	ldd	r24, Y+20	; 0x14
    71ea:	9d 89       	ldd	r25, Y+21	; 0x15
    71ec:	fc 01       	movw	r30, r24
    71ee:	38 96       	adiw	r30, 0x08	; 8
    71f0:	8a 89       	ldd	r24, Y+18	; 0x12
    71f2:	88 2f       	mov	r24, r24
    71f4:	90 e0       	ldi	r25, 0x00	; 0
    71f6:	9c 01       	movw	r18, r24
    71f8:	22 0f       	add	r18, r18
    71fa:	33 1f       	adc	r19, r19
    71fc:	c9 01       	movw	r24, r18
    71fe:	88 0f       	add	r24, r24
    7200:	99 1f       	adc	r25, r25
    7202:	88 0f       	add	r24, r24
    7204:	99 1f       	adc	r25, r25
    7206:	82 0f       	add	r24, r18
    7208:	93 1f       	adc	r25, r19
    720a:	98 2f       	mov	r25, r24
    720c:	89 89       	ldd	r24, Y+17	; 0x11
    720e:	89 0f       	add	r24, r25
    7210:	88 2f       	mov	r24, r24
    7212:	90 e0       	ldi	r25, 0x00	; 0
    7214:	91 83       	std	Z+1, r25	; 0x01
    7216:	80 83       	st	Z, r24
			prayerstime[5] = (u8)(x2 * 10 + x3);
    7218:	8c 89       	ldd	r24, Y+20	; 0x14
    721a:	9d 89       	ldd	r25, Y+21	; 0x15
    721c:	fc 01       	movw	r30, r24
    721e:	3a 96       	adiw	r30, 0x0a	; 10
    7220:	88 89       	ldd	r24, Y+16	; 0x10
    7222:	88 2f       	mov	r24, r24
    7224:	90 e0       	ldi	r25, 0x00	; 0
    7226:	9c 01       	movw	r18, r24
    7228:	22 0f       	add	r18, r18
    722a:	33 1f       	adc	r19, r19
    722c:	c9 01       	movw	r24, r18
    722e:	88 0f       	add	r24, r24
    7230:	99 1f       	adc	r25, r25
    7232:	88 0f       	add	r24, r24
    7234:	99 1f       	adc	r25, r25
    7236:	82 0f       	add	r24, r18
    7238:	93 1f       	adc	r25, r19
    723a:	98 2f       	mov	r25, r24
    723c:	8f 85       	ldd	r24, Y+15	; 0x0f
    723e:	89 0f       	add	r24, r25
    7240:	88 2f       	mov	r24, r24
    7242:	90 e0       	ldi	r25, 0x00	; 0
    7244:	91 83       	std	Z+1, r25	; 0x01
    7246:	80 83       	st	Z, r24
			LCD_SetCursorPosition(1, 0);
    7248:	81 e0       	ldi	r24, 0x01	; 1
    724a:	60 e0       	ldi	r22, 0x00	; 0
    724c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>
			LCD_DisplayString("Magh:");
    7250:	8e e0       	ldi	r24, 0x0E	; 14
    7252:	91 e0       	ldi	r25, 0x01	; 1
    7254:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    7258:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    725c:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    725e:	8b 89       	ldd	r24, Y+19	; 0x13
    7260:	80 31       	cpi	r24, 0x10	; 16
    7262:	d1 f3       	breq	.-12     	; 0x7258 <Set_Prayer_Time+0x53a>
    7264:	8b 89       	ldd	r24, Y+19	; 0x13
    7266:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    726a:	88 23       	and	r24, r24
    726c:	a9 f3       	breq	.-22     	; 0x7258 <Set_Prayer_Time+0x53a>
			x = Calculator_GetRealNumber(pressed_button);											// 1
    726e:	8b 89       	ldd	r24, Y+19	; 0x13
    7270:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    7274:	8a 8b       	std	Y+18, r24	; 0x12
			LCD_DisplayNumber(x);
    7276:	8a 89       	ldd	r24, Y+18	; 0x12
    7278:	88 2f       	mov	r24, r24
    727a:	90 e0       	ldi	r25, 0x00	; 0
    727c:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    7280:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    7284:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    7286:	8b 89       	ldd	r24, Y+19	; 0x13
    7288:	80 31       	cpi	r24, 0x10	; 16
    728a:	d1 f3       	breq	.-12     	; 0x7280 <Set_Prayer_Time+0x562>
    728c:	8b 89       	ldd	r24, Y+19	; 0x13
    728e:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    7292:	88 23       	and	r24, r24
    7294:	a9 f3       	breq	.-22     	; 0x7280 <Set_Prayer_Time+0x562>
			x1 = Calculator_GetRealNumber(pressed_button);
    7296:	8b 89       	ldd	r24, Y+19	; 0x13
    7298:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    729c:	89 8b       	std	Y+17, r24	; 0x11
			LCD_DisplayNumber(x1);
    729e:	89 89       	ldd	r24, Y+17	; 0x11
    72a0:	88 2f       	mov	r24, r24
    72a2:	90 e0       	ldi	r25, 0x00	; 0
    72a4:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			LCD_DisplayString(":"); // 12:
    72a8:	80 e0       	ldi	r24, 0x00	; 0
    72aa:	91 e0       	ldi	r25, 0x01	; 1
    72ac:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    72b0:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    72b4:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    72b6:	8b 89       	ldd	r24, Y+19	; 0x13
    72b8:	80 31       	cpi	r24, 0x10	; 16
    72ba:	d1 f3       	breq	.-12     	; 0x72b0 <Set_Prayer_Time+0x592>
    72bc:	8b 89       	ldd	r24, Y+19	; 0x13
    72be:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    72c2:	88 23       	and	r24, r24
    72c4:	a9 f3       	breq	.-22     	; 0x72b0 <Set_Prayer_Time+0x592>
			x2 = Calculator_GetRealNumber(pressed_button);
    72c6:	8b 89       	ldd	r24, Y+19	; 0x13
    72c8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    72cc:	88 8b       	std	Y+16, r24	; 0x10
			LCD_DisplayNumber(x2);
    72ce:	88 89       	ldd	r24, Y+16	; 0x10
    72d0:	88 2f       	mov	r24, r24
    72d2:	90 e0       	ldi	r25, 0x00	; 0
    72d4:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    72d8:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    72dc:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    72de:	8b 89       	ldd	r24, Y+19	; 0x13
    72e0:	80 31       	cpi	r24, 0x10	; 16
    72e2:	d1 f3       	breq	.-12     	; 0x72d8 <Set_Prayer_Time+0x5ba>
    72e4:	8b 89       	ldd	r24, Y+19	; 0x13
    72e6:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    72ea:	88 23       	and	r24, r24
    72ec:	a9 f3       	breq	.-22     	; 0x72d8 <Set_Prayer_Time+0x5ba>
			x3 = Calculator_GetRealNumber(pressed_button);
    72ee:	8b 89       	ldd	r24, Y+19	; 0x13
    72f0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    72f4:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_DisplayNumber(x3);
    72f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    72f8:	88 2f       	mov	r24, r24
    72fa:	90 e0       	ldi	r25, 0x00	; 0
    72fc:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			//LCD_DisplayString("|");
			Clock_Set_Maghrib((u8)(x * 10 + x1), (u8)(x2 * 10 + x3));
    7300:	8a 89       	ldd	r24, Y+18	; 0x12
    7302:	88 2f       	mov	r24, r24
    7304:	90 e0       	ldi	r25, 0x00	; 0
    7306:	9c 01       	movw	r18, r24
    7308:	22 0f       	add	r18, r18
    730a:	33 1f       	adc	r19, r19
    730c:	c9 01       	movw	r24, r18
    730e:	88 0f       	add	r24, r24
    7310:	99 1f       	adc	r25, r25
    7312:	88 0f       	add	r24, r24
    7314:	99 1f       	adc	r25, r25
    7316:	82 0f       	add	r24, r18
    7318:	93 1f       	adc	r25, r19
    731a:	98 2f       	mov	r25, r24
    731c:	89 89       	ldd	r24, Y+17	; 0x11
    731e:	49 2f       	mov	r20, r25
    7320:	48 0f       	add	r20, r24
    7322:	88 89       	ldd	r24, Y+16	; 0x10
    7324:	88 2f       	mov	r24, r24
    7326:	90 e0       	ldi	r25, 0x00	; 0
    7328:	9c 01       	movw	r18, r24
    732a:	22 0f       	add	r18, r18
    732c:	33 1f       	adc	r19, r19
    732e:	c9 01       	movw	r24, r18
    7330:	88 0f       	add	r24, r24
    7332:	99 1f       	adc	r25, r25
    7334:	88 0f       	add	r24, r24
    7336:	99 1f       	adc	r25, r25
    7338:	82 0f       	add	r24, r18
    733a:	93 1f       	adc	r25, r19
    733c:	98 2f       	mov	r25, r24
    733e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7340:	98 0f       	add	r25, r24
    7342:	84 2f       	mov	r24, r20
    7344:	69 2f       	mov	r22, r25
    7346:	0e 94 7e 24 	call	0x48fc	; 0x48fc <Clock_Set_Maghrib>
			prayerstime[6] = (u8)(x * 10 + x1);
    734a:	8c 89       	ldd	r24, Y+20	; 0x14
    734c:	9d 89       	ldd	r25, Y+21	; 0x15
    734e:	fc 01       	movw	r30, r24
    7350:	3c 96       	adiw	r30, 0x0c	; 12
    7352:	8a 89       	ldd	r24, Y+18	; 0x12
    7354:	88 2f       	mov	r24, r24
    7356:	90 e0       	ldi	r25, 0x00	; 0
    7358:	9c 01       	movw	r18, r24
    735a:	22 0f       	add	r18, r18
    735c:	33 1f       	adc	r19, r19
    735e:	c9 01       	movw	r24, r18
    7360:	88 0f       	add	r24, r24
    7362:	99 1f       	adc	r25, r25
    7364:	88 0f       	add	r24, r24
    7366:	99 1f       	adc	r25, r25
    7368:	82 0f       	add	r24, r18
    736a:	93 1f       	adc	r25, r19
    736c:	98 2f       	mov	r25, r24
    736e:	89 89       	ldd	r24, Y+17	; 0x11
    7370:	89 0f       	add	r24, r25
    7372:	88 2f       	mov	r24, r24
    7374:	90 e0       	ldi	r25, 0x00	; 0
    7376:	91 83       	std	Z+1, r25	; 0x01
    7378:	80 83       	st	Z, r24
			prayerstime[7] = (u8)(x2 * 10 + x3);
    737a:	8c 89       	ldd	r24, Y+20	; 0x14
    737c:	9d 89       	ldd	r25, Y+21	; 0x15
    737e:	fc 01       	movw	r30, r24
    7380:	3e 96       	adiw	r30, 0x0e	; 14
    7382:	88 89       	ldd	r24, Y+16	; 0x10
    7384:	88 2f       	mov	r24, r24
    7386:	90 e0       	ldi	r25, 0x00	; 0
    7388:	9c 01       	movw	r18, r24
    738a:	22 0f       	add	r18, r18
    738c:	33 1f       	adc	r19, r19
    738e:	c9 01       	movw	r24, r18
    7390:	88 0f       	add	r24, r24
    7392:	99 1f       	adc	r25, r25
    7394:	88 0f       	add	r24, r24
    7396:	99 1f       	adc	r25, r25
    7398:	82 0f       	add	r24, r18
    739a:	93 1f       	adc	r25, r19
    739c:	98 2f       	mov	r25, r24
    739e:	8f 85       	ldd	r24, Y+15	; 0x0f
    73a0:	89 0f       	add	r24, r25
    73a2:	88 2f       	mov	r24, r24
    73a4:	90 e0       	ldi	r25, 0x00	; 0
    73a6:	91 83       	std	Z+1, r25	; 0x01
    73a8:	80 83       	st	Z, r24
			LCD_DisplayString(" Isha:");
    73aa:	84 e1       	ldi	r24, 0x14	; 20
    73ac:	91 e0       	ldi	r25, 0x01	; 1
    73ae:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    73b2:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    73b6:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    73b8:	8b 89       	ldd	r24, Y+19	; 0x13
    73ba:	80 31       	cpi	r24, 0x10	; 16
    73bc:	d1 f3       	breq	.-12     	; 0x73b2 <Set_Prayer_Time+0x694>
    73be:	8b 89       	ldd	r24, Y+19	; 0x13
    73c0:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    73c4:	88 23       	and	r24, r24
    73c6:	a9 f3       	breq	.-22     	; 0x73b2 <Set_Prayer_Time+0x694>
			x = Calculator_GetRealNumber(pressed_button);											// 1
    73c8:	8b 89       	ldd	r24, Y+19	; 0x13
    73ca:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    73ce:	8a 8b       	std	Y+18, r24	; 0x12
			LCD_DisplayNumber(x);
    73d0:	8a 89       	ldd	r24, Y+18	; 0x12
    73d2:	88 2f       	mov	r24, r24
    73d4:	90 e0       	ldi	r25, 0x00	; 0
    73d6:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    73da:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    73de:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button)); // 12
    73e0:	8b 89       	ldd	r24, Y+19	; 0x13
    73e2:	80 31       	cpi	r24, 0x10	; 16
    73e4:	d1 f3       	breq	.-12     	; 0x73da <Set_Prayer_Time+0x6bc>
    73e6:	8b 89       	ldd	r24, Y+19	; 0x13
    73e8:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    73ec:	88 23       	and	r24, r24
    73ee:	a9 f3       	breq	.-22     	; 0x73da <Set_Prayer_Time+0x6bc>
			x1 = Calculator_GetRealNumber(pressed_button);
    73f0:	8b 89       	ldd	r24, Y+19	; 0x13
    73f2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    73f6:	89 8b       	std	Y+17, r24	; 0x11
			LCD_DisplayNumber(x1);
    73f8:	89 89       	ldd	r24, Y+17	; 0x11
    73fa:	88 2f       	mov	r24, r24
    73fc:	90 e0       	ldi	r25, 0x00	; 0
    73fe:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			LCD_DisplayString(":"); // 12:
    7402:	80 e0       	ldi	r24, 0x00	; 0
    7404:	91 e0       	ldi	r25, 0x01	; 1
    7406:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    740a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    740e:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    7410:	8b 89       	ldd	r24, Y+19	; 0x13
    7412:	80 31       	cpi	r24, 0x10	; 16
    7414:	d1 f3       	breq	.-12     	; 0x740a <Set_Prayer_Time+0x6ec>
    7416:	8b 89       	ldd	r24, Y+19	; 0x13
    7418:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    741c:	88 23       	and	r24, r24
    741e:	a9 f3       	breq	.-22     	; 0x740a <Set_Prayer_Time+0x6ec>
			x2 = Calculator_GetRealNumber(pressed_button);
    7420:	8b 89       	ldd	r24, Y+19	; 0x13
    7422:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    7426:	88 8b       	std	Y+16, r24	; 0x10
			LCD_DisplayNumber(x2);
    7428:	88 89       	ldd	r24, Y+16	; 0x10
    742a:	88 2f       	mov	r24, r24
    742c:	90 e0       	ldi	r25, 0x00	; 0
    742e:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			do
			{
				pressed_button = Keypad_GetPressedButton();
    7432:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    7436:	8b 8b       	std	Y+19, r24	; 0x13
			} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    7438:	8b 89       	ldd	r24, Y+19	; 0x13
    743a:	80 31       	cpi	r24, 0x10	; 16
    743c:	d1 f3       	breq	.-12     	; 0x7432 <Set_Prayer_Time+0x714>
    743e:	8b 89       	ldd	r24, Y+19	; 0x13
    7440:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    7444:	88 23       	and	r24, r24
    7446:	a9 f3       	breq	.-22     	; 0x7432 <Set_Prayer_Time+0x714>
			x3 = Calculator_GetRealNumber(pressed_button);
    7448:	8b 89       	ldd	r24, Y+19	; 0x13
    744a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    744e:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_DisplayNumber(x3);
    7450:	8f 85       	ldd	r24, Y+15	; 0x0f
    7452:	88 2f       	mov	r24, r24
    7454:	90 e0       	ldi	r25, 0x00	; 0
    7456:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
			//LCD_DisplayString("|");
			Clock_Set_Isha((u8)(x * 10 + x1), (u8)(x2 * 10 + x3));
    745a:	8a 89       	ldd	r24, Y+18	; 0x12
    745c:	88 2f       	mov	r24, r24
    745e:	90 e0       	ldi	r25, 0x00	; 0
    7460:	9c 01       	movw	r18, r24
    7462:	22 0f       	add	r18, r18
    7464:	33 1f       	adc	r19, r19
    7466:	c9 01       	movw	r24, r18
    7468:	88 0f       	add	r24, r24
    746a:	99 1f       	adc	r25, r25
    746c:	88 0f       	add	r24, r24
    746e:	99 1f       	adc	r25, r25
    7470:	82 0f       	add	r24, r18
    7472:	93 1f       	adc	r25, r19
    7474:	98 2f       	mov	r25, r24
    7476:	89 89       	ldd	r24, Y+17	; 0x11
    7478:	49 2f       	mov	r20, r25
    747a:	48 0f       	add	r20, r24
    747c:	88 89       	ldd	r24, Y+16	; 0x10
    747e:	88 2f       	mov	r24, r24
    7480:	90 e0       	ldi	r25, 0x00	; 0
    7482:	9c 01       	movw	r18, r24
    7484:	22 0f       	add	r18, r18
    7486:	33 1f       	adc	r19, r19
    7488:	c9 01       	movw	r24, r18
    748a:	88 0f       	add	r24, r24
    748c:	99 1f       	adc	r25, r25
    748e:	88 0f       	add	r24, r24
    7490:	99 1f       	adc	r25, r25
    7492:	82 0f       	add	r24, r18
    7494:	93 1f       	adc	r25, r19
    7496:	98 2f       	mov	r25, r24
    7498:	8f 85       	ldd	r24, Y+15	; 0x0f
    749a:	98 0f       	add	r25, r24
    749c:	84 2f       	mov	r24, r20
    749e:	69 2f       	mov	r22, r25
    74a0:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Clock_Set_Isha>
			prayerstime[8] = (u8)(x * 10 + x1);
    74a4:	8c 89       	ldd	r24, Y+20	; 0x14
    74a6:	9d 89       	ldd	r25, Y+21	; 0x15
    74a8:	fc 01       	movw	r30, r24
    74aa:	70 96       	adiw	r30, 0x10	; 16
    74ac:	8a 89       	ldd	r24, Y+18	; 0x12
    74ae:	88 2f       	mov	r24, r24
    74b0:	90 e0       	ldi	r25, 0x00	; 0
    74b2:	9c 01       	movw	r18, r24
    74b4:	22 0f       	add	r18, r18
    74b6:	33 1f       	adc	r19, r19
    74b8:	c9 01       	movw	r24, r18
    74ba:	88 0f       	add	r24, r24
    74bc:	99 1f       	adc	r25, r25
    74be:	88 0f       	add	r24, r24
    74c0:	99 1f       	adc	r25, r25
    74c2:	82 0f       	add	r24, r18
    74c4:	93 1f       	adc	r25, r19
    74c6:	98 2f       	mov	r25, r24
    74c8:	89 89       	ldd	r24, Y+17	; 0x11
    74ca:	89 0f       	add	r24, r25
    74cc:	88 2f       	mov	r24, r24
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	91 83       	std	Z+1, r25	; 0x01
    74d2:	80 83       	st	Z, r24
			prayerstime[9] = (u8)(x2 * 10 + x3);
    74d4:	8c 89       	ldd	r24, Y+20	; 0x14
    74d6:	9d 89       	ldd	r25, Y+21	; 0x15
    74d8:	fc 01       	movw	r30, r24
    74da:	72 96       	adiw	r30, 0x12	; 18
    74dc:	88 89       	ldd	r24, Y+16	; 0x10
    74de:	88 2f       	mov	r24, r24
    74e0:	90 e0       	ldi	r25, 0x00	; 0
    74e2:	9c 01       	movw	r18, r24
    74e4:	22 0f       	add	r18, r18
    74e6:	33 1f       	adc	r19, r19
    74e8:	c9 01       	movw	r24, r18
    74ea:	88 0f       	add	r24, r24
    74ec:	99 1f       	adc	r25, r25
    74ee:	88 0f       	add	r24, r24
    74f0:	99 1f       	adc	r25, r25
    74f2:	82 0f       	add	r24, r18
    74f4:	93 1f       	adc	r25, r19
    74f6:	98 2f       	mov	r25, r24
    74f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    74fa:	89 0f       	add	r24, r25
    74fc:	88 2f       	mov	r24, r24
    74fe:	90 e0       	ldi	r25, 0x00	; 0
    7500:	91 83       	std	Z+1, r25	; 0x01
    7502:	80 83       	st	Z, r24
		}
	}
}
    7504:	65 96       	adiw	r28, 0x15	; 21
    7506:	0f b6       	in	r0, 0x3f	; 63
    7508:	f8 94       	cli
    750a:	de bf       	out	0x3e, r29	; 62
    750c:	0f be       	out	0x3f, r0	; 63
    750e:	cd bf       	out	0x3d, r28	; 61
    7510:	cf 91       	pop	r28
    7512:	df 91       	pop	r29
    7514:	08 95       	ret

00007516 <Check_For_PassWord>:
u8 Check_For_PassWord()
{
    7516:	df 93       	push	r29
    7518:	cf 93       	push	r28
    751a:	cd b7       	in	r28, 0x3d	; 61
    751c:	de b7       	in	r29, 0x3e	; 62
    751e:	cf 54       	subi	r28, 0x4F	; 79
    7520:	d0 40       	sbci	r29, 0x00	; 0
    7522:	0f b6       	in	r0, 0x3f	; 63
    7524:	f8 94       	cli
    7526:	de bf       	out	0x3e, r29	; 62
    7528:	0f be       	out	0x3f, r0	; 63
    752a:	cd bf       	out	0x3d, r28	; 61
	Keypad_ButtonType pressed_button;
	LCD_Clear();
    752c:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
	LCD_DisplayString("ID:");
    7530:	86 e5       	ldi	r24, 0x56	; 86
    7532:	91 e0       	ldi	r25, 0x01	; 1
    7534:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	do
	{
		pressed_button = Keypad_GetPressedButton();
    7538:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    753c:	8a af       	std	Y+58, r24	; 0x3a
	} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    753e:	8a ad       	ldd	r24, Y+58	; 0x3a
    7540:	80 31       	cpi	r24, 0x10	; 16
    7542:	d1 f3       	breq	.-12     	; 0x7538 <Check_For_PassWord+0x22>
    7544:	8a ad       	ldd	r24, Y+58	; 0x3a
    7546:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    754a:	88 23       	and	r24, r24
    754c:	a9 f3       	breq	.-22     	; 0x7538 <Check_For_PassWord+0x22>
	u8 y2 = Calculator_GetRealNumber(pressed_button);
    754e:	8a ad       	ldd	r24, Y+58	; 0x3a
    7550:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    7554:	89 af       	std	Y+57, r24	; 0x39
	LCD_DisplayNumber(y2);
    7556:	89 ad       	ldd	r24, Y+57	; 0x39
    7558:	88 2f       	mov	r24, r24
    755a:	90 e0       	ldi	r25, 0x00	; 0
    755c:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
	do
	{
		pressed_button = Keypad_GetPressedButton();
    7560:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    7564:	8a af       	std	Y+58, r24	; 0x3a
	} while (pressed_button == KEYPAD_BUTTON_INVALID || !Check_IS_Anumber(pressed_button));
    7566:	8a ad       	ldd	r24, Y+58	; 0x3a
    7568:	80 31       	cpi	r24, 0x10	; 16
    756a:	d1 f3       	breq	.-12     	; 0x7560 <Check_For_PassWord+0x4a>
    756c:	8a ad       	ldd	r24, Y+58	; 0x3a
    756e:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    7572:	88 23       	and	r24, r24
    7574:	a9 f3       	breq	.-22     	; 0x7560 <Check_For_PassWord+0x4a>
	u8 y3 = Calculator_GetRealNumber(pressed_button);
    7576:	8a ad       	ldd	r24, Y+58	; 0x3a
    7578:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    757c:	88 af       	std	Y+56, r24	; 0x38
	LCD_DisplayNumber(y3);
    757e:	88 ad       	ldd	r24, Y+56	; 0x38
    7580:	88 2f       	mov	r24, r24
    7582:	90 e0       	ldi	r25, 0x00	; 0
    7584:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>

	u8 id = y2 * 10 + y3;
    7588:	89 ad       	ldd	r24, Y+57	; 0x39
    758a:	88 2f       	mov	r24, r24
    758c:	90 e0       	ldi	r25, 0x00	; 0
    758e:	9c 01       	movw	r18, r24
    7590:	22 0f       	add	r18, r18
    7592:	33 1f       	adc	r19, r19
    7594:	c9 01       	movw	r24, r18
    7596:	88 0f       	add	r24, r24
    7598:	99 1f       	adc	r25, r25
    759a:	88 0f       	add	r24, r24
    759c:	99 1f       	adc	r25, r25
    759e:	82 0f       	add	r24, r18
    75a0:	93 1f       	adc	r25, r19
    75a2:	98 2f       	mov	r25, r24
    75a4:	88 ad       	ldd	r24, Y+56	; 0x38
    75a6:	89 0f       	add	r24, r25
    75a8:	8f ab       	std	Y+55, r24	; 0x37
	u8 arr[20] = {0};
    75aa:	84 e1       	ldi	r24, 0x14	; 20
    75ac:	fe 01       	movw	r30, r28
    75ae:	fb 96       	adiw	r30, 0x3b	; 59
    75b0:	df 01       	movw	r26, r30
    75b2:	98 2f       	mov	r25, r24
    75b4:	1d 92       	st	X+, r1
    75b6:	9a 95       	dec	r25
    75b8:	e9 f7       	brne	.-6      	; 0x75b4 <Check_For_PassWord+0x9e>
	u8 c = 0;
    75ba:	1e aa       	std	Y+54, r1	; 0x36
	u8 n = 0;
    75bc:	1d aa       	std	Y+53, r1	; 0x35
	LCD_SetCursorPosition(1, 0);
    75be:	81 e0       	ldi	r24, 0x01	; 1
    75c0:	60 e0       	ldi	r22, 0x00	; 0
    75c2:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>
	LCD_DisplayString("pass:");
    75c6:	8a e5       	ldi	r24, 0x5A	; 90
    75c8:	91 e0       	ldi	r25, 0x01	; 1
    75ca:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
	while (1)
	{
		if (c == 4)
    75ce:	8e a9       	ldd	r24, Y+54	; 0x36
    75d0:	84 30       	cpi	r24, 0x04	; 4
    75d2:	09 f0       	breq	.+2      	; 0x75d6 <Check_For_PassWord+0xc0>
    75d4:	c2 c0       	rjmp	.+388    	; 0x775a <Check_For_PassWord+0x244>
		{
			if (n < 5 && c == 4) // will check on the password
    75d6:	8d a9       	ldd	r24, Y+53	; 0x35
    75d8:	85 30       	cpi	r24, 0x05	; 5
    75da:	08 f0       	brcs	.+2      	; 0x75de <Check_For_PassWord+0xc8>
    75dc:	be c0       	rjmp	.+380    	; 0x775a <Check_For_PassWord+0x244>
    75de:	8e a9       	ldd	r24, Y+54	; 0x36
    75e0:	84 30       	cpi	r24, 0x04	; 4
    75e2:	09 f0       	breq	.+2      	; 0x75e6 <Check_For_PassWord+0xd0>
    75e4:	ba c0       	rjmp	.+372    	; 0x775a <Check_For_PassWord+0x244>
			{
				if (Check_For_Password(id, arr))
    75e6:	9e 01       	movw	r18, r28
    75e8:	25 5c       	subi	r18, 0xC5	; 197
    75ea:	3f 4f       	sbci	r19, 0xFF	; 255
    75ec:	8f a9       	ldd	r24, Y+55	; 0x37
    75ee:	b9 01       	movw	r22, r18
    75f0:	0e 94 0f 33 	call	0x661e	; 0x661e <Check_For_Password>
    75f4:	88 23       	and	r24, r24
    75f6:	09 f4       	brne	.+2      	; 0x75fa <Check_For_PassWord+0xe4>
    75f8:	83 c0       	rjmp	.+262    	; 0x7700 <Check_For_PassWord+0x1ea>
				{
					LCD_Clear();
    75fa:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
					u8 *chr = "Correct Password";
    75fe:	80 e6       	ldi	r24, 0x60	; 96
    7600:	91 e0       	ldi	r25, 0x01	; 1
    7602:	9c ab       	std	Y+52, r25	; 0x34
    7604:	8b ab       	std	Y+51, r24	; 0x33
					LCD_DisplayString(chr);
    7606:	8b a9       	ldd	r24, Y+51	; 0x33
    7608:	9c a9       	ldd	r25, Y+52	; 0x34
    760a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
					servo90();
    760e:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <servo90>
    7612:	80 e0       	ldi	r24, 0x00	; 0
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	aa ef       	ldi	r26, 0xFA	; 250
    7618:	b4 e4       	ldi	r27, 0x44	; 68
    761a:	8f a3       	std	Y+39, r24	; 0x27
    761c:	98 a7       	std	Y+40, r25	; 0x28
    761e:	a9 a7       	std	Y+41, r26	; 0x29
    7620:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7622:	6f a1       	ldd	r22, Y+39	; 0x27
    7624:	78 a5       	ldd	r23, Y+40	; 0x28
    7626:	89 a5       	ldd	r24, Y+41	; 0x29
    7628:	9a a5       	ldd	r25, Y+42	; 0x2a
    762a:	20 e0       	ldi	r18, 0x00	; 0
    762c:	30 e0       	ldi	r19, 0x00	; 0
    762e:	4a ef       	ldi	r20, 0xFA	; 250
    7630:	54 e4       	ldi	r21, 0x44	; 68
    7632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7636:	dc 01       	movw	r26, r24
    7638:	cb 01       	movw	r24, r22
    763a:	8b a3       	std	Y+35, r24	; 0x23
    763c:	9c a3       	std	Y+36, r25	; 0x24
    763e:	ad a3       	std	Y+37, r26	; 0x25
    7640:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7642:	6b a1       	ldd	r22, Y+35	; 0x23
    7644:	7c a1       	ldd	r23, Y+36	; 0x24
    7646:	8d a1       	ldd	r24, Y+37	; 0x25
    7648:	9e a1       	ldd	r25, Y+38	; 0x26
    764a:	20 e0       	ldi	r18, 0x00	; 0
    764c:	30 e0       	ldi	r19, 0x00	; 0
    764e:	40 e8       	ldi	r20, 0x80	; 128
    7650:	5f e3       	ldi	r21, 0x3F	; 63
    7652:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    7656:	88 23       	and	r24, r24
    7658:	2c f4       	brge	.+10     	; 0x7664 <Check_For_PassWord+0x14e>
		__ticks = 1;
    765a:	81 e0       	ldi	r24, 0x01	; 1
    765c:	90 e0       	ldi	r25, 0x00	; 0
    765e:	9a a3       	std	Y+34, r25	; 0x22
    7660:	89 a3       	std	Y+33, r24	; 0x21
    7662:	3f c0       	rjmp	.+126    	; 0x76e2 <Check_For_PassWord+0x1cc>
	else if (__tmp > 65535)
    7664:	6b a1       	ldd	r22, Y+35	; 0x23
    7666:	7c a1       	ldd	r23, Y+36	; 0x24
    7668:	8d a1       	ldd	r24, Y+37	; 0x25
    766a:	9e a1       	ldd	r25, Y+38	; 0x26
    766c:	20 e0       	ldi	r18, 0x00	; 0
    766e:	3f ef       	ldi	r19, 0xFF	; 255
    7670:	4f e7       	ldi	r20, 0x7F	; 127
    7672:	57 e4       	ldi	r21, 0x47	; 71
    7674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    7678:	18 16       	cp	r1, r24
    767a:	4c f5       	brge	.+82     	; 0x76ce <Check_For_PassWord+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    767c:	6f a1       	ldd	r22, Y+39	; 0x27
    767e:	78 a5       	ldd	r23, Y+40	; 0x28
    7680:	89 a5       	ldd	r24, Y+41	; 0x29
    7682:	9a a5       	ldd	r25, Y+42	; 0x2a
    7684:	20 e0       	ldi	r18, 0x00	; 0
    7686:	30 e0       	ldi	r19, 0x00	; 0
    7688:	40 e2       	ldi	r20, 0x20	; 32
    768a:	51 e4       	ldi	r21, 0x41	; 65
    768c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7690:	dc 01       	movw	r26, r24
    7692:	cb 01       	movw	r24, r22
    7694:	bc 01       	movw	r22, r24
    7696:	cd 01       	movw	r24, r26
    7698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    769c:	dc 01       	movw	r26, r24
    769e:	cb 01       	movw	r24, r22
    76a0:	9a a3       	std	Y+34, r25	; 0x22
    76a2:	89 a3       	std	Y+33, r24	; 0x21
    76a4:	0f c0       	rjmp	.+30     	; 0x76c4 <Check_For_PassWord+0x1ae>
    76a6:	88 ec       	ldi	r24, 0xC8	; 200
    76a8:	90 e0       	ldi	r25, 0x00	; 0
    76aa:	98 a3       	std	Y+32, r25	; 0x20
    76ac:	8f 8f       	std	Y+31, r24	; 0x1f
    76ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76b0:	98 a1       	ldd	r25, Y+32	; 0x20
    76b2:	01 97       	sbiw	r24, 0x01	; 1
    76b4:	f1 f7       	brne	.-4      	; 0x76b2 <Check_For_PassWord+0x19c>
    76b6:	98 a3       	std	Y+32, r25	; 0x20
    76b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76ba:	89 a1       	ldd	r24, Y+33	; 0x21
    76bc:	9a a1       	ldd	r25, Y+34	; 0x22
    76be:	01 97       	sbiw	r24, 0x01	; 1
    76c0:	9a a3       	std	Y+34, r25	; 0x22
    76c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76c4:	89 a1       	ldd	r24, Y+33	; 0x21
    76c6:	9a a1       	ldd	r25, Y+34	; 0x22
    76c8:	00 97       	sbiw	r24, 0x00	; 0
    76ca:	69 f7       	brne	.-38     	; 0x76a6 <Check_For_PassWord+0x190>
    76cc:	14 c0       	rjmp	.+40     	; 0x76f6 <Check_For_PassWord+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76ce:	6b a1       	ldd	r22, Y+35	; 0x23
    76d0:	7c a1       	ldd	r23, Y+36	; 0x24
    76d2:	8d a1       	ldd	r24, Y+37	; 0x25
    76d4:	9e a1       	ldd	r25, Y+38	; 0x26
    76d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76da:	dc 01       	movw	r26, r24
    76dc:	cb 01       	movw	r24, r22
    76de:	9a a3       	std	Y+34, r25	; 0x22
    76e0:	89 a3       	std	Y+33, r24	; 0x21
    76e2:	89 a1       	ldd	r24, Y+33	; 0x21
    76e4:	9a a1       	ldd	r25, Y+34	; 0x22
    76e6:	9e 8f       	std	Y+30, r25	; 0x1e
    76e8:	8d 8f       	std	Y+29, r24	; 0x1d
    76ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    76ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    76ee:	01 97       	sbiw	r24, 0x01	; 1
    76f0:	f1 f7       	brne	.-4      	; 0x76ee <Check_For_PassWord+0x1d8>
    76f2:	9e 8f       	std	Y+30, r25	; 0x1e
    76f4:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2000);
					return 1;
    76f6:	a1 e0       	ldi	r26, 0x01	; 1
    76f8:	60 96       	adiw	r28, 0x10	; 16
    76fa:	af af       	std	Y+63, r26	; 0x3f
    76fc:	60 97       	sbiw	r28, 0x10	; 16
    76fe:	86 c1       	rjmp	.+780    	; 0x7a0c <Check_For_PassWord+0x4f6>
				}
				else
				{
					for (u8 i = 0; i < 4; i++)
    7700:	18 aa       	std	Y+48, r1	; 0x30
    7702:	0c c0       	rjmp	.+24     	; 0x771c <Check_For_PassWord+0x206>
					{
						arr[i] = 0;
    7704:	88 a9       	ldd	r24, Y+48	; 0x30
    7706:	28 2f       	mov	r18, r24
    7708:	30 e0       	ldi	r19, 0x00	; 0
    770a:	ce 01       	movw	r24, r28
    770c:	cb 96       	adiw	r24, 0x3b	; 59
    770e:	fc 01       	movw	r30, r24
    7710:	e2 0f       	add	r30, r18
    7712:	f3 1f       	adc	r31, r19
    7714:	10 82       	st	Z, r1
					_delay_ms(2000);
					return 1;
				}
				else
				{
					for (u8 i = 0; i < 4; i++)
    7716:	88 a9       	ldd	r24, Y+48	; 0x30
    7718:	8f 5f       	subi	r24, 0xFF	; 255
    771a:	88 ab       	std	Y+48, r24	; 0x30
    771c:	88 a9       	ldd	r24, Y+48	; 0x30
    771e:	84 30       	cpi	r24, 0x04	; 4
    7720:	88 f3       	brcs	.-30     	; 0x7704 <Check_For_PassWord+0x1ee>
					{
						arr[i] = 0;
					}
					c = 0;
    7722:	1e aa       	std	Y+54, r1	; 0x36
					LCD_Clear();
    7724:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
					u8 *chr = "Wrong Password";
    7728:	81 e7       	ldi	r24, 0x71	; 113
    772a:	91 e0       	ldi	r25, 0x01	; 1
    772c:	9a ab       	std	Y+50, r25	; 0x32
    772e:	89 ab       	std	Y+49, r24	; 0x31
					LCD_DisplayString(chr);
    7730:	89 a9       	ldd	r24, Y+49	; 0x31
    7732:	9a a9       	ldd	r25, Y+50	; 0x32
    7734:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
					n++;
    7738:	8d a9       	ldd	r24, Y+53	; 0x35
    773a:	8f 5f       	subi	r24, 0xFF	; 255
    773c:	8d ab       	std	Y+53, r24	; 0x35
					LCD_Clear();
    773e:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
					LCD_DisplayString("ID:");
    7742:	86 e5       	ldi	r24, 0x56	; 86
    7744:	91 e0       	ldi	r25, 0x01	; 1
    7746:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
					LCD_SetCursorPosition(1, 0);
    774a:	81 e0       	ldi	r24, 0x01	; 1
    774c:	60 e0       	ldi	r22, 0x00	; 0
    774e:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>
					LCD_DisplayString("pass:");
    7752:	8a e5       	ldi	r24, 0x5A	; 90
    7754:	91 e0       	ldi	r25, 0x01	; 1
    7756:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
				}
			}
		}
		if (n >= 5)
    775a:	8d a9       	ldd	r24, Y+53	; 0x35
    775c:	85 30       	cpi	r24, 0x05	; 5
    775e:	08 f4       	brcc	.+2      	; 0x7762 <Check_For_PassWord+0x24c>
    7760:	2e c1       	rjmp	.+604    	; 0x79be <Check_For_PassWord+0x4a8>
		{
			LCD_Clear();
    7762:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
			u8 *chr = "you entered Wrong Password";
    7766:	80 e8       	ldi	r24, 0x80	; 128
    7768:	91 e0       	ldi	r25, 0x01	; 1
    776a:	9f a7       	std	Y+47, r25	; 0x2f
    776c:	8e a7       	std	Y+46, r24	; 0x2e
			LCD_DisplayString(chr);
    776e:	8e a5       	ldd	r24, Y+46	; 0x2e
    7770:	9f a5       	ldd	r25, Y+47	; 0x2f
    7772:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			LCD_SetCursorPosition(1,0);
    7776:	81 e0       	ldi	r24, 0x01	; 1
    7778:	60 e0       	ldi	r22, 0x00	; 0
    777a:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>
			LCD_DisplayString("5 times");
    777e:	8b e9       	ldi	r24, 0x9B	; 155
    7780:	91 e0       	ldi	r25, 0x01	; 1
    7782:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
    7786:	80 e0       	ldi	r24, 0x00	; 0
    7788:	90 e8       	ldi	r25, 0x80	; 128
    778a:	ab eb       	ldi	r26, 0xBB	; 187
    778c:	b4 e4       	ldi	r27, 0x44	; 68
    778e:	89 8f       	std	Y+25, r24	; 0x19
    7790:	9a 8f       	std	Y+26, r25	; 0x1a
    7792:	ab 8f       	std	Y+27, r26	; 0x1b
    7794:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7796:	69 8d       	ldd	r22, Y+25	; 0x19
    7798:	7a 8d       	ldd	r23, Y+26	; 0x1a
    779a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    779c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    779e:	20 e0       	ldi	r18, 0x00	; 0
    77a0:	30 e0       	ldi	r19, 0x00	; 0
    77a2:	4a ef       	ldi	r20, 0xFA	; 250
    77a4:	54 e4       	ldi	r21, 0x44	; 68
    77a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    77aa:	dc 01       	movw	r26, r24
    77ac:	cb 01       	movw	r24, r22
    77ae:	8d 8b       	std	Y+21, r24	; 0x15
    77b0:	9e 8b       	std	Y+22, r25	; 0x16
    77b2:	af 8b       	std	Y+23, r26	; 0x17
    77b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    77b6:	6d 89       	ldd	r22, Y+21	; 0x15
    77b8:	7e 89       	ldd	r23, Y+22	; 0x16
    77ba:	8f 89       	ldd	r24, Y+23	; 0x17
    77bc:	98 8d       	ldd	r25, Y+24	; 0x18
    77be:	20 e0       	ldi	r18, 0x00	; 0
    77c0:	30 e0       	ldi	r19, 0x00	; 0
    77c2:	40 e8       	ldi	r20, 0x80	; 128
    77c4:	5f e3       	ldi	r21, 0x3F	; 63
    77c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    77ca:	88 23       	and	r24, r24
    77cc:	2c f4       	brge	.+10     	; 0x77d8 <Check_For_PassWord+0x2c2>
		__ticks = 1;
    77ce:	81 e0       	ldi	r24, 0x01	; 1
    77d0:	90 e0       	ldi	r25, 0x00	; 0
    77d2:	9c 8b       	std	Y+20, r25	; 0x14
    77d4:	8b 8b       	std	Y+19, r24	; 0x13
    77d6:	3f c0       	rjmp	.+126    	; 0x7856 <Check_For_PassWord+0x340>
	else if (__tmp > 65535)
    77d8:	6d 89       	ldd	r22, Y+21	; 0x15
    77da:	7e 89       	ldd	r23, Y+22	; 0x16
    77dc:	8f 89       	ldd	r24, Y+23	; 0x17
    77de:	98 8d       	ldd	r25, Y+24	; 0x18
    77e0:	20 e0       	ldi	r18, 0x00	; 0
    77e2:	3f ef       	ldi	r19, 0xFF	; 255
    77e4:	4f e7       	ldi	r20, 0x7F	; 127
    77e6:	57 e4       	ldi	r21, 0x47	; 71
    77e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    77ec:	18 16       	cp	r1, r24
    77ee:	4c f5       	brge	.+82     	; 0x7842 <Check_For_PassWord+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77f0:	69 8d       	ldd	r22, Y+25	; 0x19
    77f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    77f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    77f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    77f8:	20 e0       	ldi	r18, 0x00	; 0
    77fa:	30 e0       	ldi	r19, 0x00	; 0
    77fc:	40 e2       	ldi	r20, 0x20	; 32
    77fe:	51 e4       	ldi	r21, 0x41	; 65
    7800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7804:	dc 01       	movw	r26, r24
    7806:	cb 01       	movw	r24, r22
    7808:	bc 01       	movw	r22, r24
    780a:	cd 01       	movw	r24, r26
    780c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7810:	dc 01       	movw	r26, r24
    7812:	cb 01       	movw	r24, r22
    7814:	9c 8b       	std	Y+20, r25	; 0x14
    7816:	8b 8b       	std	Y+19, r24	; 0x13
    7818:	0f c0       	rjmp	.+30     	; 0x7838 <Check_For_PassWord+0x322>
    781a:	88 ec       	ldi	r24, 0xC8	; 200
    781c:	90 e0       	ldi	r25, 0x00	; 0
    781e:	9a 8b       	std	Y+18, r25	; 0x12
    7820:	89 8b       	std	Y+17, r24	; 0x11
    7822:	89 89       	ldd	r24, Y+17	; 0x11
    7824:	9a 89       	ldd	r25, Y+18	; 0x12
    7826:	01 97       	sbiw	r24, 0x01	; 1
    7828:	f1 f7       	brne	.-4      	; 0x7826 <Check_For_PassWord+0x310>
    782a:	9a 8b       	std	Y+18, r25	; 0x12
    782c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    782e:	8b 89       	ldd	r24, Y+19	; 0x13
    7830:	9c 89       	ldd	r25, Y+20	; 0x14
    7832:	01 97       	sbiw	r24, 0x01	; 1
    7834:	9c 8b       	std	Y+20, r25	; 0x14
    7836:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7838:	8b 89       	ldd	r24, Y+19	; 0x13
    783a:	9c 89       	ldd	r25, Y+20	; 0x14
    783c:	00 97       	sbiw	r24, 0x00	; 0
    783e:	69 f7       	brne	.-38     	; 0x781a <Check_For_PassWord+0x304>
    7840:	14 c0       	rjmp	.+40     	; 0x786a <Check_For_PassWord+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7842:	6d 89       	ldd	r22, Y+21	; 0x15
    7844:	7e 89       	ldd	r23, Y+22	; 0x16
    7846:	8f 89       	ldd	r24, Y+23	; 0x17
    7848:	98 8d       	ldd	r25, Y+24	; 0x18
    784a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    784e:	dc 01       	movw	r26, r24
    7850:	cb 01       	movw	r24, r22
    7852:	9c 8b       	std	Y+20, r25	; 0x14
    7854:	8b 8b       	std	Y+19, r24	; 0x13
    7856:	8b 89       	ldd	r24, Y+19	; 0x13
    7858:	9c 89       	ldd	r25, Y+20	; 0x14
    785a:	98 8b       	std	Y+16, r25	; 0x10
    785c:	8f 87       	std	Y+15, r24	; 0x0f
    785e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7860:	98 89       	ldd	r25, Y+16	; 0x10
    7862:	01 97       	sbiw	r24, 0x01	; 1
    7864:	f1 f7       	brne	.-4      	; 0x7862 <Check_For_PassWord+0x34c>
    7866:	98 8b       	std	Y+16, r25	; 0x10
    7868:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1500);
			LCD_Clear();
    786a:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
			u8 *chr2 = "please wait 5 seconds then try";
    786e:	83 ea       	ldi	r24, 0xA3	; 163
    7870:	91 e0       	ldi	r25, 0x01	; 1
    7872:	9d a7       	std	Y+45, r25	; 0x2d
    7874:	8c a7       	std	Y+44, r24	; 0x2c
			LCD_DisplayString(chr2);
    7876:	8c a5       	ldd	r24, Y+44	; 0x2c
    7878:	9d a5       	ldd	r25, Y+45	; 0x2d
    787a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			LCD_SetCursorPosition(1,0);
    787e:	81 e0       	ldi	r24, 0x01	; 1
    7880:	60 e0       	ldi	r22, 0x00	; 0
    7882:	0e 94 55 1a 	call	0x34aa	; 0x34aa <LCD_SetCursorPosition>
			LCD_DisplayString("again");
    7886:	82 ec       	ldi	r24, 0xC2	; 194
    7888:	91 e0       	ldi	r25, 0x01	; 1
    788a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_DisplayString>
			DIO_SetPinLevel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    788e:	81 e0       	ldi	r24, 0x01	; 1
    7890:	63 e0       	ldi	r22, 0x03	; 3
    7892:	41 e0       	ldi	r20, 0x01	; 1
    7894:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
			wp=1;
    7898:	81 e0       	ldi	r24, 0x01	; 1
    789a:	80 93 d8 01 	sts	0x01D8, r24
    789e:	80 e0       	ldi	r24, 0x00	; 0
    78a0:	90 e4       	ldi	r25, 0x40	; 64
    78a2:	ac e9       	ldi	r26, 0x9C	; 156
    78a4:	b5 e4       	ldi	r27, 0x45	; 69
    78a6:	8b 87       	std	Y+11, r24	; 0x0b
    78a8:	9c 87       	std	Y+12, r25	; 0x0c
    78aa:	ad 87       	std	Y+13, r26	; 0x0d
    78ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    78ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    78b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    78b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    78b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    78b6:	20 e0       	ldi	r18, 0x00	; 0
    78b8:	30 e0       	ldi	r19, 0x00	; 0
    78ba:	4a ef       	ldi	r20, 0xFA	; 250
    78bc:	54 e4       	ldi	r21, 0x44	; 68
    78be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    78c2:	dc 01       	movw	r26, r24
    78c4:	cb 01       	movw	r24, r22
    78c6:	8f 83       	std	Y+7, r24	; 0x07
    78c8:	98 87       	std	Y+8, r25	; 0x08
    78ca:	a9 87       	std	Y+9, r26	; 0x09
    78cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    78ce:	6f 81       	ldd	r22, Y+7	; 0x07
    78d0:	78 85       	ldd	r23, Y+8	; 0x08
    78d2:	89 85       	ldd	r24, Y+9	; 0x09
    78d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    78d6:	20 e0       	ldi	r18, 0x00	; 0
    78d8:	30 e0       	ldi	r19, 0x00	; 0
    78da:	40 e8       	ldi	r20, 0x80	; 128
    78dc:	5f e3       	ldi	r21, 0x3F	; 63
    78de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    78e2:	88 23       	and	r24, r24
    78e4:	2c f4       	brge	.+10     	; 0x78f0 <Check_For_PassWord+0x3da>
		__ticks = 1;
    78e6:	81 e0       	ldi	r24, 0x01	; 1
    78e8:	90 e0       	ldi	r25, 0x00	; 0
    78ea:	9e 83       	std	Y+6, r25	; 0x06
    78ec:	8d 83       	std	Y+5, r24	; 0x05
    78ee:	3f c0       	rjmp	.+126    	; 0x796e <Check_For_PassWord+0x458>
	else if (__tmp > 65535)
    78f0:	6f 81       	ldd	r22, Y+7	; 0x07
    78f2:	78 85       	ldd	r23, Y+8	; 0x08
    78f4:	89 85       	ldd	r24, Y+9	; 0x09
    78f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    78f8:	20 e0       	ldi	r18, 0x00	; 0
    78fa:	3f ef       	ldi	r19, 0xFF	; 255
    78fc:	4f e7       	ldi	r20, 0x7F	; 127
    78fe:	57 e4       	ldi	r21, 0x47	; 71
    7900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    7904:	18 16       	cp	r1, r24
    7906:	4c f5       	brge	.+82     	; 0x795a <Check_For_PassWord+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7908:	6b 85       	ldd	r22, Y+11	; 0x0b
    790a:	7c 85       	ldd	r23, Y+12	; 0x0c
    790c:	8d 85       	ldd	r24, Y+13	; 0x0d
    790e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7910:	20 e0       	ldi	r18, 0x00	; 0
    7912:	30 e0       	ldi	r19, 0x00	; 0
    7914:	40 e2       	ldi	r20, 0x20	; 32
    7916:	51 e4       	ldi	r21, 0x41	; 65
    7918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    791c:	dc 01       	movw	r26, r24
    791e:	cb 01       	movw	r24, r22
    7920:	bc 01       	movw	r22, r24
    7922:	cd 01       	movw	r24, r26
    7924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7928:	dc 01       	movw	r26, r24
    792a:	cb 01       	movw	r24, r22
    792c:	9e 83       	std	Y+6, r25	; 0x06
    792e:	8d 83       	std	Y+5, r24	; 0x05
    7930:	0f c0       	rjmp	.+30     	; 0x7950 <Check_For_PassWord+0x43a>
    7932:	88 ec       	ldi	r24, 0xC8	; 200
    7934:	90 e0       	ldi	r25, 0x00	; 0
    7936:	9c 83       	std	Y+4, r25	; 0x04
    7938:	8b 83       	std	Y+3, r24	; 0x03
    793a:	8b 81       	ldd	r24, Y+3	; 0x03
    793c:	9c 81       	ldd	r25, Y+4	; 0x04
    793e:	01 97       	sbiw	r24, 0x01	; 1
    7940:	f1 f7       	brne	.-4      	; 0x793e <Check_For_PassWord+0x428>
    7942:	9c 83       	std	Y+4, r25	; 0x04
    7944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7946:	8d 81       	ldd	r24, Y+5	; 0x05
    7948:	9e 81       	ldd	r25, Y+6	; 0x06
    794a:	01 97       	sbiw	r24, 0x01	; 1
    794c:	9e 83       	std	Y+6, r25	; 0x06
    794e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7950:	8d 81       	ldd	r24, Y+5	; 0x05
    7952:	9e 81       	ldd	r25, Y+6	; 0x06
    7954:	00 97       	sbiw	r24, 0x00	; 0
    7956:	69 f7       	brne	.-38     	; 0x7932 <Check_For_PassWord+0x41c>
    7958:	14 c0       	rjmp	.+40     	; 0x7982 <Check_For_PassWord+0x46c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    795a:	6f 81       	ldd	r22, Y+7	; 0x07
    795c:	78 85       	ldd	r23, Y+8	; 0x08
    795e:	89 85       	ldd	r24, Y+9	; 0x09
    7960:	9a 85       	ldd	r25, Y+10	; 0x0a
    7962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7966:	dc 01       	movw	r26, r24
    7968:	cb 01       	movw	r24, r22
    796a:	9e 83       	std	Y+6, r25	; 0x06
    796c:	8d 83       	std	Y+5, r24	; 0x05
    796e:	8d 81       	ldd	r24, Y+5	; 0x05
    7970:	9e 81       	ldd	r25, Y+6	; 0x06
    7972:	9a 83       	std	Y+2, r25	; 0x02
    7974:	89 83       	std	Y+1, r24	; 0x01
    7976:	89 81       	ldd	r24, Y+1	; 0x01
    7978:	9a 81       	ldd	r25, Y+2	; 0x02
    797a:	01 97       	sbiw	r24, 0x01	; 1
    797c:	f1 f7       	brne	.-4      	; 0x797a <Check_For_PassWord+0x464>
    797e:	9a 83       	std	Y+2, r25	; 0x02
    7980:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5000);
			DIO_SetPinLevel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    7982:	81 e0       	ldi	r24, 0x01	; 1
    7984:	63 e0       	ldi	r22, 0x03	; 3
    7986:	40 e0       	ldi	r20, 0x00	; 0
    7988:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_SetPinLevel>
			wp=0;
    798c:	10 92 d8 01 	sts	0x01D8, r1
			LCD_Clear();
    7990:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_Clear>
			// return 0;
			// LCD_Clear();
			n=0;
    7994:	1d aa       	std	Y+53, r1	; 0x35
			counter=0;
    7996:	10 92 d7 01 	sts	0x01D7, r1
    799a:	10 92 d6 01 	sts	0x01D6, r1
			Gpt_StartTimer(GPT_CHANNEL_TIMER0, 250);
    799e:	80 e0       	ldi	r24, 0x00	; 0
    79a0:	6a ef       	ldi	r22, 0xFA	; 250
    79a2:	70 e0       	ldi	r23, 0x00	; 0
    79a4:	0e 94 a7 14 	call	0x294e	; 0x294e <Gpt_StartTimer>
			Gpt_EnableNotification(GPT_CHANNEL_TIMER0, GPT_MODE_CTC, TimerHandler);
    79a8:	2b ec       	ldi	r18, 0xCB	; 203
    79aa:	3e e2       	ldi	r19, 0x2E	; 46
    79ac:	80 e0       	ldi	r24, 0x00	; 0
    79ae:	61 e0       	ldi	r22, 0x01	; 1
    79b0:	a9 01       	movw	r20, r18
    79b2:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <Gpt_EnableNotification>
			return 0;
    79b6:	60 96       	adiw	r28, 0x10	; 16
    79b8:	1f ae       	std	Y+63, r1	; 0x3f
    79ba:	60 97       	sbiw	r28, 0x10	; 16
    79bc:	27 c0       	rjmp	.+78     	; 0x7a0c <Check_For_PassWord+0x4f6>
		}
		do
		{
			pressed_button = Keypad_GetPressedButton();
    79be:	0e 94 50 19 	call	0x32a0	; 0x32a0 <Keypad_GetPressedButton>
    79c2:	8a af       	std	Y+58, r24	; 0x3a
		} while (pressed_button == KEYPAD_BUTTON_INVALID);
    79c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    79c6:	80 31       	cpi	r24, 0x10	; 16
    79c8:	d1 f3       	breq	.-12     	; 0x79be <Check_For_PassWord+0x4a8>
		if (pressed_button != KEYPAD_BUTTON_INVALID)
    79ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    79cc:	80 31       	cpi	r24, 0x10	; 16
    79ce:	09 f4       	brne	.+2      	; 0x79d2 <Check_For_PassWord+0x4bc>
    79d0:	fe cd       	rjmp	.-1028   	; 0x75ce <Check_For_PassWord+0xb8>
		{

			if (Check_IS_Anumber(pressed_button))
    79d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    79d4:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <Check_IS_Anumber>
    79d8:	88 23       	and	r24, r24
    79da:	09 f4       	brne	.+2      	; 0x79de <Check_For_PassWord+0x4c8>
    79dc:	f8 cd       	rjmp	.-1040   	; 0x75ce <Check_For_PassWord+0xb8>
			{
				u8 x = Calculator_GetRealNumber(pressed_button);
    79de:	8a ad       	ldd	r24, Y+58	; 0x3a
    79e0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Calculator_GetRealNumber>
    79e4:	8b a7       	std	Y+43, r24	; 0x2b
				LCD_DisplayNumber(x);
    79e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    79e8:	88 2f       	mov	r24, r24
    79ea:	90 e0       	ldi	r25, 0x00	; 0
    79ec:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <LCD_DisplayNumber>
				arr[c] = x;
    79f0:	8e a9       	ldd	r24, Y+54	; 0x36
    79f2:	28 2f       	mov	r18, r24
    79f4:	30 e0       	ldi	r19, 0x00	; 0
    79f6:	ce 01       	movw	r24, r28
    79f8:	cb 96       	adiw	r24, 0x3b	; 59
    79fa:	fc 01       	movw	r30, r24
    79fc:	e2 0f       	add	r30, r18
    79fe:	f3 1f       	adc	r31, r19
    7a00:	8b a5       	ldd	r24, Y+43	; 0x2b
    7a02:	80 83       	st	Z, r24
				c++;
    7a04:	8e a9       	ldd	r24, Y+54	; 0x36
    7a06:	8f 5f       	subi	r24, 0xFF	; 255
    7a08:	8e ab       	std	Y+54, r24	; 0x36
    7a0a:	e1 cd       	rjmp	.-1086   	; 0x75ce <Check_For_PassWord+0xb8>
			}
		}
	}
    7a0c:	60 96       	adiw	r28, 0x10	; 16
    7a0e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7a10:	60 97       	sbiw	r28, 0x10	; 16
}				
    7a12:	c1 5b       	subi	r28, 0xB1	; 177
    7a14:	df 4f       	sbci	r29, 0xFF	; 255
    7a16:	0f b6       	in	r0, 0x3f	; 63
    7a18:	f8 94       	cli
    7a1a:	de bf       	out	0x3e, r29	; 62
    7a1c:	0f be       	out	0x3f, r0	; 63
    7a1e:	cd bf       	out	0x3d, r28	; 61
    7a20:	cf 91       	pop	r28
    7a22:	df 91       	pop	r29
    7a24:	08 95       	ret

00007a26 <Check_IS_Anumber>:

u8 Check_IS_Anumber(Keypad_ButtonType pressed_button)
{
    7a26:	df 93       	push	r29
    7a28:	cf 93       	push	r28
    7a2a:	00 d0       	rcall	.+0      	; 0x7a2c <Check_IS_Anumber+0x6>
    7a2c:	cd b7       	in	r28, 0x3d	; 61
    7a2e:	de b7       	in	r29, 0x3e	; 62
    7a30:	89 83       	std	Y+1, r24	; 0x01
	if (pressed_button != CALCULATOR_BUTTON_CLR && pressed_button != CALCULATOR_BUTTON_PLUS && pressed_button != CALCULATOR_BUTTON_MINUS && pressed_button != CALCULATOR_BUTTON_MUL && pressed_button != CALCULATOR_BUTTON_DIV && pressed_button != CALCULATOR_BUTTON_EQUAL && pressed_button != KEYPAD_BUTTON_INVALID)
    7a32:	89 81       	ldd	r24, Y+1	; 0x01
    7a34:	88 23       	and	r24, r24
    7a36:	a9 f0       	breq	.+42     	; 0x7a62 <Check_IS_Anumber+0x3c>
    7a38:	89 81       	ldd	r24, Y+1	; 0x01
    7a3a:	83 30       	cpi	r24, 0x03	; 3
    7a3c:	91 f0       	breq	.+36     	; 0x7a62 <Check_IS_Anumber+0x3c>
    7a3e:	89 81       	ldd	r24, Y+1	; 0x01
    7a40:	87 30       	cpi	r24, 0x07	; 7
    7a42:	79 f0       	breq	.+30     	; 0x7a62 <Check_IS_Anumber+0x3c>
    7a44:	89 81       	ldd	r24, Y+1	; 0x01
    7a46:	8b 30       	cpi	r24, 0x0B	; 11
    7a48:	61 f0       	breq	.+24     	; 0x7a62 <Check_IS_Anumber+0x3c>
    7a4a:	89 81       	ldd	r24, Y+1	; 0x01
    7a4c:	8f 30       	cpi	r24, 0x0F	; 15
    7a4e:	49 f0       	breq	.+18     	; 0x7a62 <Check_IS_Anumber+0x3c>
    7a50:	89 81       	ldd	r24, Y+1	; 0x01
    7a52:	82 30       	cpi	r24, 0x02	; 2
    7a54:	31 f0       	breq	.+12     	; 0x7a62 <Check_IS_Anumber+0x3c>
    7a56:	89 81       	ldd	r24, Y+1	; 0x01
    7a58:	80 31       	cpi	r24, 0x10	; 16
    7a5a:	19 f0       	breq	.+6      	; 0x7a62 <Check_IS_Anumber+0x3c>
		return 1;
    7a5c:	81 e0       	ldi	r24, 0x01	; 1
    7a5e:	8a 83       	std	Y+2, r24	; 0x02
    7a60:	01 c0       	rjmp	.+2      	; 0x7a64 <Check_IS_Anumber+0x3e>
	return 0;
    7a62:	1a 82       	std	Y+2, r1	; 0x02
    7a64:	8a 81       	ldd	r24, Y+2	; 0x02
}
    7a66:	0f 90       	pop	r0
    7a68:	0f 90       	pop	r0
    7a6a:	cf 91       	pop	r28
    7a6c:	df 91       	pop	r29
    7a6e:	08 95       	ret

00007a70 <__udivmodqi4>:
    7a70:	99 1b       	sub	r25, r25
    7a72:	79 e0       	ldi	r23, 0x09	; 9
    7a74:	04 c0       	rjmp	.+8      	; 0x7a7e <__udivmodqi4_ep>

00007a76 <__udivmodqi4_loop>:
    7a76:	99 1f       	adc	r25, r25
    7a78:	96 17       	cp	r25, r22
    7a7a:	08 f0       	brcs	.+2      	; 0x7a7e <__udivmodqi4_ep>
    7a7c:	96 1b       	sub	r25, r22

00007a7e <__udivmodqi4_ep>:
    7a7e:	88 1f       	adc	r24, r24
    7a80:	7a 95       	dec	r23
    7a82:	c9 f7       	brne	.-14     	; 0x7a76 <__udivmodqi4_loop>
    7a84:	80 95       	com	r24
    7a86:	08 95       	ret

00007a88 <__udivmodhi4>:
    7a88:	aa 1b       	sub	r26, r26
    7a8a:	bb 1b       	sub	r27, r27
    7a8c:	51 e1       	ldi	r21, 0x11	; 17
    7a8e:	07 c0       	rjmp	.+14     	; 0x7a9e <__udivmodhi4_ep>

00007a90 <__udivmodhi4_loop>:
    7a90:	aa 1f       	adc	r26, r26
    7a92:	bb 1f       	adc	r27, r27
    7a94:	a6 17       	cp	r26, r22
    7a96:	b7 07       	cpc	r27, r23
    7a98:	10 f0       	brcs	.+4      	; 0x7a9e <__udivmodhi4_ep>
    7a9a:	a6 1b       	sub	r26, r22
    7a9c:	b7 0b       	sbc	r27, r23

00007a9e <__udivmodhi4_ep>:
    7a9e:	88 1f       	adc	r24, r24
    7aa0:	99 1f       	adc	r25, r25
    7aa2:	5a 95       	dec	r21
    7aa4:	a9 f7       	brne	.-22     	; 0x7a90 <__udivmodhi4_loop>
    7aa6:	80 95       	com	r24
    7aa8:	90 95       	com	r25
    7aaa:	bc 01       	movw	r22, r24
    7aac:	cd 01       	movw	r24, r26
    7aae:	08 95       	ret

00007ab0 <__divmodhi4>:
    7ab0:	97 fb       	bst	r25, 7
    7ab2:	09 2e       	mov	r0, r25
    7ab4:	07 26       	eor	r0, r23
    7ab6:	0a d0       	rcall	.+20     	; 0x7acc <__divmodhi4_neg1>
    7ab8:	77 fd       	sbrc	r23, 7
    7aba:	04 d0       	rcall	.+8      	; 0x7ac4 <__divmodhi4_neg2>
    7abc:	e5 df       	rcall	.-54     	; 0x7a88 <__udivmodhi4>
    7abe:	06 d0       	rcall	.+12     	; 0x7acc <__divmodhi4_neg1>
    7ac0:	00 20       	and	r0, r0
    7ac2:	1a f4       	brpl	.+6      	; 0x7aca <__divmodhi4_exit>

00007ac4 <__divmodhi4_neg2>:
    7ac4:	70 95       	com	r23
    7ac6:	61 95       	neg	r22
    7ac8:	7f 4f       	sbci	r23, 0xFF	; 255

00007aca <__divmodhi4_exit>:
    7aca:	08 95       	ret

00007acc <__divmodhi4_neg1>:
    7acc:	f6 f7       	brtc	.-4      	; 0x7aca <__divmodhi4_exit>
    7ace:	90 95       	com	r25
    7ad0:	81 95       	neg	r24
    7ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad4:	08 95       	ret

00007ad6 <__prologue_saves__>:
    7ad6:	2f 92       	push	r2
    7ad8:	3f 92       	push	r3
    7ada:	4f 92       	push	r4
    7adc:	5f 92       	push	r5
    7ade:	6f 92       	push	r6
    7ae0:	7f 92       	push	r7
    7ae2:	8f 92       	push	r8
    7ae4:	9f 92       	push	r9
    7ae6:	af 92       	push	r10
    7ae8:	bf 92       	push	r11
    7aea:	cf 92       	push	r12
    7aec:	df 92       	push	r13
    7aee:	ef 92       	push	r14
    7af0:	ff 92       	push	r15
    7af2:	0f 93       	push	r16
    7af4:	1f 93       	push	r17
    7af6:	cf 93       	push	r28
    7af8:	df 93       	push	r29
    7afa:	cd b7       	in	r28, 0x3d	; 61
    7afc:	de b7       	in	r29, 0x3e	; 62
    7afe:	ca 1b       	sub	r28, r26
    7b00:	db 0b       	sbc	r29, r27
    7b02:	0f b6       	in	r0, 0x3f	; 63
    7b04:	f8 94       	cli
    7b06:	de bf       	out	0x3e, r29	; 62
    7b08:	0f be       	out	0x3f, r0	; 63
    7b0a:	cd bf       	out	0x3d, r28	; 61
    7b0c:	09 94       	ijmp

00007b0e <__epilogue_restores__>:
    7b0e:	2a 88       	ldd	r2, Y+18	; 0x12
    7b10:	39 88       	ldd	r3, Y+17	; 0x11
    7b12:	48 88       	ldd	r4, Y+16	; 0x10
    7b14:	5f 84       	ldd	r5, Y+15	; 0x0f
    7b16:	6e 84       	ldd	r6, Y+14	; 0x0e
    7b18:	7d 84       	ldd	r7, Y+13	; 0x0d
    7b1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7b1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7b1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7b20:	b9 84       	ldd	r11, Y+9	; 0x09
    7b22:	c8 84       	ldd	r12, Y+8	; 0x08
    7b24:	df 80       	ldd	r13, Y+7	; 0x07
    7b26:	ee 80       	ldd	r14, Y+6	; 0x06
    7b28:	fd 80       	ldd	r15, Y+5	; 0x05
    7b2a:	0c 81       	ldd	r16, Y+4	; 0x04
    7b2c:	1b 81       	ldd	r17, Y+3	; 0x03
    7b2e:	aa 81       	ldd	r26, Y+2	; 0x02
    7b30:	b9 81       	ldd	r27, Y+1	; 0x01
    7b32:	ce 0f       	add	r28, r30
    7b34:	d1 1d       	adc	r29, r1
    7b36:	0f b6       	in	r0, 0x3f	; 63
    7b38:	f8 94       	cli
    7b3a:	de bf       	out	0x3e, r29	; 62
    7b3c:	0f be       	out	0x3f, r0	; 63
    7b3e:	cd bf       	out	0x3d, r28	; 61
    7b40:	ed 01       	movw	r28, r26
    7b42:	08 95       	ret

00007b44 <_exit>:
    7b44:	f8 94       	cli

00007b46 <__stop_program>:
    7b46:	ff cf       	rjmp	.-2      	; 0x7b46 <__stop_program>
