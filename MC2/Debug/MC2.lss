
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00006602  00006696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800188  00800188  000067be  2**0
                  ALLOC
  3 .stab         000060e4  00000000  00000000  000067c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002601  00000000  00000000  0000c8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000eea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f045  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f237  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011642  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000129c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00014056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000149c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__vector_1>
       8:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__vector_2>
       c:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__vector_3>
      10:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__vector_4>
      14:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__vector_7>
      20:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__vector_8>
      24:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__vector_9>
      28:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_10>
      2c:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f6 e6       	ldi	r31, 0x66	; 102
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 2a 	call	0x5518	; 0x5518 <main>
      8a:	0c 94 ff 32 	jmp	0x65fe	; 0x65fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 32 	jmp	0x65c8	; 0x65c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 32 	jmp	0x6590	; 0x6590 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 32 	jmp	0x65c8	; 0x65c8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 32 	jmp	0x65a0	; 0x65a0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e7       	ldi	r22, 0x7D	; 125
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ec 32 	jmp	0x65d8	; 0x65d8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d8 32 	jmp	0x65b0	; 0x65b0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f4 32 	jmp	0x65e8	; 0x65e8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d0 32 	jmp	0x65a0	; 0x65a0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ec 32 	jmp	0x65d8	; 0x65d8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 57       	subi	r30, 0x7B	; 123
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_16>:
#include "Adc_cfg.h"
#include "GlobalInterrupt.h"

void (*Adc_Callback) (u16 res);

ISR(VECTOR_ADC) {
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
    Adc_Callback((ADC_DATA_REGISTER & 0b0000001111111111));
     e58:	20 91 96 01 	lds	r18, 0x0196
     e5c:	30 91 97 01 	lds	r19, 0x0197
     e60:	e4 e2       	ldi	r30, 0x24	; 36
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	93 70       	andi	r25, 0x03	; 3
     e6a:	f9 01       	movw	r30, r18
     e6c:	09 95       	icall
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <Adc_Init>:

void Adc_Init(void) {
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
    /*Reference Selection Bits*/
#if (ADC_REF_SELECTION == ADC_REF_AREF)
    CLR_BIT(ADMUX, ADMUX_REFS1);
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 77       	andi	r24, 0x7F	; 127
     ea8:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS0);
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7b       	andi	r24, 0xBF	; 191
     eb6:	8c 93       	st	X, r24
#else
    #error "Error Ref Selection Choise"
#endif

    /* No Left Adjust */
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     eb8:	a7 e2       	ldi	r26, 0x27	; 39
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e7 e2       	ldi	r30, 0x27	; 39
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7d       	andi	r24, 0xDF	; 223
     ec4:	8c 93       	st	X, r24

    /* ADC Enable */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     ec6:	a6 e2       	ldi	r26, 0x26	; 38
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e6 e2       	ldi	r30, 0x26	; 38
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 68       	ori	r24, 0x80	; 128
     ed2:	8c 93       	st	X, r24

    /* ADC Interrupt Enable */
#if (ADC_INT_STATE == ADC_INT_DISABLE)
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#elif (ADC_INT_STATE == ADC_INT_ENABLE)
    SET_BIT(ADCSRA, ADCSRA_ADIE);
     ed4:	a6 e2       	ldi	r26, 0x26	; 38
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e6 e2       	ldi	r30, 0x26	; 38
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 60       	ori	r24, 0x08	; 8
     ee0:	8c 93       	st	X, r24
#endif

    /* ADC Prescaler Select */

#if (ADC_PRESCALER == 128)
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     ee2:	a6 e2       	ldi	r26, 0x26	; 38
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e6 e2       	ldi	r30, 0x26	; 38
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	81 60       	ori	r24, 0x01	; 1
     eee:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     ef0:	a6 e2       	ldi	r26, 0x26	; 38
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e6 e2       	ldi	r30, 0x26	; 38
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	82 60       	ori	r24, 0x02	; 2
     efc:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     efe:	a6 e2       	ldi	r26, 0x26	; 38
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e6 e2       	ldi	r30, 0x26	; 38
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	84 60       	ori	r24, 0x04	; 4
     f0a:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    // TODO
#else
    #error "Error Prescaler Choise"
#endif
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Adc_StartConversion>:

void Adc_StartConversion(Adc_ChannelType channel) {
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
     f1e:	a7 e2       	ldi	r26, 0x27	; 39
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e2       	ldi	r30, 0x27	; 39
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 7e       	andi	r24, 0xE0	; 224
     f2a:	8c 93       	st	X, r24
    ADMUX |= channel;
     f2c:	a7 e2       	ldi	r26, 0x27	; 39
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e2       	ldi	r30, 0x27	; 39
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	90 81       	ld	r25, Z
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	89 2b       	or	r24, r25
     f3a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     f3c:	a6 e2       	ldi	r26, 0x26	; 38
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e6 e2       	ldi	r30, 0x26	; 38
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 64       	ori	r24, 0x40	; 64
     f48:	8c 93       	st	X, r24
}
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <Adc_Enable>:

void Adc_Enable(void) {
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     f5a:	a6 e2       	ldi	r26, 0x26	; 38
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e6 e2       	ldi	r30, 0x26	; 38
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 68       	ori	r24, 0x80	; 128
     f66:	8c 93       	st	X, r24
    // TODO
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <Adc_Disable>:

void Adc_Disable(void) {
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
     f76:	a6 e2       	ldi	r26, 0x26	; 38
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e6 e2       	ldi	r30, 0x26	; 38
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8f 77       	andi	r24, 0x7F	; 127
     f82:	8c 93       	st	X, r24
    // TODO
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <Adc_GetResult>:


Adc_ConversionStateType Adc_GetResult(u16* result) {
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <Adc_GetResult+0x6>
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9b 83       	std	Y+3, r25	; 0x03
     f98:	8a 83       	std	Y+2, r24	; 0x02
    Adc_ConversionStateType flag = ADC_CONVERSION_NOT_COMPLETE;
     f9a:	19 82       	std	Y+1, r1	; 0x01
    if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1) {
     f9c:	e6 e2       	ldi	r30, 0x26	; 38
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 95       	swap	r24
     fa4:	8f 70       	andi	r24, 0x0F	; 15
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	90 70       	andi	r25, 0x00	; 0
     fae:	88 23       	and	r24, r24
     fb0:	91 f0       	breq	.+36     	; 0xfd6 <Adc_GetResult+0x4c>
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     fb2:	a6 e2       	ldi	r26, 0x26	; 38
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e6 e2       	ldi	r30, 0x26	; 38
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	80 61       	ori	r24, 0x10	; 16
     fbe:	8c 93       	st	X, r24
        *result = ADC_DATA_REGISTER & 0b0000001111111111;
     fc0:	e4 e2       	ldi	r30, 0x24	; 36
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	93 70       	andi	r25, 0x03	; 3
     fca:	ea 81       	ldd	r30, Y+2	; 0x02
     fcc:	fb 81       	ldd	r31, Y+3	; 0x03
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
        flag = ADC_CONVERSION_COMPLETE;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	89 83       	std	Y+1, r24	; 0x01
    }
    return flag;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <Adc_GetResultPolling>:

u16 Adc_GetResultPolling(void) {
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
     fec:	e6 e2       	ldi	r30, 0x26	; 38
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	82 95       	swap	r24
     ff4:	8f 70       	andi	r24, 0x0F	; 15
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	81 70       	andi	r24, 0x01	; 1
     ffc:	90 70       	andi	r25, 0x00	; 0
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	a9 f3       	breq	.-22     	; 0xfec <Adc_GetResultPolling+0x8>
    return (ADC_DATA_REGISTER & 0b0000001111111111);
    1002:	e4 e2       	ldi	r30, 0x24	; 36
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	93 70       	andi	r25, 0x03	; 3
}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <Adc_SetCallback>:


void Adc_SetCallback (void (*callback) (u16 res)) {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <Adc_SetCallback+0x6>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    Adc_Callback = callback;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	90 93 97 01 	sts	0x0197, r25
    1028:	80 93 96 01 	sts	0x0196, r24
	}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	29 97       	sbiw	r28, 0x09	; 9
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	6a 83       	std	Y+2, r22	; 0x02
    104e:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING) 
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 23       	and	r24, r24
    1054:	09 f0       	breq	.+2      	; 0x1058 <DIO_SetPinMode+0x22>
    1056:	c2 c0       	rjmp	.+388    	; 0x11dc <DIO_SetPinMode+0x1a6>
    {
        switch (port)
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	39 87       	std	Y+9, r19	; 0x09
    1060:	28 87       	std	Y+8, r18	; 0x08
    1062:	88 85       	ldd	r24, Y+8	; 0x08
    1064:	99 85       	ldd	r25, Y+9	; 0x09
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <DIO_SetPinMode+0x38>
    106c:	3f c0       	rjmp	.+126    	; 0x10ec <DIO_SetPinMode+0xb6>
    106e:	28 85       	ldd	r18, Y+8	; 0x08
    1070:	39 85       	ldd	r19, Y+9	; 0x09
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <DIO_SetPinMode+0x4c>
    1078:	88 85       	ldd	r24, Y+8	; 0x08
    107a:	99 85       	ldd	r25, Y+9	; 0x09
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	71 f0       	breq	.+28     	; 0x109c <DIO_SetPinMode+0x66>
    1080:	e1 c1       	rjmp	.+962    	; 0x1444 <DIO_SetPinMode+0x40e>
    1082:	28 85       	ldd	r18, Y+8	; 0x08
    1084:	39 85       	ldd	r19, Y+9	; 0x09
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <DIO_SetPinMode+0x58>
    108c:	57 c0       	rjmp	.+174    	; 0x113c <DIO_SetPinMode+0x106>
    108e:	88 85       	ldd	r24, Y+8	; 0x08
    1090:	99 85       	ldd	r25, Y+9	; 0x09
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <DIO_SetPinMode+0x64>
    1098:	79 c0       	rjmp	.+242    	; 0x118c <DIO_SetPinMode+0x156>
    109a:	d4 c1       	rjmp	.+936    	; 0x1444 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    109c:	aa e3       	ldi	r26, 0x3A	; 58
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_SetPinMode+0x82>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	2a 95       	dec	r18
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_SetPinMode+0x7e>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    10c2:	ab e3       	ldi	r26, 0x3B	; 59
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e3       	ldi	r30, 0x3B	; 59
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_SetPinMode+0xaa>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_SetPinMode+0xa6>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	ac c1       	rjmp	.+856    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    10ec:	a7 e3       	ldi	r26, 0x37	; 55
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e7 e3       	ldi	r30, 0x37	; 55
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_SetPinMode+0xd2>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	2a 95       	dec	r18
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_SetPinMode+0xce>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    1112:	a8 e3       	ldi	r26, 0x38	; 56
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_SetPinMode+0xfa>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_SetPinMode+0xf6>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	84 c1       	rjmp	.+776    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    113c:	a4 e3       	ldi	r26, 0x34	; 52
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 e3       	ldi	r30, 0x34	; 52
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_SetPinMode+0x122>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	2a 95       	dec	r18
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_SetPinMode+0x11e>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    1162:	a5 e3       	ldi	r26, 0x35	; 53
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e5 e3       	ldi	r30, 0x35	; 53
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_SetPinMode+0x14a>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_SetPinMode+0x146>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	5c c1       	rjmp	.+696    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    118c:	a1 e3       	ldi	r26, 0x31	; 49
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_SetPinMode+0x172>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	2a 95       	dec	r18
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_SetPinMode+0x16e>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    11b2:	a2 e3       	ldi	r26, 0x32	; 50
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_SetPinMode+0x19a>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_SetPinMode+0x196>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	34 c1       	rjmp	.+616    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <DIO_SetPinMode+0x1ae>
    11e2:	be c0       	rjmp	.+380    	; 0x1360 <DIO_SetPinMode+0x32a>
    {
        switch (port)
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3f 83       	std	Y+7, r19	; 0x07
    11ec:	2e 83       	std	Y+6, r18	; 0x06
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	9f 81       	ldd	r25, Y+7	; 0x07
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <DIO_SetPinMode+0x1c4>
    11f8:	3e c0       	rjmp	.+124    	; 0x1276 <DIO_SetPinMode+0x240>
    11fa:	2e 81       	ldd	r18, Y+6	; 0x06
    11fc:	3f 81       	ldd	r19, Y+7	; 0x07
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <DIO_SetPinMode+0x1d8>
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	71 f0       	breq	.+28     	; 0x1228 <DIO_SetPinMode+0x1f2>
    120c:	1b c1       	rjmp	.+566    	; 0x1444 <DIO_SetPinMode+0x40e>
    120e:	2e 81       	ldd	r18, Y+6	; 0x06
    1210:	3f 81       	ldd	r19, Y+7	; 0x07
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <DIO_SetPinMode+0x1e4>
    1218:	55 c0       	rjmp	.+170    	; 0x12c4 <DIO_SetPinMode+0x28e>
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	9f 81       	ldd	r25, Y+7	; 0x07
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	91 05       	cpc	r25, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <DIO_SetPinMode+0x1f0>
    1224:	76 c0       	rjmp	.+236    	; 0x1312 <DIO_SetPinMode+0x2dc>
    1226:	0e c1       	rjmp	.+540    	; 0x1444 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    1228:	aa e3       	ldi	r26, 0x3A	; 58
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_SetPinMode+0x20e>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	2a 95       	dec	r18
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_SetPinMode+0x20a>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    124e:	ab e3       	ldi	r26, 0x3B	; 59
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	eb e3       	ldi	r30, 0x3B	; 59
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_SetPinMode+0x236>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_SetPinMode+0x232>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	e7 c0       	rjmp	.+462    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1276:	a7 e3       	ldi	r26, 0x37	; 55
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e7 e3       	ldi	r30, 0x37	; 55
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_SetPinMode+0x25c>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	2a 95       	dec	r18
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_SetPinMode+0x258>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    129c:	a8 e3       	ldi	r26, 0x38	; 56
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e8 e3       	ldi	r30, 0x38	; 56
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_SetPinMode+0x284>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_SetPinMode+0x280>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	c0 c0       	rjmp	.+384    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    12c4:	a4 e3       	ldi	r26, 0x34	; 52
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e4 e3       	ldi	r30, 0x34	; 52
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_SetPinMode+0x2aa>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	2a 95       	dec	r18
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_SetPinMode+0x2a6>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_SetPinMode+0x2d2>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_SetPinMode+0x2ce>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	99 c0       	rjmp	.+306    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    1312:	a1 e3       	ldi	r26, 0x31	; 49
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e1 e3       	ldi	r30, 0x31	; 49
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_SetPinMode+0x2f8>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	2a 95       	dec	r18
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_SetPinMode+0x2f4>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    1338:	a2 e3       	ldi	r26, 0x32	; 50
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e2 e3       	ldi	r30, 0x32	; 50
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_SetPinMode+0x320>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_SetPinMode+0x31c>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	72 c0       	rjmp	.+228    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	09 f0       	breq	.+2      	; 0x1368 <DIO_SetPinMode+0x332>
    1366:	6e c0       	rjmp	.+220    	; 0x1444 <DIO_SetPinMode+0x40e>
    {
        switch (port)
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3d 83       	std	Y+5, r19	; 0x05
    1370:	2c 83       	std	Y+4, r18	; 0x04
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	49 f1       	breq	.+82     	; 0x13ce <DIO_SetPinMode+0x398>
    137c:	2c 81       	ldd	r18, Y+4	; 0x04
    137e:	3d 81       	ldd	r19, Y+5	; 0x05
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	2c f4       	brge	.+10     	; 0x1390 <DIO_SetPinMode+0x35a>
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	61 f0       	breq	.+24     	; 0x13a6 <DIO_SetPinMode+0x370>
    138e:	5a c0       	rjmp	.+180    	; 0x1444 <DIO_SetPinMode+0x40e>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	71 f1       	breq	.+92     	; 0x13f6 <DIO_SetPinMode+0x3c0>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	91 05       	cpc	r25, r1
    13a2:	e9 f1       	breq	.+122    	; 0x141e <DIO_SetPinMode+0x3e8>
    13a4:	4f c0       	rjmp	.+158    	; 0x1444 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    13a6:	aa e3       	ldi	r26, 0x3A	; 58
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ea e3       	ldi	r30, 0x3A	; 58
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_SetPinMode+0x38e>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_SetPinMode+0x38a>
    13c8:	84 2b       	or	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	3b c0       	rjmp	.+118    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    13ce:	a7 e3       	ldi	r26, 0x37	; 55
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e7 e3       	ldi	r30, 0x37	; 55
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_SetPinMode+0x3b6>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_SetPinMode+0x3b2>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	27 c0       	rjmp	.+78     	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    13f6:	a4 e3       	ldi	r26, 0x34	; 52
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e3       	ldi	r30, 0x34	; 52
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_SetPinMode+0x3de>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_SetPinMode+0x3da>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	13 c0       	rjmp	.+38     	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    141e:	a1 e3       	ldi	r26, 0x31	; 49
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e1 e3       	ldi	r30, 0x31	; 49
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_SetPinMode+0x406>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_SetPinMode+0x402>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    1444:	29 96       	adiw	r28, 0x09	; 9
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	2a 97       	sbiw	r28, 0x0a	; 10
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING) 
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	88 23       	and	r24, r24
    1472:	d9 f5       	brne	.+118    	; 0x14ea <DIO_SetPortMode+0x94>
    {
        switch (port)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3a 87       	std	Y+10, r19	; 0x0a
    147c:	29 87       	std	Y+9, r18	; 0x09
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	e1 f0       	breq	.+56     	; 0x14c0 <DIO_SetPortMode+0x6a>
    1488:	29 85       	ldd	r18, Y+9	; 0x09
    148a:	3a 85       	ldd	r19, Y+10	; 0x0a
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <DIO_SetPortMode+0x46>
    1492:	89 85       	ldd	r24, Y+9	; 0x09
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	61 f0       	breq	.+24     	; 0x14b2 <DIO_SetPortMode+0x5c>
    149a:	d2 c0       	rjmp	.+420    	; 0x1640 <DIO_SetPortMode+0x1ea>
    149c:	29 85       	ldd	r18, Y+9	; 0x09
    149e:	3a 85       	ldd	r19, Y+10	; 0x0a
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	a1 f0       	breq	.+40     	; 0x14ce <DIO_SetPortMode+0x78>
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	b1 f0       	breq	.+44     	; 0x14dc <DIO_SetPortMode+0x86>
    14b0:	c7 c0       	rjmp	.+398    	; 0x1640 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    14b2:	ea e3       	ldi	r30, 0x3A	; 58
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	10 82       	st	Z, r1
            PORTA = 0x00;
    14b8:	eb e3       	ldi	r30, 0x3B	; 59
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
    14be:	c0 c0       	rjmp	.+384    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    14c0:	e7 e3       	ldi	r30, 0x37	; 55
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	10 82       	st	Z, r1
            PORTB = 0x00;
    14c6:	e8 e3       	ldi	r30, 0x38	; 56
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	10 82       	st	Z, r1
    14cc:	b9 c0       	rjmp	.+370    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    14ce:	e4 e3       	ldi	r30, 0x34	; 52
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	10 82       	st	Z, r1
            PORTC = 0x00;
    14d4:	e5 e3       	ldi	r30, 0x35	; 53
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	10 82       	st	Z, r1
    14da:	b2 c0       	rjmp	.+356    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    14dc:	e1 e3       	ldi	r30, 0x31	; 49
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	10 82       	st	Z, r1
            PORTD = 0x00;
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	10 82       	st	Z, r1
    14e8:	ab c0       	rjmp	.+342    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <DIO_SetPortMode+0x9c>
    14f0:	3f c0       	rjmp	.+126    	; 0x1570 <DIO_SetPortMode+0x11a>
    {
        switch (port)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	38 87       	std	Y+8, r19	; 0x08
    14fa:	2f 83       	std	Y+7, r18	; 0x07
    14fc:	8f 81       	ldd	r24, Y+7	; 0x07
    14fe:	98 85       	ldd	r25, Y+8	; 0x08
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	e9 f0       	breq	.+58     	; 0x1540 <DIO_SetPortMode+0xea>
    1506:	2f 81       	ldd	r18, Y+7	; 0x07
    1508:	38 85       	ldd	r19, Y+8	; 0x08
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_SetPortMode+0xc4>
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <DIO_SetPortMode+0xda>
    1518:	93 c0       	rjmp	.+294    	; 0x1640 <DIO_SetPortMode+0x1ea>
    151a:	2f 81       	ldd	r18, Y+7	; 0x07
    151c:	38 85       	ldd	r19, Y+8	; 0x08
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	b1 f0       	breq	.+44     	; 0x1550 <DIO_SetPortMode+0xfa>
    1524:	8f 81       	ldd	r24, Y+7	; 0x07
    1526:	98 85       	ldd	r25, Y+8	; 0x08
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	c9 f0       	breq	.+50     	; 0x1560 <DIO_SetPortMode+0x10a>
    152e:	88 c0       	rjmp	.+272    	; 0x1640 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    1530:	ea e3       	ldi	r30, 0x3A	; 58
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	10 82       	st	Z, r1
            PORTA = 0xFF;
    1536:	eb e3       	ldi	r30, 0x3B	; 59
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	80 83       	st	Z, r24
    153e:	80 c0       	rjmp	.+256    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1540:	e7 e3       	ldi	r30, 0x37	; 55
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	10 82       	st	Z, r1
            PORTB = 0xFF;
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	80 83       	st	Z, r24
    154e:	78 c0       	rjmp	.+240    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1550:	e4 e3       	ldi	r30, 0x34	; 52
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	10 82       	st	Z, r1
            PORTC = 0xFF;
    1556:	e5 e3       	ldi	r30, 0x35	; 53
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	80 83       	st	Z, r24
    155e:	70 c0       	rjmp	.+224    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1560:	e1 e3       	ldi	r30, 0x31	; 49
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	10 82       	st	Z, r1
            PORTD = 0xFF;
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	80 83       	st	Z, r24
    156e:	68 c0       	rjmp	.+208    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	99 f5       	brne	.+102    	; 0x15dc <DIO_SetPortMode+0x186>
    {
        switch (port)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3e 83       	std	Y+6, r19	; 0x06
    157e:	2d 83       	std	Y+5, r18	; 0x05
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	d1 f0       	breq	.+52     	; 0x15be <DIO_SetPortMode+0x168>
    158a:	2d 81       	ldd	r18, Y+5	; 0x05
    158c:	3e 81       	ldd	r19, Y+6	; 0x06
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <DIO_SetPortMode+0x148>
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	61 f0       	breq	.+24     	; 0x15b4 <DIO_SetPortMode+0x15e>
    159c:	51 c0       	rjmp	.+162    	; 0x1640 <DIO_SetPortMode+0x1ea>
    159e:	2d 81       	ldd	r18, Y+5	; 0x05
    15a0:	3e 81       	ldd	r19, Y+6	; 0x06
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <DIO_SetPortMode+0x172>
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <DIO_SetPortMode+0x17c>
    15b2:	46 c0       	rjmp	.+140    	; 0x1640 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    15b4:	ea e3       	ldi	r30, 0x3A	; 58
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	80 83       	st	Z, r24
    15bc:	41 c0       	rjmp	.+130    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    15be:	e7 e3       	ldi	r30, 0x37	; 55
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	80 83       	st	Z, r24
    15c6:	3c c0       	rjmp	.+120    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    15c8:	e4 e3       	ldi	r30, 0x34	; 52
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	80 83       	st	Z, r24
    15d0:	37 c0       	rjmp	.+110    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    15d2:	e1 e3       	ldi	r30, 0x31	; 49
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	80 83       	st	Z, r24
    15da:	32 c0       	rjmp	.+100    	; 0x1640 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3c 83       	std	Y+4, r19	; 0x04
    15e4:	2b 83       	std	Y+3, r18	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	d1 f0       	breq	.+52     	; 0x1624 <DIO_SetPortMode+0x1ce>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <DIO_SetPortMode+0x1ae>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 f0       	breq	.+24     	; 0x161a <DIO_SetPortMode+0x1c4>
    1602:	1e c0       	rjmp	.+60     	; 0x1640 <DIO_SetPortMode+0x1ea>
    1604:	2b 81       	ldd	r18, Y+3	; 0x03
    1606:	3c 81       	ldd	r19, Y+4	; 0x04
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	81 f0       	breq	.+32     	; 0x162e <DIO_SetPortMode+0x1d8>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <DIO_SetPortMode+0x1e2>
    1618:	13 c0       	rjmp	.+38     	; 0x1640 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    161a:	ea e3       	ldi	r30, 0x3A	; 58
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
    1622:	0e c0       	rjmp	.+28     	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    1624:	e7 e3       	ldi	r30, 0x37	; 55
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	80 83       	st	Z, r24
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    162e:	e4 e3       	ldi	r30, 0x34	; 52
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 83       	st	Z, r24
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    1638:	e1 e3       	ldi	r30, 0x31	; 49
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1640:	2a 96       	adiw	r28, 0x0a	; 10
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <DIO_FlipPinLevel>:

void DIO_FlipPinLevel(DIO_PortType port, DIO_PinType pin) {
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <DIO_FlipPinLevel+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <DIO_FlipPinLevel+0x8>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	6a 83       	std	Y+2, r22	; 0x02
    switch (port)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3c 83       	std	Y+4, r19	; 0x04
    166a:	2b 83       	std	Y+3, r18	; 0x03
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	49 f1       	breq	.+82     	; 0x16c8 <DIO_FlipPinLevel+0x76>
    1676:	2b 81       	ldd	r18, Y+3	; 0x03
    1678:	3c 81       	ldd	r19, Y+4	; 0x04
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	2c f4       	brge	.+10     	; 0x168a <DIO_FlipPinLevel+0x38>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	61 f0       	breq	.+24     	; 0x16a0 <DIO_FlipPinLevel+0x4e>
    1688:	5a c0       	rjmp	.+180    	; 0x173e <DIO_FlipPinLevel+0xec>
    168a:	2b 81       	ldd	r18, Y+3	; 0x03
    168c:	3c 81       	ldd	r19, Y+4	; 0x04
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	71 f1       	breq	.+92     	; 0x16f0 <DIO_FlipPinLevel+0x9e>
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	e9 f1       	breq	.+122    	; 0x1718 <DIO_FlipPinLevel+0xc6>
    169e:	4f c0       	rjmp	.+158    	; 0x173e <DIO_FlipPinLevel+0xec>
    {
    case DIO_PORTA:
        TOG_BIT(PORTA, pin);
    16a0:	ab e3       	ldi	r26, 0x3B	; 59
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_FlipPinLevel+0x6c>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_FlipPinLevel+0x68>
    16c2:	84 27       	eor	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	3b c0       	rjmp	.+118    	; 0x173e <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTB:
        TOG_BIT(PORTB, pin);
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_FlipPinLevel+0x94>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_FlipPinLevel+0x90>
    16ea:	84 27       	eor	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	27 c0       	rjmp	.+78     	; 0x173e <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTC:
        TOG_BIT(PORTC, pin);
    16f0:	a5 e3       	ldi	r26, 0x35	; 53
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e3       	ldi	r30, 0x35	; 53
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_FlipPinLevel+0xbc>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_FlipPinLevel+0xb8>
    1712:	84 27       	eor	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	13 c0       	rjmp	.+38     	; 0x173e <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTD:
        TOG_BIT(PORTD, pin);
    1718:	a2 e3       	ldi	r26, 0x32	; 50
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e2 e3       	ldi	r30, 0x32	; 50
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_FlipPinLevel+0xe4>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_FlipPinLevel+0xe0>
    173a:	84 27       	eor	r24, r20
    173c:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <DIO_SetPinLevel>:

void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	27 97       	sbiw	r28, 0x07	; 7
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	6a 83       	std	Y+2, r22	; 0x02
    1764:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH) 
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	09 f0       	breq	.+2      	; 0x176e <DIO_SetPinLevel+0x22>
    176c:	6f c0       	rjmp	.+222    	; 0x184c <DIO_SetPinLevel+0x100>
    {
        switch (port)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3f 83       	std	Y+7, r19	; 0x07
    1776:	2e 83       	std	Y+6, r18	; 0x06
    1778:	8e 81       	ldd	r24, Y+6	; 0x06
    177a:	9f 81       	ldd	r25, Y+7	; 0x07
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	49 f1       	breq	.+82     	; 0x17d4 <DIO_SetPinLevel+0x88>
    1782:	2e 81       	ldd	r18, Y+6	; 0x06
    1784:	3f 81       	ldd	r19, Y+7	; 0x07
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	2c f4       	brge	.+10     	; 0x1796 <DIO_SetPinLevel+0x4a>
    178c:	8e 81       	ldd	r24, Y+6	; 0x06
    178e:	9f 81       	ldd	r25, Y+7	; 0x07
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	61 f0       	breq	.+24     	; 0x17ac <DIO_SetPinLevel+0x60>
    1794:	d2 c0       	rjmp	.+420    	; 0x193a <DIO_SetPinLevel+0x1ee>
    1796:	2e 81       	ldd	r18, Y+6	; 0x06
    1798:	3f 81       	ldd	r19, Y+7	; 0x07
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	71 f1       	breq	.+92     	; 0x17fc <DIO_SetPinLevel+0xb0>
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	9f 81       	ldd	r25, Y+7	; 0x07
    17a4:	83 30       	cpi	r24, 0x03	; 3
    17a6:	91 05       	cpc	r25, r1
    17a8:	e9 f1       	breq	.+122    	; 0x1824 <DIO_SetPinLevel+0xd8>
    17aa:	c7 c0       	rjmp	.+398    	; 0x193a <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    17ac:	ab e3       	ldi	r26, 0x3B	; 59
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	eb e3       	ldi	r30, 0x3B	; 59
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_SetPinLevel+0x7e>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_SetPinLevel+0x7a>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	b3 c0       	rjmp	.+358    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    17d4:	a8 e3       	ldi	r26, 0x38	; 56
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e8 e3       	ldi	r30, 0x38	; 56
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_SetPinLevel+0xa6>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_SetPinLevel+0xa2>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	9f c0       	rjmp	.+318    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    17fc:	a5 e3       	ldi	r26, 0x35	; 53
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e5 e3       	ldi	r30, 0x35	; 53
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_SetPinLevel+0xce>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_SetPinLevel+0xca>
    181e:	84 2b       	or	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	8b c0       	rjmp	.+278    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    1824:	a2 e3       	ldi	r26, 0x32	; 50
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e2 e3       	ldi	r30, 0x32	; 50
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_SetPinLevel+0xf6>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_SetPinLevel+0xf2>
    1846:	84 2b       	or	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	77 c0       	rjmp	.+238    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) 
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	88 23       	and	r24, r24
    1850:	09 f0       	breq	.+2      	; 0x1854 <DIO_SetPinLevel+0x108>
    1852:	73 c0       	rjmp	.+230    	; 0x193a <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3d 83       	std	Y+5, r19	; 0x05
    185c:	2c 83       	std	Y+4, r18	; 0x04
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	59 f1       	breq	.+86     	; 0x18be <DIO_SetPinLevel+0x172>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <DIO_SetPinLevel+0x130>
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	69 f0       	breq	.+26     	; 0x1894 <DIO_SetPinLevel+0x148>
    187a:	5f c0       	rjmp	.+190    	; 0x193a <DIO_SetPinLevel+0x1ee>
    187c:	2c 81       	ldd	r18, Y+4	; 0x04
    187e:	3d 81       	ldd	r19, Y+5	; 0x05
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	89 f1       	breq	.+98     	; 0x18e8 <DIO_SetPinLevel+0x19c>
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <DIO_SetPinLevel+0x146>
    1890:	40 c0       	rjmp	.+128    	; 0x1912 <DIO_SetPinLevel+0x1c6>
    1892:	53 c0       	rjmp	.+166    	; 0x193a <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_SetPinLevel+0x166>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <DIO_SetPinLevel+0x162>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	3e c0       	rjmp	.+124    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    18be:	a8 e3       	ldi	r26, 0x38	; 56
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_SetPinLevel+0x190>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_SetPinLevel+0x18c>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	29 c0       	rjmp	.+82     	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    18e8:	a5 e3       	ldi	r26, 0x35	; 53
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_SetPinLevel+0x1ba>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_SetPinLevel+0x1b6>
    190a:	80 95       	com	r24
    190c:	84 23       	and	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	14 c0       	rjmp	.+40     	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    1912:	a2 e3       	ldi	r26, 0x32	; 50
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e2 e3       	ldi	r30, 0x32	; 50
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_SetPinLevel+0x1e4>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_SetPinLevel+0x1e0>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    193a:	27 96       	adiw	r28, 0x07	; 7
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	28 97       	sbiw	r28, 0x08	; 8
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	99 f5       	brne	.+102    	; 0x19d0 <DIO_SetPortLevel+0x84>
        switch (port)
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	38 87       	std	Y+8, r19	; 0x08
    1972:	2f 83       	std	Y+7, r18	; 0x07
    1974:	8f 81       	ldd	r24, Y+7	; 0x07
    1976:	98 85       	ldd	r25, Y+8	; 0x08
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	91 05       	cpc	r25, r1
    197c:	d1 f0       	breq	.+52     	; 0x19b2 <DIO_SetPortLevel+0x66>
    197e:	2f 81       	ldd	r18, Y+7	; 0x07
    1980:	38 85       	ldd	r19, Y+8	; 0x08
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	2c f4       	brge	.+10     	; 0x1992 <DIO_SetPortLevel+0x46>
    1988:	8f 81       	ldd	r24, Y+7	; 0x07
    198a:	98 85       	ldd	r25, Y+8	; 0x08
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	61 f0       	breq	.+24     	; 0x19a8 <DIO_SetPortLevel+0x5c>
    1990:	83 c0       	rjmp	.+262    	; 0x1a98 <DIO_SetPortLevel+0x14c>
    1992:	2f 81       	ldd	r18, Y+7	; 0x07
    1994:	38 85       	ldd	r19, Y+8	; 0x08
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	81 f0       	breq	.+32     	; 0x19bc <DIO_SetPortLevel+0x70>
    199c:	8f 81       	ldd	r24, Y+7	; 0x07
    199e:	98 85       	ldd	r25, Y+8	; 0x08
    19a0:	83 30       	cpi	r24, 0x03	; 3
    19a2:	91 05       	cpc	r25, r1
    19a4:	81 f0       	breq	.+32     	; 0x19c6 <DIO_SetPortLevel+0x7a>
    19a6:	78 c0       	rjmp	.+240    	; 0x1a98 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    19a8:	eb e3       	ldi	r30, 0x3B	; 59
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	80 83       	st	Z, r24
    19b0:	73 c0       	rjmp	.+230    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    19b2:	e8 e3       	ldi	r30, 0x38	; 56
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	80 83       	st	Z, r24
    19ba:	6e c0       	rjmp	.+220    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    19bc:	e5 e3       	ldi	r30, 0x35	; 53
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	80 83       	st	Z, r24
    19c4:	69 c0       	rjmp	.+210    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    19c6:	e2 e3       	ldi	r30, 0x32	; 50
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	80 83       	st	Z, r24
    19ce:	64 c0       	rjmp	.+200    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	88 23       	and	r24, r24
    19d4:	79 f5       	brne	.+94     	; 0x1a34 <DIO_SetPortLevel+0xe8>
        switch (port)
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3e 83       	std	Y+6, r19	; 0x06
    19de:	2d 83       	std	Y+5, r18	; 0x05
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	c9 f0       	breq	.+50     	; 0x1a1c <DIO_SetPortLevel+0xd0>
    19ea:	2d 81       	ldd	r18, Y+5	; 0x05
    19ec:	3e 81       	ldd	r19, Y+6	; 0x06
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	2c f4       	brge	.+10     	; 0x19fe <DIO_SetPortLevel+0xb2>
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	61 f0       	breq	.+24     	; 0x1a14 <DIO_SetPortLevel+0xc8>
    19fc:	4d c0       	rjmp	.+154    	; 0x1a98 <DIO_SetPortLevel+0x14c>
    19fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1a00:	3e 81       	ldd	r19, Y+6	; 0x06
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	71 f0       	breq	.+28     	; 0x1a24 <DIO_SetPortLevel+0xd8>
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	91 05       	cpc	r25, r1
    1a10:	69 f0       	breq	.+26     	; 0x1a2c <DIO_SetPortLevel+0xe0>
    1a12:	42 c0       	rjmp	.+132    	; 0x1a98 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    1a14:	eb e3       	ldi	r30, 0x3B	; 59
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	10 82       	st	Z, r1
    1a1a:	3e c0       	rjmp	.+124    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    1a1c:	e8 e3       	ldi	r30, 0x38	; 56
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	10 82       	st	Z, r1
    1a22:	3a c0       	rjmp	.+116    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	10 82       	st	Z, r1
    1a2a:	36 c0       	rjmp	.+108    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    1a2c:	e2 e3       	ldi	r30, 0x32	; 50
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
    1a32:	32 c0       	rjmp	.+100    	; 0x1a98 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3c 83       	std	Y+4, r19	; 0x04
    1a3c:	2b 83       	std	Y+3, r18	; 0x03
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	91 05       	cpc	r25, r1
    1a46:	d1 f0       	breq	.+52     	; 0x1a7c <DIO_SetPortLevel+0x130>
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <DIO_SetPortLevel+0x110>
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <DIO_SetPortLevel+0x126>
    1a5a:	1e c0       	rjmp	.+60     	; 0x1a98 <DIO_SetPortLevel+0x14c>
    1a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	81 f0       	breq	.+32     	; 0x1a86 <DIO_SetPortLevel+0x13a>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	81 f0       	breq	.+32     	; 0x1a90 <DIO_SetPortLevel+0x144>
    1a70:	13 c0       	rjmp	.+38     	; 0x1a98 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1a72:	eb e3       	ldi	r30, 0x3B	; 59
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	80 83       	st	Z, r24
    1a7a:	0e c0       	rjmp	.+28     	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    1a7c:	e8 e3       	ldi	r30, 0x38	; 56
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	80 83       	st	Z, r24
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1a86:	e5 e3       	ldi	r30, 0x35	; 53
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	80 83       	st	Z, r24
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1a90:	e2 e3       	ldi	r30, 0x32	; 50
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1a98:	28 96       	adiw	r28, 0x08	; 8
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <DIO_ReadPinLevel+0x6>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <DIO_ReadPinLevel+0x8>
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
    1aba:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    1abc:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	3d 83       	std	Y+5, r19	; 0x05
    1ac6:	2c 83       	std	Y+4, r18	; 0x04
    1ac8:	4c 81       	ldd	r20, Y+4	; 0x04
    1aca:	5d 81       	ldd	r21, Y+5	; 0x05
    1acc:	41 30       	cpi	r20, 0x01	; 1
    1ace:	51 05       	cpc	r21, r1
    1ad0:	41 f1       	breq	.+80     	; 0x1b22 <DIO_ReadPinLevel+0x78>
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	91 05       	cpc	r25, r1
    1ada:	34 f4       	brge	.+12     	; 0x1ae8 <DIO_ReadPinLevel+0x3e>
    1adc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ade:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae0:	21 15       	cp	r18, r1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <DIO_ReadPinLevel+0x54>
    1ae6:	52 c0       	rjmp	.+164    	; 0x1b8c <DIO_ReadPinLevel+0xe2>
    1ae8:	4c 81       	ldd	r20, Y+4	; 0x04
    1aea:	5d 81       	ldd	r21, Y+5	; 0x05
    1aec:	42 30       	cpi	r20, 0x02	; 2
    1aee:	51 05       	cpc	r21, r1
    1af0:	51 f1       	breq	.+84     	; 0x1b46 <DIO_ReadPinLevel+0x9c>
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	b9 f1       	breq	.+110    	; 0x1b6a <DIO_ReadPinLevel+0xc0>
    1afc:	47 c0       	rjmp	.+142    	; 0x1b8c <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    1afe:	e9 e3       	ldi	r30, 0x39	; 57
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a9 01       	movw	r20, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_ReadPinLevel+0x6c>
    1b12:	55 95       	asr	r21
    1b14:	47 95       	ror	r20
    1b16:	8a 95       	dec	r24
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <DIO_ReadPinLevel+0x68>
    1b1a:	ca 01       	movw	r24, r20
    1b1c:	81 70       	andi	r24, 0x01	; 1
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	35 c0       	rjmp	.+106    	; 0x1b8c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    1b22:	e6 e3       	ldi	r30, 0x36	; 54
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a9 01       	movw	r20, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_ReadPinLevel+0x90>
    1b36:	55 95       	asr	r21
    1b38:	47 95       	ror	r20
    1b3a:	8a 95       	dec	r24
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_ReadPinLevel+0x8c>
    1b3e:	ca 01       	movw	r24, r20
    1b40:	81 70       	andi	r24, 0x01	; 1
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	23 c0       	rjmp	.+70     	; 0x1b8c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    1b46:	e3 e3       	ldi	r30, 0x33	; 51
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a9 01       	movw	r20, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <DIO_ReadPinLevel+0xb4>
    1b5a:	55 95       	asr	r21
    1b5c:	47 95       	ror	r20
    1b5e:	8a 95       	dec	r24
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <DIO_ReadPinLevel+0xb0>
    1b62:	ca 01       	movw	r24, r20
    1b64:	81 70       	andi	r24, 0x01	; 1
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	11 c0       	rjmp	.+34     	; 0x1b8c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    1b6a:	e0 e3       	ldi	r30, 0x30	; 48
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	88 2f       	mov	r24, r24
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a9 01       	movw	r20, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_ReadPinLevel+0xd8>
    1b7e:	55 95       	asr	r21
    1b80:	47 95       	ror	r20
    1b82:	8a 95       	dec	r24
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <DIO_ReadPinLevel+0xd4>
    1b86:	ca 01       	movw	r24, r20
    1b88:	81 70       	andi	r24, 0x01	; 1
    1b8a:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <DIO_ReadPortLevel+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <DIO_ReadPortLevel+0x8>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    1bac:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	3c 83       	std	Y+4, r19	; 0x04
    1bb6:	2b 83       	std	Y+3, r18	; 0x03
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	49 f1       	breq	.+82     	; 0x1c14 <DIO_ReadPortLevel+0x76>
    1bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	31 05       	cpc	r19, r1
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <DIO_ReadPortLevel+0x38>
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	61 f0       	breq	.+24     	; 0x1bec <DIO_ReadPortLevel+0x4e>
    1bd4:	5a c0       	rjmp	.+180    	; 0x1c8a <DIO_ReadPortLevel+0xec>
    1bd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bda:	22 30       	cpi	r18, 0x02	; 2
    1bdc:	31 05       	cpc	r19, r1
    1bde:	71 f1       	breq	.+92     	; 0x1c3c <DIO_ReadPortLevel+0x9e>
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	91 05       	cpc	r25, r1
    1be8:	e9 f1       	breq	.+122    	; 0x1c64 <DIO_ReadPortLevel+0xc6>
    1bea:	4f c0       	rjmp	.+158    	; 0x1c8a <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    1bec:	e9 e3       	ldi	r30, 0x39	; 57
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	47 c0       	rjmp	.+142    	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    1bfc:	e9 e3       	ldi	r30, 0x39	; 57
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	88 23       	and	r24, r24
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1c06:	19 82       	std	Y+1, r1	; 0x01
    1c08:	40 c0       	rjmp	.+128    	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    1c0a:	e9 e3       	ldi	r30, 0x39	; 57
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	3b c0       	rjmp	.+118    	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1c14:	e6 e3       	ldi	r30, 0x36	; 54
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1c:	19 f4       	brne	.+6      	; 0x1c24 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	33 c0       	rjmp	.+102    	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    1c24:	e6 e3       	ldi	r30, 0x36	; 54
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 23       	and	r24, r24
    1c2c:	11 f4       	brne	.+4      	; 0x1c32 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1c2e:	19 82       	std	Y+1, r1	; 0x01
    1c30:	2c c0       	rjmp	.+88     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1c32:	e6 e3       	ldi	r30, 0x36	; 54
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	27 c0       	rjmp	.+78     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    1c3c:	e3 e3       	ldi	r30, 0x33	; 51
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8f 3f       	cpi	r24, 0xFF	; 255
    1c44:	19 f4       	brne	.+6      	; 0x1c4c <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	1f c0       	rjmp	.+62     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    1c4c:	e3 e3       	ldi	r30, 0x33	; 51
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	88 23       	and	r24, r24
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    1c56:	19 82       	std	Y+1, r1	; 0x01
    1c58:	18 c0       	rjmp	.+48     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    1c5a:	e3 e3       	ldi	r30, 0x33	; 51
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    1c64:	e0 e3       	ldi	r30, 0x30	; 48
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c6c:	19 f4       	brne	.+6      	; 0x1c74 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	0b c0       	rjmp	.+22     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1c74:	e0 e3       	ldi	r30, 0x30	; 48
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 23       	and	r24, r24
    1c7c:	11 f4       	brne	.+4      	; 0x1c82 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    1c7e:	19 82       	std	Y+1, r1	; 0x01
    1c80:	04 c0       	rjmp	.+8      	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1c82:	e0 e3       	ldi	r30, 0x30	; 48
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <EEPROM_Init>:
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <I2C_InitMaster>
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <EEPROM_Write_Byte>:
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <EEPROM_Write_Byte+0x6>
    1cb2:	0f 92       	push	r0
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	6a 83       	std	Y+2, r22	; 0x02
    1cbc:	4b 83       	std	Y+3, r20	; 0x03
    1cbe:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2C_SendStartCondition>
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	0e 94 11 1a 	call	0x3422	; 0x3422 <I2C_MasterWriteDataByte>
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	0e 94 11 1a 	call	0x3422	; 0x3422 <I2C_MasterWriteDataByte>
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	0e 94 11 1a 	call	0x3422	; 0x3422 <I2C_MasterWriteDataByte>
    1cd4:	0e 94 06 1a 	call	0x340c	; 0x340c <I2C_SendStopCondition>
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <EEPROM_Read_Byte>:
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <EEPROM_Read_Byte+0x6>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	6a 83       	std	Y+2, r22	; 0x02
    1cf2:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2C_SendStartCondition>
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	0e 94 11 1a 	call	0x3422	; 0x3422 <I2C_MasterWriteDataByte>
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	0e 94 11 1a 	call	0x3422	; 0x3422 <I2C_MasterWriteDataByte>
    1d02:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2C_SendStartCondition>
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	81 60       	ori	r24, 0x01	; 1
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	0e 94 11 1a 	call	0x3422	; 0x3422 <I2C_MasterWriteDataByte>
    1d12:	0e 94 3b 1a 	call	0x3476	; 0x3476 <I2C_MasterReadDataByteWith_NACK>
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <__vector_1>:
void (*ExtInterrupt_INT0Callback) (void);
void (*ExtInterrupt_INT1Callback) (void);
void (*ExtInterrupt_INT2Callback) (void);

void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void) {
    1d20:	1f 92       	push	r1
    1d22:	0f 92       	push	r0
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	0f 92       	push	r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	2f 93       	push	r18
    1d2c:	3f 93       	push	r19
    1d2e:	4f 93       	push	r20
    1d30:	5f 93       	push	r21
    1d32:	6f 93       	push	r22
    1d34:	7f 93       	push	r23
    1d36:	8f 93       	push	r24
    1d38:	9f 93       	push	r25
    1d3a:	af 93       	push	r26
    1d3c:	bf 93       	push	r27
    1d3e:	ef 93       	push	r30
    1d40:	ff 93       	push	r31
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT0Callback();
    1d4a:	e0 91 9a 01 	lds	r30, 0x019A
    1d4e:	f0 91 9b 01 	lds	r31, 0x019B
    1d52:	09 95       	icall
}
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	ff 91       	pop	r31
    1d5a:	ef 91       	pop	r30
    1d5c:	bf 91       	pop	r27
    1d5e:	af 91       	pop	r26
    1d60:	9f 91       	pop	r25
    1d62:	8f 91       	pop	r24
    1d64:	7f 91       	pop	r23
    1d66:	6f 91       	pop	r22
    1d68:	5f 91       	pop	r21
    1d6a:	4f 91       	pop	r20
    1d6c:	3f 91       	pop	r19
    1d6e:	2f 91       	pop	r18
    1d70:	0f 90       	pop	r0
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	0f 90       	pop	r0
    1d76:	1f 90       	pop	r1
    1d78:	18 95       	reti

00001d7a <__vector_2>:
void __vector_2 (void) __attribute__ ((signal));
void __vector_2 (void) {
    1d7a:	1f 92       	push	r1
    1d7c:	0f 92       	push	r0
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	0f 92       	push	r0
    1d82:	11 24       	eor	r1, r1
    1d84:	2f 93       	push	r18
    1d86:	3f 93       	push	r19
    1d88:	4f 93       	push	r20
    1d8a:	5f 93       	push	r21
    1d8c:	6f 93       	push	r22
    1d8e:	7f 93       	push	r23
    1d90:	8f 93       	push	r24
    1d92:	9f 93       	push	r25
    1d94:	af 93       	push	r26
    1d96:	bf 93       	push	r27
    1d98:	ef 93       	push	r30
    1d9a:	ff 93       	push	r31
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT1Callback();
    1da4:	e0 91 98 01 	lds	r30, 0x0198
    1da8:	f0 91 99 01 	lds	r31, 0x0199
    1dac:	09 95       	icall
}
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	ff 91       	pop	r31
    1db4:	ef 91       	pop	r30
    1db6:	bf 91       	pop	r27
    1db8:	af 91       	pop	r26
    1dba:	9f 91       	pop	r25
    1dbc:	8f 91       	pop	r24
    1dbe:	7f 91       	pop	r23
    1dc0:	6f 91       	pop	r22
    1dc2:	5f 91       	pop	r21
    1dc4:	4f 91       	pop	r20
    1dc6:	3f 91       	pop	r19
    1dc8:	2f 91       	pop	r18
    1dca:	0f 90       	pop	r0
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	0f 90       	pop	r0
    1dd0:	1f 90       	pop	r1
    1dd2:	18 95       	reti

00001dd4 <__vector_3>:
void __vector_3 (void) __attribute__ ((signal));
void __vector_3 (void) {
    1dd4:	1f 92       	push	r1
    1dd6:	0f 92       	push	r0
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	0f 92       	push	r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	2f 93       	push	r18
    1de0:	3f 93       	push	r19
    1de2:	4f 93       	push	r20
    1de4:	5f 93       	push	r21
    1de6:	6f 93       	push	r22
    1de8:	7f 93       	push	r23
    1dea:	8f 93       	push	r24
    1dec:	9f 93       	push	r25
    1dee:	af 93       	push	r26
    1df0:	bf 93       	push	r27
    1df2:	ef 93       	push	r30
    1df4:	ff 93       	push	r31
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	ExtInterrupt_INT2Callback();
    1dfe:	e0 91 9c 01 	lds	r30, 0x019C
    1e02:	f0 91 9d 01 	lds	r31, 0x019D
    1e06:	09 95       	icall
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	ff 91       	pop	r31
    1e0e:	ef 91       	pop	r30
    1e10:	bf 91       	pop	r27
    1e12:	af 91       	pop	r26
    1e14:	9f 91       	pop	r25
    1e16:	8f 91       	pop	r24
    1e18:	7f 91       	pop	r23
    1e1a:	6f 91       	pop	r22
    1e1c:	5f 91       	pop	r21
    1e1e:	4f 91       	pop	r20
    1e20:	3f 91       	pop	r19
    1e22:	2f 91       	pop	r18
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	0f 90       	pop	r0
    1e2a:	1f 90       	pop	r1
    1e2c:	18 95       	reti

00001e2e <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(MCUCR, MCUCR_ISC00);
    SET_BIT(MCUCR, MCUCR_ISC01);
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    1e36:	a5 e5       	ldi	r26, 0x55	; 85
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e5 e5       	ldi	r30, 0x55	; 85
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	81 60       	ori	r24, 0x01	; 1
    1e42:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    1e44:	a5 e5       	ldi	r26, 0x55	; 85
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e5       	ldi	r30, 0x55	; 85
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	8d 7f       	andi	r24, 0xFD	; 253
    1e50:	8c 93       	st	X, r24
    /*************************** Interrupt 1 Init ***************************/

#ifdef EXT_INTERRUPT_INT1
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT1_INT_ENABLE == EXT_INTERRUPT_ENABLE
   SET_BIT(GICR, GICR_INT0); // External Interrupt Request 1 Enable
    1e52:	ab e5       	ldi	r26, 0x5B	; 91
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	eb e5       	ldi	r30, 0x5B	; 91
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 64       	ori	r24, 0x40	; 64
    1e5e:	8c 93       	st	X, r24
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_RISING_EDGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    SET_BIT(MCUCR, MCUCR_ISC11);
    // TODO
#elif EXT_INTERRUPT_INT1_SENSE == EXT_INTERRUPT_ON_CHANGE
    SET_BIT(MCUCR, MCUCR_ISC10);
    1e60:	a5 e5       	ldi	r26, 0x55	; 85
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e5 e5       	ldi	r30, 0x55	; 85
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	84 60       	ori	r24, 0x04	; 4
    1e6c:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC11);
    1e6e:	a5 e5       	ldi	r26, 0x55	; 85
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e5 e5       	ldi	r30, 0x55	; 85
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	87 7f       	andi	r24, 0xF7	; 247
    1e7a:	8c 93       	st	X, r24
#if EXT_INTERRUPT_INT2_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT2); // External Interrupt Request 1 Enable
   // GlobalInterrupt_Enable(); // Global Interrupt Enable
    // TODO
#elif EXT_INTERRUPT_INT2_INT_ENABLE == EXT_INTERRUPT_DISABLE
     CLR_BIT(GICR, GICR_INT2); // External Interrupt Request 0 Disable
    1e7c:	ab e5       	ldi	r26, 0x5B	; 91
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	eb e5       	ldi	r30, 0x5B	; 91
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8f 7d       	andi	r24, 0xDF	; 223
    1e88:	8c 93       	st	X, r24
    GlobalInterrupt_Disable(); // Global Interrupt Disable
    1e8a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <GlobalInterrupt_Disable>
    // TODO
#endif

    /* Sense Control */
#if EXT_INTERRUPT_INT2_SENSE == EXT_INTERRUPT_FALLING_EDGE
    CLR_BIT(MCUCR, MCUCSR_ISC2);
    1e8e:	a5 e5       	ldi	r26, 0x55	; 85
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e5 e5       	ldi	r30, 0x55	; 85
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8f 7b       	andi	r24, 0xBF	; 191
    1e9a:	8c 93       	st	X, r24
#endif
#endif



}
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <ExtInterrupt_SetINT0Callback>:

void ExtInterrupt_SetINT0Callback (void (*callback) (void)) {
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <ExtInterrupt_SetINT0Callback+0x6>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT0Callback = callback;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	90 93 9b 01 	sts	0x019B, r25
    1eb8:	80 93 9a 01 	sts	0x019A, r24
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <ExtInterrupt_SetINT1Callback>:

void ExtInterrupt_SetINT1Callback (void (*callback) (void)) {
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <ExtInterrupt_SetINT1Callback+0x6>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT1Callback = callback;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	90 93 99 01 	sts	0x0199, r25
    1edc:	80 93 98 01 	sts	0x0198, r24
   // TODO
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <ExtInterrupt_SetINT2Callback>:

void ExtInterrupt_SetINT2Callback (void (*callback) (void)) {
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <ExtInterrupt_SetINT2Callback+0x6>
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT2Callback = callback;
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	90 93 9d 01 	sts	0x019D, r25
    1f00:	80 93 9c 01 	sts	0x019C, r24
   // TODO
}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1f16:	af e5       	ldi	r26, 0x5F	; 95
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	ef e5       	ldi	r30, 0x5F	; 95
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 68       	ori	r24, 0x80	; 128
    1f22:	8c 93       	st	X, r24
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1f32:	af e5       	ldi	r26, 0x5F	; 95
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ef e5       	ldi	r30, 0x5F	; 95
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	8f 77       	andi	r24, 0x7F	; 127
    1f3e:	8c 93       	st	X, r24
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <__vector_10>:
void (*Gpt_Timer2_Callback_Ctc)(void);
void (*Gpt_Timer2_Callback_Normal)(void);

/************ ISR ************/
ISR(VECTOR_TIMER0_CTC)
{
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	2f 93       	push	r18
    1f52:	3f 93       	push	r19
    1f54:	4f 93       	push	r20
    1f56:	5f 93       	push	r21
    1f58:	6f 93       	push	r22
    1f5a:	7f 93       	push	r23
    1f5c:	8f 93       	push	r24
    1f5e:	9f 93       	push	r25
    1f60:	af 93       	push	r26
    1f62:	bf 93       	push	r27
    1f64:	ef 93       	push	r30
    1f66:	ff 93       	push	r31
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Ctc();
    1f70:	e0 91 9e 01 	lds	r30, 0x019E
    1f74:	f0 91 9f 01 	lds	r31, 0x019F
    1f78:	09 95       	icall
}
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	ff 91       	pop	r31
    1f80:	ef 91       	pop	r30
    1f82:	bf 91       	pop	r27
    1f84:	af 91       	pop	r26
    1f86:	9f 91       	pop	r25
    1f88:	8f 91       	pop	r24
    1f8a:	7f 91       	pop	r23
    1f8c:	6f 91       	pop	r22
    1f8e:	5f 91       	pop	r21
    1f90:	4f 91       	pop	r20
    1f92:	3f 91       	pop	r19
    1f94:	2f 91       	pop	r18
    1f96:	0f 90       	pop	r0
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	0f 90       	pop	r0
    1f9c:	1f 90       	pop	r1
    1f9e:	18 95       	reti

00001fa0 <__vector_11>:
ISR(VECTOR_TIMER0_NORM)
{
    1fa0:	1f 92       	push	r1
    1fa2:	0f 92       	push	r0
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	0f 92       	push	r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	2f 93       	push	r18
    1fac:	3f 93       	push	r19
    1fae:	4f 93       	push	r20
    1fb0:	5f 93       	push	r21
    1fb2:	6f 93       	push	r22
    1fb4:	7f 93       	push	r23
    1fb6:	8f 93       	push	r24
    1fb8:	9f 93       	push	r25
    1fba:	af 93       	push	r26
    1fbc:	bf 93       	push	r27
    1fbe:	ef 93       	push	r30
    1fc0:	ff 93       	push	r31
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Normal();
    1fca:	e0 91 a8 01 	lds	r30, 0x01A8
    1fce:	f0 91 a9 01 	lds	r31, 0x01A9
    1fd2:	09 95       	icall
}
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	ff 91       	pop	r31
    1fda:	ef 91       	pop	r30
    1fdc:	bf 91       	pop	r27
    1fde:	af 91       	pop	r26
    1fe0:	9f 91       	pop	r25
    1fe2:	8f 91       	pop	r24
    1fe4:	7f 91       	pop	r23
    1fe6:	6f 91       	pop	r22
    1fe8:	5f 91       	pop	r21
    1fea:	4f 91       	pop	r20
    1fec:	3f 91       	pop	r19
    1fee:	2f 91       	pop	r18
    1ff0:	0f 90       	pop	r0
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	0f 90       	pop	r0
    1ff6:	1f 90       	pop	r1
    1ff8:	18 95       	reti

00001ffa <__vector_9>:
ISR(VECTOR_TIMER1_NORM)
{
    1ffa:	1f 92       	push	r1
    1ffc:	0f 92       	push	r0
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	0f 92       	push	r0
    2002:	11 24       	eor	r1, r1
    2004:	2f 93       	push	r18
    2006:	3f 93       	push	r19
    2008:	4f 93       	push	r20
    200a:	5f 93       	push	r21
    200c:	6f 93       	push	r22
    200e:	7f 93       	push	r23
    2010:	8f 93       	push	r24
    2012:	9f 93       	push	r25
    2014:	af 93       	push	r26
    2016:	bf 93       	push	r27
    2018:	ef 93       	push	r30
    201a:	ff 93       	push	r31
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1_Callback_Normal();
    2024:	e0 91 aa 01 	lds	r30, 0x01AA
    2028:	f0 91 ab 01 	lds	r31, 0x01AB
    202c:	09 95       	icall
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	ff 91       	pop	r31
    2034:	ef 91       	pop	r30
    2036:	bf 91       	pop	r27
    2038:	af 91       	pop	r26
    203a:	9f 91       	pop	r25
    203c:	8f 91       	pop	r24
    203e:	7f 91       	pop	r23
    2040:	6f 91       	pop	r22
    2042:	5f 91       	pop	r21
    2044:	4f 91       	pop	r20
    2046:	3f 91       	pop	r19
    2048:	2f 91       	pop	r18
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <__vector_7>:
ISR(VECTOR_TIMER1A_CTC)
{
    2054:	1f 92       	push	r1
    2056:	0f 92       	push	r0
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	0f 92       	push	r0
    205c:	11 24       	eor	r1, r1
    205e:	2f 93       	push	r18
    2060:	3f 93       	push	r19
    2062:	4f 93       	push	r20
    2064:	5f 93       	push	r21
    2066:	6f 93       	push	r22
    2068:	7f 93       	push	r23
    206a:	8f 93       	push	r24
    206c:	9f 93       	push	r25
    206e:	af 93       	push	r26
    2070:	bf 93       	push	r27
    2072:	ef 93       	push	r30
    2074:	ff 93       	push	r31
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1A_Callback_Ctc();
    207e:	e0 91 a6 01 	lds	r30, 0x01A6
    2082:	f0 91 a7 01 	lds	r31, 0x01A7
    2086:	09 95       	icall
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	ff 91       	pop	r31
    208e:	ef 91       	pop	r30
    2090:	bf 91       	pop	r27
    2092:	af 91       	pop	r26
    2094:	9f 91       	pop	r25
    2096:	8f 91       	pop	r24
    2098:	7f 91       	pop	r23
    209a:	6f 91       	pop	r22
    209c:	5f 91       	pop	r21
    209e:	4f 91       	pop	r20
    20a0:	3f 91       	pop	r19
    20a2:	2f 91       	pop	r18
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <__vector_8>:
ISR(VECTOR_TIMER1B_CTC)
{
    20ae:	1f 92       	push	r1
    20b0:	0f 92       	push	r0
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	0f 92       	push	r0
    20b6:	11 24       	eor	r1, r1
    20b8:	2f 93       	push	r18
    20ba:	3f 93       	push	r19
    20bc:	4f 93       	push	r20
    20be:	5f 93       	push	r21
    20c0:	6f 93       	push	r22
    20c2:	7f 93       	push	r23
    20c4:	8f 93       	push	r24
    20c6:	9f 93       	push	r25
    20c8:	af 93       	push	r26
    20ca:	bf 93       	push	r27
    20cc:	ef 93       	push	r30
    20ce:	ff 93       	push	r31
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1B_Callback_Ctc();
    20d8:	e0 91 a2 01 	lds	r30, 0x01A2
    20dc:	f0 91 a3 01 	lds	r31, 0x01A3
    20e0:	09 95       	icall
}
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	0f 90       	pop	r0
    2104:	1f 90       	pop	r1
    2106:	18 95       	reti

00002108 <__vector_5>:
ISR(VECTOR_TIMER2_NORM)
{
    2108:	1f 92       	push	r1
    210a:	0f 92       	push	r0
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	0f 92       	push	r0
    2110:	11 24       	eor	r1, r1
    2112:	2f 93       	push	r18
    2114:	3f 93       	push	r19
    2116:	4f 93       	push	r20
    2118:	5f 93       	push	r21
    211a:	6f 93       	push	r22
    211c:	7f 93       	push	r23
    211e:	8f 93       	push	r24
    2120:	9f 93       	push	r25
    2122:	af 93       	push	r26
    2124:	bf 93       	push	r27
    2126:	ef 93       	push	r30
    2128:	ff 93       	push	r31
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Normal();
    2132:	e0 91 a4 01 	lds	r30, 0x01A4
    2136:	f0 91 a5 01 	lds	r31, 0x01A5
    213a:	09 95       	icall
}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	ff 91       	pop	r31
    2142:	ef 91       	pop	r30
    2144:	bf 91       	pop	r27
    2146:	af 91       	pop	r26
    2148:	9f 91       	pop	r25
    214a:	8f 91       	pop	r24
    214c:	7f 91       	pop	r23
    214e:	6f 91       	pop	r22
    2150:	5f 91       	pop	r21
    2152:	4f 91       	pop	r20
    2154:	3f 91       	pop	r19
    2156:	2f 91       	pop	r18
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	0f 90       	pop	r0
    215e:	1f 90       	pop	r1
    2160:	18 95       	reti

00002162 <__vector_4>:
ISR(VECTOR_TIMER2_CTC)
{
    2162:	1f 92       	push	r1
    2164:	0f 92       	push	r0
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	0f 92       	push	r0
    216a:	11 24       	eor	r1, r1
    216c:	2f 93       	push	r18
    216e:	3f 93       	push	r19
    2170:	4f 93       	push	r20
    2172:	5f 93       	push	r21
    2174:	6f 93       	push	r22
    2176:	7f 93       	push	r23
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	af 93       	push	r26
    217e:	bf 93       	push	r27
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Ctc();
    218c:	e0 91 a0 01 	lds	r30, 0x01A0
    2190:	f0 91 a1 01 	lds	r31, 0x01A1
    2194:	09 95       	icall
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	ff 91       	pop	r31
    219c:	ef 91       	pop	r30
    219e:	bf 91       	pop	r27
    21a0:	af 91       	pop	r26
    21a2:	9f 91       	pop	r25
    21a4:	8f 91       	pop	r24
    21a6:	7f 91       	pop	r23
    21a8:	6f 91       	pop	r22
    21aa:	5f 91       	pop	r21
    21ac:	4f 91       	pop	r20
    21ae:	3f 91       	pop	r19
    21b0:	2f 91       	pop	r18
    21b2:	0f 90       	pop	r0
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	0f 90       	pop	r0
    21b8:	1f 90       	pop	r1
    21ba:	18 95       	reti

000021bc <Gpt_Init>:

Gpt_ReturnType Gpt_Init(Gpt_ConfigType *config)
{
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	65 97       	sbiw	r28, 0x15	; 21
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	9b 83       	std	Y+3, r25	; 0x03
    21d2:	8a 83       	std	Y+2, r24	; 0x02
    Gpt_ReturnType returnValue = GPT_OK;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    21d8:	ea 81       	ldd	r30, Y+2	; 0x02
    21da:	fb 81       	ldd	r31, Y+3	; 0x03
    21dc:	80 81       	ld	r24, Z
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	3d 8b       	std	Y+21, r19	; 0x15
    21e4:	2c 8b       	std	Y+20, r18	; 0x14
    21e6:	8c 89       	ldd	r24, Y+20	; 0x14
    21e8:	9d 89       	ldd	r25, Y+21	; 0x15
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	91 05       	cpc	r25, r1
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <Gpt_Init+0x36>
    21f0:	92 c1       	rjmp	.+804    	; 0x2516 <Gpt_Init+0x35a>
    21f2:	2c 89       	ldd	r18, Y+20	; 0x14
    21f4:	3d 89       	ldd	r19, Y+21	; 0x15
    21f6:	22 30       	cpi	r18, 0x02	; 2
    21f8:	31 05       	cpc	r19, r1
    21fa:	2c f4       	brge	.+10     	; 0x2206 <Gpt_Init+0x4a>
    21fc:	8c 89       	ldd	r24, Y+20	; 0x14
    21fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	71 f0       	breq	.+28     	; 0x2220 <Gpt_Init+0x64>
    2204:	2a c6       	rjmp	.+3156   	; 0x2e5a <Gpt_Init+0xc9e>
    2206:	2c 89       	ldd	r18, Y+20	; 0x14
    2208:	3d 89       	ldd	r19, Y+21	; 0x15
    220a:	22 30       	cpi	r18, 0x02	; 2
    220c:	31 05       	cpc	r19, r1
    220e:	09 f4       	brne	.+2      	; 0x2212 <Gpt_Init+0x56>
    2210:	19 c3       	rjmp	.+1586   	; 0x2844 <Gpt_Init+0x688>
    2212:	8c 89       	ldd	r24, Y+20	; 0x14
    2214:	9d 89       	ldd	r25, Y+21	; 0x15
    2216:	83 30       	cpi	r24, 0x03	; 3
    2218:	91 05       	cpc	r25, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <Gpt_Init+0x62>
    221c:	aa c4       	rjmp	.+2388   	; 0x2b72 <Gpt_Init+0x9b6>
    221e:	1d c6       	rjmp	.+3130   	; 0x2e5a <Gpt_Init+0xc9e>
    {

    case GPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2220:	ea 81       	ldd	r30, Y+2	; 0x02
    2222:	fb 81       	ldd	r31, Y+3	; 0x03
    2224:	81 81       	ldd	r24, Z+1	; 0x01
    2226:	88 23       	and	r24, r24
    2228:	79 f4       	brne	.+30     	; 0x2248 <Gpt_Init+0x8c>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    222a:	a3 e5       	ldi	r26, 0x53	; 83
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e3 e5       	ldi	r30, 0x53	; 83
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8f 7b       	andi	r24, 0xBF	; 191
    2236:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    2238:	a3 e5       	ldi	r26, 0x53	; 83
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e3 e5       	ldi	r30, 0x53	; 83
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	87 7f       	andi	r24, 0xF7	; 247
    2244:	8c 93       	st	X, r24
    2246:	15 c0       	rjmp	.+42     	; 0x2272 <Gpt_Init+0xb6>
        }
        else if (config->mode == GPT_MODE_CTC)
    2248:	ea 81       	ldd	r30, Y+2	; 0x02
    224a:	fb 81       	ldd	r31, Y+3	; 0x03
    224c:	81 81       	ldd	r24, Z+1	; 0x01
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	79 f4       	brne	.+30     	; 0x2270 <Gpt_Init+0xb4>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    2252:	a3 e5       	ldi	r26, 0x53	; 83
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e3 e5       	ldi	r30, 0x53	; 83
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8f 7b       	andi	r24, 0xBF	; 191
    225e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    2260:	a3 e5       	ldi	r26, 0x53	; 83
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e3 e5       	ldi	r30, 0x53	; 83
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	88 60       	ori	r24, 0x08	; 8
    226c:	8c 93       	st	X, r24
    226e:	01 c0       	rjmp	.+2      	; 0x2272 <Gpt_Init+0xb6>
        }
        else
        {
            returnValue = GPT_ERROR;
    2270:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2272:	ea 81       	ldd	r30, Y+2	; 0x02
    2274:	fb 81       	ldd	r31, Y+3	; 0x03
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	3b 8b       	std	Y+19, r19	; 0x13
    227e:	2a 8b       	std	Y+18, r18	; 0x12
    2280:	8a 89       	ldd	r24, Y+18	; 0x12
    2282:	9b 89       	ldd	r25, Y+19	; 0x13
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	91 05       	cpc	r25, r1
    2288:	21 f1       	breq	.+72     	; 0x22d2 <Gpt_Init+0x116>
    228a:	2a 89       	ldd	r18, Y+18	; 0x12
    228c:	3b 89       	ldd	r19, Y+19	; 0x13
    228e:	22 30       	cpi	r18, 0x02	; 2
    2290:	31 05       	cpc	r19, r1
    2292:	2c f4       	brge	.+10     	; 0x229e <Gpt_Init+0xe2>
    2294:	8a 89       	ldd	r24, Y+18	; 0x12
    2296:	9b 89       	ldd	r25, Y+19	; 0x13
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	61 f0       	breq	.+24     	; 0x22b4 <Gpt_Init+0xf8>
    229c:	47 c0       	rjmp	.+142    	; 0x232c <Gpt_Init+0x170>
    229e:	2a 89       	ldd	r18, Y+18	; 0x12
    22a0:	3b 89       	ldd	r19, Y+19	; 0x13
    22a2:	22 30       	cpi	r18, 0x02	; 2
    22a4:	31 05       	cpc	r19, r1
    22a6:	21 f1       	breq	.+72     	; 0x22f0 <Gpt_Init+0x134>
    22a8:	8a 89       	ldd	r24, Y+18	; 0x12
    22aa:	9b 89       	ldd	r25, Y+19	; 0x13
    22ac:	83 30       	cpi	r24, 0x03	; 3
    22ae:	91 05       	cpc	r25, r1
    22b0:	71 f1       	breq	.+92     	; 0x230e <Gpt_Init+0x152>
    22b2:	3c c0       	rjmp	.+120    	; 0x232c <Gpt_Init+0x170>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    22b4:	a3 e5       	ldi	r26, 0x53	; 83
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e3 e5       	ldi	r30, 0x53	; 83
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8f 7e       	andi	r24, 0xEF	; 239
    22c0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    22c2:	a3 e5       	ldi	r26, 0x53	; 83
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e3 e5       	ldi	r30, 0x53	; 83
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8f 7d       	andi	r24, 0xDF	; 223
    22ce:	8c 93       	st	X, r24
    22d0:	2e c0       	rjmp	.+92     	; 0x232e <Gpt_Init+0x172>
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR0, TCCR0_COM00);
    22d2:	a3 e5       	ldi	r26, 0x53	; 83
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e3 e5       	ldi	r30, 0x53	; 83
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	80 61       	ori	r24, 0x10	; 16
    22de:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    22e0:	a3 e5       	ldi	r26, 0x53	; 83
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e3 e5       	ldi	r30, 0x53	; 83
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8f 7d       	andi	r24, 0xDF	; 223
    22ec:	8c 93       	st	X, r24
    22ee:	1f c0       	rjmp	.+62     	; 0x232e <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    22f0:	a3 e5       	ldi	r26, 0x53	; 83
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e3 e5       	ldi	r30, 0x53	; 83
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	80 61       	ori	r24, 0x10	; 16
    22fc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    22fe:	a3 e5       	ldi	r26, 0x53	; 83
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e3 e5       	ldi	r30, 0x53	; 83
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	80 62       	ori	r24, 0x20	; 32
    230a:	8c 93       	st	X, r24
    230c:	10 c0       	rjmp	.+32     	; 0x232e <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    230e:	a3 e5       	ldi	r26, 0x53	; 83
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e3 e5       	ldi	r30, 0x53	; 83
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	8f 7e       	andi	r24, 0xEF	; 239
    231a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    231c:	a3 e5       	ldi	r26, 0x53	; 83
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e3 e5       	ldi	r30, 0x53	; 83
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	80 62       	ori	r24, 0x20	; 32
    2328:	8c 93       	st	X, r24
    232a:	01 c0       	rjmp	.+2      	; 0x232e <Gpt_Init+0x172>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    232c:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    232e:	ea 81       	ldd	r30, Y+2	; 0x02
    2330:	fb 81       	ldd	r31, Y+3	; 0x03
    2332:	83 81       	ldd	r24, Z+3	; 0x03
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	39 8b       	std	Y+17, r19	; 0x11
    233a:	28 8b       	std	Y+16, r18	; 0x10
    233c:	88 89       	ldd	r24, Y+16	; 0x10
    233e:	99 89       	ldd	r25, Y+17	; 0x11
    2340:	84 30       	cpi	r24, 0x04	; 4
    2342:	91 05       	cpc	r25, r1
    2344:	09 f4       	brne	.+2      	; 0x2348 <Gpt_Init+0x18c>
    2346:	77 c0       	rjmp	.+238    	; 0x2436 <Gpt_Init+0x27a>
    2348:	28 89       	ldd	r18, Y+16	; 0x10
    234a:	39 89       	ldd	r19, Y+17	; 0x11
    234c:	25 30       	cpi	r18, 0x05	; 5
    234e:	31 05       	cpc	r19, r1
    2350:	8c f4       	brge	.+34     	; 0x2374 <Gpt_Init+0x1b8>
    2352:	88 89       	ldd	r24, Y+16	; 0x10
    2354:	99 89       	ldd	r25, Y+17	; 0x11
    2356:	81 30       	cpi	r24, 0x01	; 1
    2358:	91 05       	cpc	r25, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <Gpt_Init+0x1a2>
    235c:	40 c0       	rjmp	.+128    	; 0x23de <Gpt_Init+0x222>
    235e:	28 89       	ldd	r18, Y+16	; 0x10
    2360:	39 89       	ldd	r19, Y+17	; 0x11
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <Gpt_Init+0x1ae>
    2368:	50 c0       	rjmp	.+160    	; 0x240a <Gpt_Init+0x24e>
    236a:	88 89       	ldd	r24, Y+16	; 0x10
    236c:	99 89       	ldd	r25, Y+17	; 0x11
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	01 f1       	breq	.+64     	; 0x23b2 <Gpt_Init+0x1f6>
    2372:	cf c0       	rjmp	.+414    	; 0x2512 <Gpt_Init+0x356>
    2374:	28 89       	ldd	r18, Y+16	; 0x10
    2376:	39 89       	ldd	r19, Y+17	; 0x11
    2378:	27 30       	cpi	r18, 0x07	; 7
    237a:	31 05       	cpc	r19, r1
    237c:	09 f4       	brne	.+2      	; 0x2380 <Gpt_Init+0x1c4>
    237e:	87 c0       	rjmp	.+270    	; 0x248e <Gpt_Init+0x2d2>
    2380:	88 89       	ldd	r24, Y+16	; 0x10
    2382:	99 89       	ldd	r25, Y+17	; 0x11
    2384:	88 30       	cpi	r24, 0x08	; 8
    2386:	91 05       	cpc	r25, r1
    2388:	3c f4       	brge	.+14     	; 0x2398 <Gpt_Init+0x1dc>
    238a:	28 89       	ldd	r18, Y+16	; 0x10
    238c:	39 89       	ldd	r19, Y+17	; 0x11
    238e:	26 30       	cpi	r18, 0x06	; 6
    2390:	31 05       	cpc	r19, r1
    2392:	09 f4       	brne	.+2      	; 0x2396 <Gpt_Init+0x1da>
    2394:	66 c0       	rjmp	.+204    	; 0x2462 <Gpt_Init+0x2a6>
    2396:	bd c0       	rjmp	.+378    	; 0x2512 <Gpt_Init+0x356>
    2398:	88 89       	ldd	r24, Y+16	; 0x10
    239a:	99 89       	ldd	r25, Y+17	; 0x11
    239c:	88 30       	cpi	r24, 0x08	; 8
    239e:	91 05       	cpc	r25, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <Gpt_Init+0x1e8>
    23a2:	8b c0       	rjmp	.+278    	; 0x24ba <Gpt_Init+0x2fe>
    23a4:	28 89       	ldd	r18, Y+16	; 0x10
    23a6:	39 89       	ldd	r19, Y+17	; 0x11
    23a8:	29 30       	cpi	r18, 0x09	; 9
    23aa:	31 05       	cpc	r19, r1
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <Gpt_Init+0x1f4>
    23ae:	9b c0       	rjmp	.+310    	; 0x24e6 <Gpt_Init+0x32a>
    23b0:	b0 c0       	rjmp	.+352    	; 0x2512 <Gpt_Init+0x356>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    23b2:	a3 e5       	ldi	r26, 0x53	; 83
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e3 e5       	ldi	r30, 0x53	; 83
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8e 7f       	andi	r24, 0xFE	; 254
    23be:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    23c0:	a3 e5       	ldi	r26, 0x53	; 83
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e3 e5       	ldi	r30, 0x53	; 83
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	8d 7f       	andi	r24, 0xFD	; 253
    23cc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    23ce:	a3 e5       	ldi	r26, 0x53	; 83
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e3 e5       	ldi	r30, 0x53	; 83
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8b 7f       	andi	r24, 0xFB	; 251
    23da:	8c 93       	st	X, r24
    23dc:	3f c5       	rjmp	.+2686   	; 0x2e5c <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    23de:	a3 e5       	ldi	r26, 0x53	; 83
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e3 e5       	ldi	r30, 0x53	; 83
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	81 60       	ori	r24, 0x01	; 1
    23ea:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    23ec:	a3 e5       	ldi	r26, 0x53	; 83
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e3 e5       	ldi	r30, 0x53	; 83
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	8d 7f       	andi	r24, 0xFD	; 253
    23f8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    23fa:	a3 e5       	ldi	r26, 0x53	; 83
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e3 e5       	ldi	r30, 0x53	; 83
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	8b 7f       	andi	r24, 0xFB	; 251
    2406:	8c 93       	st	X, r24
    2408:	29 c5       	rjmp	.+2642   	; 0x2e5c <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    240a:	a3 e5       	ldi	r26, 0x53	; 83
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e3 e5       	ldi	r30, 0x53	; 83
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	8e 7f       	andi	r24, 0xFE	; 254
    2416:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2418:	a3 e5       	ldi	r26, 0x53	; 83
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e3 e5       	ldi	r30, 0x53	; 83
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	82 60       	ori	r24, 0x02	; 2
    2424:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2426:	a3 e5       	ldi	r26, 0x53	; 83
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e3 e5       	ldi	r30, 0x53	; 83
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8b 7f       	andi	r24, 0xFB	; 251
    2432:	8c 93       	st	X, r24
    2434:	13 c5       	rjmp	.+2598   	; 0x2e5c <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    2436:	a3 e5       	ldi	r26, 0x53	; 83
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e3 e5       	ldi	r30, 0x53	; 83
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	81 60       	ori	r24, 0x01	; 1
    2442:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2444:	a3 e5       	ldi	r26, 0x53	; 83
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e3 e5       	ldi	r30, 0x53	; 83
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	82 60       	ori	r24, 0x02	; 2
    2450:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2452:	a3 e5       	ldi	r26, 0x53	; 83
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e3 e5       	ldi	r30, 0x53	; 83
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8b 7f       	andi	r24, 0xFB	; 251
    245e:	8c 93       	st	X, r24
    2460:	fd c4       	rjmp	.+2554   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2462:	a3 e5       	ldi	r26, 0x53	; 83
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e3 e5       	ldi	r30, 0x53	; 83
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	8e 7f       	andi	r24, 0xFE	; 254
    246e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2470:	a3 e5       	ldi	r26, 0x53	; 83
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e3 e5       	ldi	r30, 0x53	; 83
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8d 7f       	andi	r24, 0xFD	; 253
    247c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    247e:	a3 e5       	ldi	r26, 0x53	; 83
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e3 e5       	ldi	r30, 0x53	; 83
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	84 60       	ori	r24, 0x04	; 4
    248a:	8c 93       	st	X, r24
    248c:	e7 c4       	rjmp	.+2510   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    248e:	a3 e5       	ldi	r26, 0x53	; 83
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e3 e5       	ldi	r30, 0x53	; 83
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	81 60       	ori	r24, 0x01	; 1
    249a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    249c:	a3 e5       	ldi	r26, 0x53	; 83
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e3 e5       	ldi	r30, 0x53	; 83
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	8d 7f       	andi	r24, 0xFD	; 253
    24a8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    24aa:	a3 e5       	ldi	r26, 0x53	; 83
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e3 e5       	ldi	r30, 0x53	; 83
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	84 60       	ori	r24, 0x04	; 4
    24b6:	8c 93       	st	X, r24
    24b8:	d1 c4       	rjmp	.+2466   	; 0x2e5c <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    24ba:	a3 e5       	ldi	r26, 0x53	; 83
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e3 e5       	ldi	r30, 0x53	; 83
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	8e 7f       	andi	r24, 0xFE	; 254
    24c6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    24c8:	a3 e5       	ldi	r26, 0x53	; 83
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e3 e5       	ldi	r30, 0x53	; 83
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	82 60       	ori	r24, 0x02	; 2
    24d4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    24d6:	a3 e5       	ldi	r26, 0x53	; 83
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e3 e5       	ldi	r30, 0x53	; 83
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	84 60       	ori	r24, 0x04	; 4
    24e2:	8c 93       	st	X, r24
    24e4:	bb c4       	rjmp	.+2422   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    24e6:	a3 e5       	ldi	r26, 0x53	; 83
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e3 e5       	ldi	r30, 0x53	; 83
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	81 60       	ori	r24, 0x01	; 1
    24f2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    24f4:	a3 e5       	ldi	r26, 0x53	; 83
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e3 e5       	ldi	r30, 0x53	; 83
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	82 60       	ori	r24, 0x02	; 2
    2500:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2502:	a3 e5       	ldi	r26, 0x53	; 83
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e3 e5       	ldi	r30, 0x53	; 83
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	84 60       	ori	r24, 0x04	; 4
    250e:	8c 93       	st	X, r24
    2510:	a5 c4       	rjmp	.+2378   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2512:	19 82       	std	Y+1, r1	; 0x01
    2514:	a3 c4       	rjmp	.+2374   	; 0x2e5c <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2516:	ea 81       	ldd	r30, Y+2	; 0x02
    2518:	fb 81       	ldd	r31, Y+3	; 0x03
    251a:	81 81       	ldd	r24, Z+1	; 0x01
    251c:	88 23       	and	r24, r24
    251e:	e9 f4       	brne	.+58     	; 0x255a <Gpt_Init+0x39e>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2520:	af e4       	ldi	r26, 0x4F	; 79
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	ef e4       	ldi	r30, 0x4F	; 79
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	8e 7f       	andi	r24, 0xFE	; 254
    252c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    252e:	af e4       	ldi	r26, 0x4F	; 79
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ef e4       	ldi	r30, 0x4F	; 79
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	8d 7f       	andi	r24, 0xFD	; 253
    253a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    253c:	ae e4       	ldi	r26, 0x4E	; 78
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ee e4       	ldi	r30, 0x4E	; 78
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	87 7f       	andi	r24, 0xF7	; 247
    2548:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    254a:	ae e4       	ldi	r26, 0x4E	; 78
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ee e4       	ldi	r30, 0x4E	; 78
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8f 7e       	andi	r24, 0xEF	; 239
    2556:	8c 93       	st	X, r24
    2558:	23 c0       	rjmp	.+70     	; 0x25a0 <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    255a:	ea 81       	ldd	r30, Y+2	; 0x02
    255c:	fb 81       	ldd	r31, Y+3	; 0x03
    255e:	81 81       	ldd	r24, Z+1	; 0x01
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	e9 f4       	brne	.+58     	; 0x259e <Gpt_Init+0x3e2>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2564:	af e4       	ldi	r26, 0x4F	; 79
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	ef e4       	ldi	r30, 0x4F	; 79
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	8e 7f       	andi	r24, 0xFE	; 254
    2570:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2572:	af e4       	ldi	r26, 0x4F	; 79
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ef e4       	ldi	r30, 0x4F	; 79
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8d 7f       	andi	r24, 0xFD	; 253
    257e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    2580:	ae e4       	ldi	r26, 0x4E	; 78
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	ee e4       	ldi	r30, 0x4E	; 78
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	88 60       	ori	r24, 0x08	; 8
    258c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    258e:	ae e4       	ldi	r26, 0x4E	; 78
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	ee e4       	ldi	r30, 0x4E	; 78
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	8f 7e       	andi	r24, 0xEF	; 239
    259a:	8c 93       	st	X, r24
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    259e:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    25a0:	ea 81       	ldd	r30, Y+2	; 0x02
    25a2:	fb 81       	ldd	r31, Y+3	; 0x03
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	3f 87       	std	Y+15, r19	; 0x0f
    25ac:	2e 87       	std	Y+14, r18	; 0x0e
    25ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b2:	81 30       	cpi	r24, 0x01	; 1
    25b4:	91 05       	cpc	r25, r1
    25b6:	21 f1       	breq	.+72     	; 0x2600 <Gpt_Init+0x444>
    25b8:	2e 85       	ldd	r18, Y+14	; 0x0e
    25ba:	3f 85       	ldd	r19, Y+15	; 0x0f
    25bc:	22 30       	cpi	r18, 0x02	; 2
    25be:	31 05       	cpc	r19, r1
    25c0:	2c f4       	brge	.+10     	; 0x25cc <Gpt_Init+0x410>
    25c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	61 f0       	breq	.+24     	; 0x25e2 <Gpt_Init+0x426>
    25ca:	47 c0       	rjmp	.+142    	; 0x265a <Gpt_Init+0x49e>
    25cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    25ce:	3f 85       	ldd	r19, Y+15	; 0x0f
    25d0:	22 30       	cpi	r18, 0x02	; 2
    25d2:	31 05       	cpc	r19, r1
    25d4:	21 f1       	breq	.+72     	; 0x261e <Gpt_Init+0x462>
    25d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	91 05       	cpc	r25, r1
    25de:	71 f1       	breq	.+92     	; 0x263c <Gpt_Init+0x480>
    25e0:	3c c0       	rjmp	.+120    	; 0x265a <Gpt_Init+0x49e>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    25e2:	af e4       	ldi	r26, 0x4F	; 79
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	ef e4       	ldi	r30, 0x4F	; 79
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	8f 7b       	andi	r24, 0xBF	; 191
    25ee:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    25f0:	af e4       	ldi	r26, 0x4F	; 79
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	ef e4       	ldi	r30, 0x4F	; 79
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8f 77       	andi	r24, 0x7F	; 127
    25fc:	8c 93       	st	X, r24
    25fe:	2e c0       	rjmp	.+92     	; 0x265c <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2600:	af e4       	ldi	r26, 0x4F	; 79
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	ef e4       	ldi	r30, 0x4F	; 79
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	80 64       	ori	r24, 0x40	; 64
    260c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    260e:	af e4       	ldi	r26, 0x4F	; 79
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	ef e4       	ldi	r30, 0x4F	; 79
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	8f 77       	andi	r24, 0x7F	; 127
    261a:	8c 93       	st	X, r24
    261c:	1f c0       	rjmp	.+62     	; 0x265c <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    261e:	af e4       	ldi	r26, 0x4F	; 79
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	ef e4       	ldi	r30, 0x4F	; 79
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	80 64       	ori	r24, 0x40	; 64
    262a:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    262c:	af e4       	ldi	r26, 0x4F	; 79
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	ef e4       	ldi	r30, 0x4F	; 79
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	80 68       	ori	r24, 0x80	; 128
    2638:	8c 93       	st	X, r24
    263a:	10 c0       	rjmp	.+32     	; 0x265c <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    263c:	af e4       	ldi	r26, 0x4F	; 79
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	ef e4       	ldi	r30, 0x4F	; 79
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	8f 7b       	andi	r24, 0xBF	; 191
    2648:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    264a:	af e4       	ldi	r26, 0x4F	; 79
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	ef e4       	ldi	r30, 0x4F	; 79
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	80 68       	ori	r24, 0x80	; 128
    2656:	8c 93       	st	X, r24
    2658:	01 c0       	rjmp	.+2      	; 0x265c <Gpt_Init+0x4a0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    265a:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    265c:	ea 81       	ldd	r30, Y+2	; 0x02
    265e:	fb 81       	ldd	r31, Y+3	; 0x03
    2660:	83 81       	ldd	r24, Z+3	; 0x03
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	3d 87       	std	Y+13, r19	; 0x0d
    2668:	2c 87       	std	Y+12, r18	; 0x0c
    266a:	8c 85       	ldd	r24, Y+12	; 0x0c
    266c:	9d 85       	ldd	r25, Y+13	; 0x0d
    266e:	84 30       	cpi	r24, 0x04	; 4
    2670:	91 05       	cpc	r25, r1
    2672:	09 f4       	brne	.+2      	; 0x2676 <Gpt_Init+0x4ba>
    2674:	77 c0       	rjmp	.+238    	; 0x2764 <Gpt_Init+0x5a8>
    2676:	2c 85       	ldd	r18, Y+12	; 0x0c
    2678:	3d 85       	ldd	r19, Y+13	; 0x0d
    267a:	25 30       	cpi	r18, 0x05	; 5
    267c:	31 05       	cpc	r19, r1
    267e:	8c f4       	brge	.+34     	; 0x26a2 <Gpt_Init+0x4e6>
    2680:	8c 85       	ldd	r24, Y+12	; 0x0c
    2682:	9d 85       	ldd	r25, Y+13	; 0x0d
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	91 05       	cpc	r25, r1
    2688:	09 f4       	brne	.+2      	; 0x268c <Gpt_Init+0x4d0>
    268a:	40 c0       	rjmp	.+128    	; 0x270c <Gpt_Init+0x550>
    268c:	2c 85       	ldd	r18, Y+12	; 0x0c
    268e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	31 05       	cpc	r19, r1
    2694:	09 f4       	brne	.+2      	; 0x2698 <Gpt_Init+0x4dc>
    2696:	50 c0       	rjmp	.+160    	; 0x2738 <Gpt_Init+0x57c>
    2698:	8c 85       	ldd	r24, Y+12	; 0x0c
    269a:	9d 85       	ldd	r25, Y+13	; 0x0d
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	01 f1       	breq	.+64     	; 0x26e0 <Gpt_Init+0x524>
    26a0:	cf c0       	rjmp	.+414    	; 0x2840 <Gpt_Init+0x684>
    26a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    26a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    26a6:	27 30       	cpi	r18, 0x07	; 7
    26a8:	31 05       	cpc	r19, r1
    26aa:	09 f4       	brne	.+2      	; 0x26ae <Gpt_Init+0x4f2>
    26ac:	87 c0       	rjmp	.+270    	; 0x27bc <Gpt_Init+0x600>
    26ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    26b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    26b2:	88 30       	cpi	r24, 0x08	; 8
    26b4:	91 05       	cpc	r25, r1
    26b6:	3c f4       	brge	.+14     	; 0x26c6 <Gpt_Init+0x50a>
    26b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    26bc:	26 30       	cpi	r18, 0x06	; 6
    26be:	31 05       	cpc	r19, r1
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <Gpt_Init+0x508>
    26c2:	66 c0       	rjmp	.+204    	; 0x2790 <Gpt_Init+0x5d4>
    26c4:	bd c0       	rjmp	.+378    	; 0x2840 <Gpt_Init+0x684>
    26c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    26c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    26ca:	88 30       	cpi	r24, 0x08	; 8
    26cc:	91 05       	cpc	r25, r1
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <Gpt_Init+0x516>
    26d0:	8b c0       	rjmp	.+278    	; 0x27e8 <Gpt_Init+0x62c>
    26d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    26d4:	3d 85       	ldd	r19, Y+13	; 0x0d
    26d6:	29 30       	cpi	r18, 0x09	; 9
    26d8:	31 05       	cpc	r19, r1
    26da:	09 f4       	brne	.+2      	; 0x26de <Gpt_Init+0x522>
    26dc:	9b c0       	rjmp	.+310    	; 0x2814 <Gpt_Init+0x658>
    26de:	b0 c0       	rjmp	.+352    	; 0x2840 <Gpt_Init+0x684>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    26e0:	ae e4       	ldi	r26, 0x4E	; 78
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	ee e4       	ldi	r30, 0x4E	; 78
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	8e 7f       	andi	r24, 0xFE	; 254
    26ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    26ee:	ae e4       	ldi	r26, 0x4E	; 78
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	ee e4       	ldi	r30, 0x4E	; 78
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	8d 7f       	andi	r24, 0xFD	; 253
    26fa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    26fc:	ae e4       	ldi	r26, 0x4E	; 78
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	ee e4       	ldi	r30, 0x4E	; 78
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	8b 7f       	andi	r24, 0xFB	; 251
    2708:	8c 93       	st	X, r24
    270a:	a8 c3       	rjmp	.+1872   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    270c:	ae e4       	ldi	r26, 0x4E	; 78
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	ee e4       	ldi	r30, 0x4E	; 78
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	81 60       	ori	r24, 0x01	; 1
    2718:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    271a:	ae e4       	ldi	r26, 0x4E	; 78
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	ee e4       	ldi	r30, 0x4E	; 78
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8d 7f       	andi	r24, 0xFD	; 253
    2726:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2728:	ae e4       	ldi	r26, 0x4E	; 78
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	ee e4       	ldi	r30, 0x4E	; 78
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8b 7f       	andi	r24, 0xFB	; 251
    2734:	8c 93       	st	X, r24
    2736:	92 c3       	rjmp	.+1828   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2738:	ae e4       	ldi	r26, 0x4E	; 78
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	ee e4       	ldi	r30, 0x4E	; 78
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	8e 7f       	andi	r24, 0xFE	; 254
    2744:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2746:	ae e4       	ldi	r26, 0x4E	; 78
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	ee e4       	ldi	r30, 0x4E	; 78
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	82 60       	ori	r24, 0x02	; 2
    2752:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2754:	ae e4       	ldi	r26, 0x4E	; 78
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	ee e4       	ldi	r30, 0x4E	; 78
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	8b 7f       	andi	r24, 0xFB	; 251
    2760:	8c 93       	st	X, r24
    2762:	7c c3       	rjmp	.+1784   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2764:	ae e4       	ldi	r26, 0x4E	; 78
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	ee e4       	ldi	r30, 0x4E	; 78
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	81 60       	ori	r24, 0x01	; 1
    2770:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2772:	ae e4       	ldi	r26, 0x4E	; 78
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ee e4       	ldi	r30, 0x4E	; 78
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	82 60       	ori	r24, 0x02	; 2
    277e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2780:	ae e4       	ldi	r26, 0x4E	; 78
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	ee e4       	ldi	r30, 0x4E	; 78
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	8b 7f       	andi	r24, 0xFB	; 251
    278c:	8c 93       	st	X, r24
    278e:	66 c3       	rjmp	.+1740   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2790:	ae e4       	ldi	r26, 0x4E	; 78
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ee e4       	ldi	r30, 0x4E	; 78
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	8e 7f       	andi	r24, 0xFE	; 254
    279c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    279e:	ae e4       	ldi	r26, 0x4E	; 78
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	ee e4       	ldi	r30, 0x4E	; 78
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	8d 7f       	andi	r24, 0xFD	; 253
    27aa:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    27ac:	ae e4       	ldi	r26, 0x4E	; 78
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ee e4       	ldi	r30, 0x4E	; 78
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	84 60       	ori	r24, 0x04	; 4
    27b8:	8c 93       	st	X, r24
    27ba:	50 c3       	rjmp	.+1696   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    27bc:	ae e4       	ldi	r26, 0x4E	; 78
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ee e4       	ldi	r30, 0x4E	; 78
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	81 60       	ori	r24, 0x01	; 1
    27c8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    27ca:	ae e4       	ldi	r26, 0x4E	; 78
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	ee e4       	ldi	r30, 0x4E	; 78
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	8d 7f       	andi	r24, 0xFD	; 253
    27d6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    27d8:	ae e4       	ldi	r26, 0x4E	; 78
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ee e4       	ldi	r30, 0x4E	; 78
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	84 60       	ori	r24, 0x04	; 4
    27e4:	8c 93       	st	X, r24
    27e6:	3a c3       	rjmp	.+1652   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    27e8:	ae e4       	ldi	r26, 0x4E	; 78
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ee e4       	ldi	r30, 0x4E	; 78
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	8e 7f       	andi	r24, 0xFE	; 254
    27f4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    27f6:	ae e4       	ldi	r26, 0x4E	; 78
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	ee e4       	ldi	r30, 0x4E	; 78
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	82 60       	ori	r24, 0x02	; 2
    2802:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2804:	ae e4       	ldi	r26, 0x4E	; 78
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	ee e4       	ldi	r30, 0x4E	; 78
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	84 60       	ori	r24, 0x04	; 4
    2810:	8c 93       	st	X, r24
    2812:	24 c3       	rjmp	.+1608   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2814:	ae e4       	ldi	r26, 0x4E	; 78
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ee e4       	ldi	r30, 0x4E	; 78
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	81 60       	ori	r24, 0x01	; 1
    2820:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2822:	ae e4       	ldi	r26, 0x4E	; 78
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	ee e4       	ldi	r30, 0x4E	; 78
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	82 60       	ori	r24, 0x02	; 2
    282e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2830:	ae e4       	ldi	r26, 0x4E	; 78
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	ee e4       	ldi	r30, 0x4E	; 78
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	84 60       	ori	r24, 0x04	; 4
    283c:	8c 93       	st	X, r24
    283e:	0e c3       	rjmp	.+1564   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2840:	19 82       	std	Y+1, r1	; 0x01
    2842:	0c c3       	rjmp	.+1560   	; 0x2e5c <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2844:	ea 81       	ldd	r30, Y+2	; 0x02
    2846:	fb 81       	ldd	r31, Y+3	; 0x03
    2848:	81 81       	ldd	r24, Z+1	; 0x01
    284a:	88 23       	and	r24, r24
    284c:	e9 f4       	brne	.+58     	; 0x2888 <Gpt_Init+0x6cc>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    284e:	af e4       	ldi	r26, 0x4F	; 79
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	ef e4       	ldi	r30, 0x4F	; 79
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	8e 7f       	andi	r24, 0xFE	; 254
    285a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    285c:	af e4       	ldi	r26, 0x4F	; 79
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	ef e4       	ldi	r30, 0x4F	; 79
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	8d 7f       	andi	r24, 0xFD	; 253
    2868:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    286a:	ae e4       	ldi	r26, 0x4E	; 78
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	ee e4       	ldi	r30, 0x4E	; 78
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	87 7f       	andi	r24, 0xF7	; 247
    2876:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2878:	ae e4       	ldi	r26, 0x4E	; 78
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	ee e4       	ldi	r30, 0x4E	; 78
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	8f 7e       	andi	r24, 0xEF	; 239
    2884:	8c 93       	st	X, r24
    2886:	23 c0       	rjmp	.+70     	; 0x28ce <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2888:	ea 81       	ldd	r30, Y+2	; 0x02
    288a:	fb 81       	ldd	r31, Y+3	; 0x03
    288c:	81 81       	ldd	r24, Z+1	; 0x01
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	e9 f4       	brne	.+58     	; 0x28cc <Gpt_Init+0x710>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2892:	af e4       	ldi	r26, 0x4F	; 79
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	ef e4       	ldi	r30, 0x4F	; 79
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	8e 7f       	andi	r24, 0xFE	; 254
    289e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    28a0:	af e4       	ldi	r26, 0x4F	; 79
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	ef e4       	ldi	r30, 0x4F	; 79
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	8d 7f       	andi	r24, 0xFD	; 253
    28ac:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    28ae:	ae e4       	ldi	r26, 0x4E	; 78
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	ee e4       	ldi	r30, 0x4E	; 78
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	88 60       	ori	r24, 0x08	; 8
    28ba:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    28bc:	ae e4       	ldi	r26, 0x4E	; 78
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	ee e4       	ldi	r30, 0x4E	; 78
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	8f 7e       	andi	r24, 0xEF	; 239
    28c8:	8c 93       	st	X, r24
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    28cc:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    28ce:	ea 81       	ldd	r30, Y+2	; 0x02
    28d0:	fb 81       	ldd	r31, Y+3	; 0x03
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	3b 87       	std	Y+11, r19	; 0x0b
    28da:	2a 87       	std	Y+10, r18	; 0x0a
    28dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28de:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	91 05       	cpc	r25, r1
    28e4:	21 f1       	breq	.+72     	; 0x292e <Gpt_Init+0x772>
    28e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    28e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    28ea:	22 30       	cpi	r18, 0x02	; 2
    28ec:	31 05       	cpc	r19, r1
    28ee:	2c f4       	brge	.+10     	; 0x28fa <Gpt_Init+0x73e>
    28f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	61 f0       	breq	.+24     	; 0x2910 <Gpt_Init+0x754>
    28f8:	47 c0       	rjmp	.+142    	; 0x2988 <Gpt_Init+0x7cc>
    28fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    28fc:	3b 85       	ldd	r19, Y+11	; 0x0b
    28fe:	22 30       	cpi	r18, 0x02	; 2
    2900:	31 05       	cpc	r19, r1
    2902:	21 f1       	breq	.+72     	; 0x294c <Gpt_Init+0x790>
    2904:	8a 85       	ldd	r24, Y+10	; 0x0a
    2906:	9b 85       	ldd	r25, Y+11	; 0x0b
    2908:	83 30       	cpi	r24, 0x03	; 3
    290a:	91 05       	cpc	r25, r1
    290c:	71 f1       	breq	.+92     	; 0x296a <Gpt_Init+0x7ae>
    290e:	3c c0       	rjmp	.+120    	; 0x2988 <Gpt_Init+0x7cc>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2910:	af e4       	ldi	r26, 0x4F	; 79
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	ef e4       	ldi	r30, 0x4F	; 79
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8f 7e       	andi	r24, 0xEF	; 239
    291c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    291e:	af e4       	ldi	r26, 0x4F	; 79
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	ef e4       	ldi	r30, 0x4F	; 79
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	8f 7d       	andi	r24, 0xDF	; 223
    292a:	8c 93       	st	X, r24
    292c:	2e c0       	rjmp	.+92     	; 0x298a <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    292e:	af e4       	ldi	r26, 0x4F	; 79
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	ef e4       	ldi	r30, 0x4F	; 79
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	80 61       	ori	r24, 0x10	; 16
    293a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    293c:	af e4       	ldi	r26, 0x4F	; 79
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	ef e4       	ldi	r30, 0x4F	; 79
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	8f 7d       	andi	r24, 0xDF	; 223
    2948:	8c 93       	st	X, r24
    294a:	1f c0       	rjmp	.+62     	; 0x298a <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    294c:	af e4       	ldi	r26, 0x4F	; 79
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	ef e4       	ldi	r30, 0x4F	; 79
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	80 61       	ori	r24, 0x10	; 16
    2958:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    295a:	af e4       	ldi	r26, 0x4F	; 79
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	ef e4       	ldi	r30, 0x4F	; 79
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	80 62       	ori	r24, 0x20	; 32
    2966:	8c 93       	st	X, r24
    2968:	10 c0       	rjmp	.+32     	; 0x298a <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    296a:	af e4       	ldi	r26, 0x4F	; 79
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	ef e4       	ldi	r30, 0x4F	; 79
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	8f 7e       	andi	r24, 0xEF	; 239
    2976:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2978:	af e4       	ldi	r26, 0x4F	; 79
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	ef e4       	ldi	r30, 0x4F	; 79
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	80 62       	ori	r24, 0x20	; 32
    2984:	8c 93       	st	X, r24
    2986:	01 c0       	rjmp	.+2      	; 0x298a <Gpt_Init+0x7ce>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2988:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    298a:	ea 81       	ldd	r30, Y+2	; 0x02
    298c:	fb 81       	ldd	r31, Y+3	; 0x03
    298e:	83 81       	ldd	r24, Z+3	; 0x03
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	39 87       	std	Y+9, r19	; 0x09
    2996:	28 87       	std	Y+8, r18	; 0x08
    2998:	88 85       	ldd	r24, Y+8	; 0x08
    299a:	99 85       	ldd	r25, Y+9	; 0x09
    299c:	84 30       	cpi	r24, 0x04	; 4
    299e:	91 05       	cpc	r25, r1
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <Gpt_Init+0x7e8>
    29a2:	77 c0       	rjmp	.+238    	; 0x2a92 <Gpt_Init+0x8d6>
    29a4:	28 85       	ldd	r18, Y+8	; 0x08
    29a6:	39 85       	ldd	r19, Y+9	; 0x09
    29a8:	25 30       	cpi	r18, 0x05	; 5
    29aa:	31 05       	cpc	r19, r1
    29ac:	8c f4       	brge	.+34     	; 0x29d0 <Gpt_Init+0x814>
    29ae:	88 85       	ldd	r24, Y+8	; 0x08
    29b0:	99 85       	ldd	r25, Y+9	; 0x09
    29b2:	81 30       	cpi	r24, 0x01	; 1
    29b4:	91 05       	cpc	r25, r1
    29b6:	09 f4       	brne	.+2      	; 0x29ba <Gpt_Init+0x7fe>
    29b8:	40 c0       	rjmp	.+128    	; 0x2a3a <Gpt_Init+0x87e>
    29ba:	28 85       	ldd	r18, Y+8	; 0x08
    29bc:	39 85       	ldd	r19, Y+9	; 0x09
    29be:	22 30       	cpi	r18, 0x02	; 2
    29c0:	31 05       	cpc	r19, r1
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <Gpt_Init+0x80a>
    29c4:	50 c0       	rjmp	.+160    	; 0x2a66 <Gpt_Init+0x8aa>
    29c6:	88 85       	ldd	r24, Y+8	; 0x08
    29c8:	99 85       	ldd	r25, Y+9	; 0x09
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	01 f1       	breq	.+64     	; 0x2a0e <Gpt_Init+0x852>
    29ce:	cf c0       	rjmp	.+414    	; 0x2b6e <Gpt_Init+0x9b2>
    29d0:	28 85       	ldd	r18, Y+8	; 0x08
    29d2:	39 85       	ldd	r19, Y+9	; 0x09
    29d4:	27 30       	cpi	r18, 0x07	; 7
    29d6:	31 05       	cpc	r19, r1
    29d8:	09 f4       	brne	.+2      	; 0x29dc <Gpt_Init+0x820>
    29da:	87 c0       	rjmp	.+270    	; 0x2aea <Gpt_Init+0x92e>
    29dc:	88 85       	ldd	r24, Y+8	; 0x08
    29de:	99 85       	ldd	r25, Y+9	; 0x09
    29e0:	88 30       	cpi	r24, 0x08	; 8
    29e2:	91 05       	cpc	r25, r1
    29e4:	3c f4       	brge	.+14     	; 0x29f4 <Gpt_Init+0x838>
    29e6:	28 85       	ldd	r18, Y+8	; 0x08
    29e8:	39 85       	ldd	r19, Y+9	; 0x09
    29ea:	26 30       	cpi	r18, 0x06	; 6
    29ec:	31 05       	cpc	r19, r1
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <Gpt_Init+0x836>
    29f0:	66 c0       	rjmp	.+204    	; 0x2abe <Gpt_Init+0x902>
    29f2:	bd c0       	rjmp	.+378    	; 0x2b6e <Gpt_Init+0x9b2>
    29f4:	88 85       	ldd	r24, Y+8	; 0x08
    29f6:	99 85       	ldd	r25, Y+9	; 0x09
    29f8:	88 30       	cpi	r24, 0x08	; 8
    29fa:	91 05       	cpc	r25, r1
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <Gpt_Init+0x844>
    29fe:	8b c0       	rjmp	.+278    	; 0x2b16 <Gpt_Init+0x95a>
    2a00:	28 85       	ldd	r18, Y+8	; 0x08
    2a02:	39 85       	ldd	r19, Y+9	; 0x09
    2a04:	29 30       	cpi	r18, 0x09	; 9
    2a06:	31 05       	cpc	r19, r1
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <Gpt_Init+0x850>
    2a0a:	9b c0       	rjmp	.+310    	; 0x2b42 <Gpt_Init+0x986>
    2a0c:	b0 c0       	rjmp	.+352    	; 0x2b6e <Gpt_Init+0x9b2>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2a0e:	ae e4       	ldi	r26, 0x4E	; 78
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ee e4       	ldi	r30, 0x4E	; 78
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	8e 7f       	andi	r24, 0xFE	; 254
    2a1a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2a1c:	ae e4       	ldi	r26, 0x4E	; 78
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	ee e4       	ldi	r30, 0x4E	; 78
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	8d 7f       	andi	r24, 0xFD	; 253
    2a28:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2a2a:	ae e4       	ldi	r26, 0x4E	; 78
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	ee e4       	ldi	r30, 0x4E	; 78
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	8b 7f       	andi	r24, 0xFB	; 251
    2a36:	8c 93       	st	X, r24
    2a38:	11 c2       	rjmp	.+1058   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2a3a:	ae e4       	ldi	r26, 0x4E	; 78
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	ee e4       	ldi	r30, 0x4E	; 78
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	81 60       	ori	r24, 0x01	; 1
    2a46:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2a48:	ae e4       	ldi	r26, 0x4E	; 78
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	ee e4       	ldi	r30, 0x4E	; 78
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	8d 7f       	andi	r24, 0xFD	; 253
    2a54:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2a56:	ae e4       	ldi	r26, 0x4E	; 78
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	ee e4       	ldi	r30, 0x4E	; 78
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	8b 7f       	andi	r24, 0xFB	; 251
    2a62:	8c 93       	st	X, r24
    2a64:	fb c1       	rjmp	.+1014   	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2a66:	ae e4       	ldi	r26, 0x4E	; 78
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	ee e4       	ldi	r30, 0x4E	; 78
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	8e 7f       	andi	r24, 0xFE	; 254
    2a72:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2a74:	ae e4       	ldi	r26, 0x4E	; 78
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	ee e4       	ldi	r30, 0x4E	; 78
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	82 60       	ori	r24, 0x02	; 2
    2a80:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2a82:	ae e4       	ldi	r26, 0x4E	; 78
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	ee e4       	ldi	r30, 0x4E	; 78
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	8b 7f       	andi	r24, 0xFB	; 251
    2a8e:	8c 93       	st	X, r24
    2a90:	e5 c1       	rjmp	.+970    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2a92:	ae e4       	ldi	r26, 0x4E	; 78
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	ee e4       	ldi	r30, 0x4E	; 78
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	81 60       	ori	r24, 0x01	; 1
    2a9e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2aa0:	ae e4       	ldi	r26, 0x4E	; 78
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	ee e4       	ldi	r30, 0x4E	; 78
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	82 60       	ori	r24, 0x02	; 2
    2aac:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2aae:	ae e4       	ldi	r26, 0x4E	; 78
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	ee e4       	ldi	r30, 0x4E	; 78
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8b 7f       	andi	r24, 0xFB	; 251
    2aba:	8c 93       	st	X, r24
    2abc:	cf c1       	rjmp	.+926    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2abe:	ae e4       	ldi	r26, 0x4E	; 78
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	ee e4       	ldi	r30, 0x4E	; 78
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8e 7f       	andi	r24, 0xFE	; 254
    2aca:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2acc:	ae e4       	ldi	r26, 0x4E	; 78
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	ee e4       	ldi	r30, 0x4E	; 78
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	8d 7f       	andi	r24, 0xFD	; 253
    2ad8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2ada:	ae e4       	ldi	r26, 0x4E	; 78
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	ee e4       	ldi	r30, 0x4E	; 78
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	84 60       	ori	r24, 0x04	; 4
    2ae6:	8c 93       	st	X, r24
    2ae8:	b9 c1       	rjmp	.+882    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2aea:	ae e4       	ldi	r26, 0x4E	; 78
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	ee e4       	ldi	r30, 0x4E	; 78
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	81 60       	ori	r24, 0x01	; 1
    2af6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2af8:	ae e4       	ldi	r26, 0x4E	; 78
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	ee e4       	ldi	r30, 0x4E	; 78
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	8d 7f       	andi	r24, 0xFD	; 253
    2b04:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2b06:	ae e4       	ldi	r26, 0x4E	; 78
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	ee e4       	ldi	r30, 0x4E	; 78
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	84 60       	ori	r24, 0x04	; 4
    2b12:	8c 93       	st	X, r24
    2b14:	a3 c1       	rjmp	.+838    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2b16:	ae e4       	ldi	r26, 0x4E	; 78
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	ee e4       	ldi	r30, 0x4E	; 78
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	8e 7f       	andi	r24, 0xFE	; 254
    2b22:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2b24:	ae e4       	ldi	r26, 0x4E	; 78
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	ee e4       	ldi	r30, 0x4E	; 78
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	82 60       	ori	r24, 0x02	; 2
    2b30:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2b32:	ae e4       	ldi	r26, 0x4E	; 78
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	ee e4       	ldi	r30, 0x4E	; 78
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	84 60       	ori	r24, 0x04	; 4
    2b3e:	8c 93       	st	X, r24
    2b40:	8d c1       	rjmp	.+794    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2b42:	ae e4       	ldi	r26, 0x4E	; 78
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	ee e4       	ldi	r30, 0x4E	; 78
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	81 60       	ori	r24, 0x01	; 1
    2b4e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2b50:	ae e4       	ldi	r26, 0x4E	; 78
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	ee e4       	ldi	r30, 0x4E	; 78
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	82 60       	ori	r24, 0x02	; 2
    2b5c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2b5e:	ae e4       	ldi	r26, 0x4E	; 78
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	ee e4       	ldi	r30, 0x4E	; 78
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	84 60       	ori	r24, 0x04	; 4
    2b6a:	8c 93       	st	X, r24
    2b6c:	77 c1       	rjmp	.+750    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2b6e:	19 82       	std	Y+1, r1	; 0x01
    2b70:	75 c1       	rjmp	.+746    	; 0x2e5c <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER2:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2b72:	ea 81       	ldd	r30, Y+2	; 0x02
    2b74:	fb 81       	ldd	r31, Y+3	; 0x03
    2b76:	81 81       	ldd	r24, Z+1	; 0x01
    2b78:	88 23       	and	r24, r24
    2b7a:	79 f4       	brne	.+30     	; 0x2b9a <Gpt_Init+0x9de>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    2b7c:	a5 e4       	ldi	r26, 0x45	; 69
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e5 e4       	ldi	r30, 0x45	; 69
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 7e       	andi	r24, 0xEF	; 239
    2b88:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2b8a:	a5 e4       	ldi	r26, 0x45	; 69
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	e5 e4       	ldi	r30, 0x45	; 69
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	8f 7d       	andi	r24, 0xDF	; 223
    2b96:	8c 93       	st	X, r24
    2b98:	15 c0       	rjmp	.+42     	; 0x2bc4 <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2b9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b9e:	81 81       	ldd	r24, Z+1	; 0x01
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	79 f4       	brne	.+30     	; 0x2bc2 <Gpt_Init+0xa06>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    2ba4:	a5 e4       	ldi	r26, 0x45	; 69
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e5 e4       	ldi	r30, 0x45	; 69
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	8f 7e       	andi	r24, 0xEF	; 239
    2bb0:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2bb2:	a5 e4       	ldi	r26, 0x45	; 69
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e5 e4       	ldi	r30, 0x45	; 69
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	80 62       	ori	r24, 0x20	; 32
    2bbe:	8c 93       	st	X, r24
    2bc0:	01 c0       	rjmp	.+2      	; 0x2bc4 <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2bc2:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2bc4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bc6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc8:	82 81       	ldd	r24, Z+2	; 0x02
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	3f 83       	std	Y+7, r19	; 0x07
    2bd0:	2e 83       	std	Y+6, r18	; 0x06
    2bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bd6:	81 30       	cpi	r24, 0x01	; 1
    2bd8:	91 05       	cpc	r25, r1
    2bda:	21 f1       	breq	.+72     	; 0x2c24 <Gpt_Init+0xa68>
    2bdc:	2e 81       	ldd	r18, Y+6	; 0x06
    2bde:	3f 81       	ldd	r19, Y+7	; 0x07
    2be0:	22 30       	cpi	r18, 0x02	; 2
    2be2:	31 05       	cpc	r19, r1
    2be4:	2c f4       	brge	.+10     	; 0x2bf0 <Gpt_Init+0xa34>
    2be6:	8e 81       	ldd	r24, Y+6	; 0x06
    2be8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	61 f0       	breq	.+24     	; 0x2c06 <Gpt_Init+0xa4a>
    2bee:	47 c0       	rjmp	.+142    	; 0x2c7e <Gpt_Init+0xac2>
    2bf0:	2e 81       	ldd	r18, Y+6	; 0x06
    2bf2:	3f 81       	ldd	r19, Y+7	; 0x07
    2bf4:	22 30       	cpi	r18, 0x02	; 2
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	21 f1       	breq	.+72     	; 0x2c42 <Gpt_Init+0xa86>
    2bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfe:	83 30       	cpi	r24, 0x03	; 3
    2c00:	91 05       	cpc	r25, r1
    2c02:	71 f1       	breq	.+92     	; 0x2c60 <Gpt_Init+0xaa4>
    2c04:	3c c0       	rjmp	.+120    	; 0x2c7e <Gpt_Init+0xac2>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR2,TCCR2_COM20);
    2c06:	a5 e4       	ldi	r26, 0x45	; 69
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e5 e4       	ldi	r30, 0x45	; 69
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	8f 7e       	andi	r24, 0xEF	; 239
    2c12:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2c14:	a5 e4       	ldi	r26, 0x45	; 69
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e5 e4       	ldi	r30, 0x45	; 69
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	8f 7d       	andi	r24, 0xDF	; 223
    2c20:	8c 93       	st	X, r24
    2c22:	2e c0       	rjmp	.+92     	; 0x2c80 <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR2,TCCR2_COM20);
    2c24:	a5 e4       	ldi	r26, 0x45	; 69
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e5 e4       	ldi	r30, 0x45	; 69
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	80 61       	ori	r24, 0x10	; 16
    2c30:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2c32:	a5 e4       	ldi	r26, 0x45	; 69
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e5 e4       	ldi	r30, 0x45	; 69
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	8f 7d       	andi	r24, 0xDF	; 223
    2c3e:	8c 93       	st	X, r24
    2c40:	1f c0       	rjmp	.+62     	; 0x2c80 <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR2,TCCR2_COM20);
    2c42:	a5 e4       	ldi	r26, 0x45	; 69
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e5 e4       	ldi	r30, 0x45	; 69
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	80 61       	ori	r24, 0x10	; 16
    2c4e:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2c50:	a5 e4       	ldi	r26, 0x45	; 69
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e5 e4       	ldi	r30, 0x45	; 69
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	80 62       	ori	r24, 0x20	; 32
    2c5c:	8c 93       	st	X, r24
    2c5e:	10 c0       	rjmp	.+32     	; 0x2c80 <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR2,TCCR2_COM20);
    2c60:	a5 e4       	ldi	r26, 0x45	; 69
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e5 e4       	ldi	r30, 0x45	; 69
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	8f 7e       	andi	r24, 0xEF	; 239
    2c6c:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2c6e:	a5 e4       	ldi	r26, 0x45	; 69
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e5 e4       	ldi	r30, 0x45	; 69
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	80 62       	ori	r24, 0x20	; 32
    2c7a:	8c 93       	st	X, r24
    2c7c:	01 c0       	rjmp	.+2      	; 0x2c80 <Gpt_Init+0xac4>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2c7e:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2c80:	ea 81       	ldd	r30, Y+2	; 0x02
    2c82:	fb 81       	ldd	r31, Y+3	; 0x03
    2c84:	83 81       	ldd	r24, Z+3	; 0x03
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	3d 83       	std	Y+5, r19	; 0x05
    2c8c:	2c 83       	std	Y+4, r18	; 0x04
    2c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c90:	9d 81       	ldd	r25, Y+5	; 0x05
    2c92:	83 30       	cpi	r24, 0x03	; 3
    2c94:	91 05       	cpc	r25, r1
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <Gpt_Init+0xade>
    2c98:	70 c0       	rjmp	.+224    	; 0x2d7a <Gpt_Init+0xbbe>
    2c9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c9e:	24 30       	cpi	r18, 0x04	; 4
    2ca0:	31 05       	cpc	r19, r1
    2ca2:	84 f4       	brge	.+32     	; 0x2cc4 <Gpt_Init+0xb08>
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca8:	81 30       	cpi	r24, 0x01	; 1
    2caa:	91 05       	cpc	r25, r1
    2cac:	d1 f1       	breq	.+116    	; 0x2d22 <Gpt_Init+0xb66>
    2cae:	2c 81       	ldd	r18, Y+4	; 0x04
    2cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cb2:	22 30       	cpi	r18, 0x02	; 2
    2cb4:	31 05       	cpc	r19, r1
    2cb6:	0c f0       	brlt	.+2      	; 0x2cba <Gpt_Init+0xafe>
    2cb8:	4a c0       	rjmp	.+148    	; 0x2d4e <Gpt_Init+0xb92>
    2cba:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	d1 f0       	breq	.+52     	; 0x2cf6 <Gpt_Init+0xb3a>
    2cc2:	c9 c0       	rjmp	.+402    	; 0x2e56 <Gpt_Init+0xc9a>
    2cc4:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc8:	25 30       	cpi	r18, 0x05	; 5
    2cca:	31 05       	cpc	r19, r1
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <Gpt_Init+0xb14>
    2cce:	81 c0       	rjmp	.+258    	; 0x2dd2 <Gpt_Init+0xc16>
    2cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd4:	85 30       	cpi	r24, 0x05	; 5
    2cd6:	91 05       	cpc	r25, r1
    2cd8:	0c f4       	brge	.+2      	; 0x2cdc <Gpt_Init+0xb20>
    2cda:	65 c0       	rjmp	.+202    	; 0x2da6 <Gpt_Init+0xbea>
    2cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cde:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce0:	26 30       	cpi	r18, 0x06	; 6
    2ce2:	31 05       	cpc	r19, r1
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <Gpt_Init+0xb2c>
    2ce6:	8b c0       	rjmp	.+278    	; 0x2dfe <Gpt_Init+0xc42>
    2ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cea:	9d 81       	ldd	r25, Y+5	; 0x05
    2cec:	87 30       	cpi	r24, 0x07	; 7
    2cee:	91 05       	cpc	r25, r1
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <Gpt_Init+0xb38>
    2cf2:	9b c0       	rjmp	.+310    	; 0x2e2a <Gpt_Init+0xc6e>
    2cf4:	b0 c0       	rjmp	.+352    	; 0x2e56 <Gpt_Init+0xc9a>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2cf6:	a5 e4       	ldi	r26, 0x45	; 69
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e5 e4       	ldi	r30, 0x45	; 69
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	8e 7f       	andi	r24, 0xFE	; 254
    2d02:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2d04:	a5 e4       	ldi	r26, 0x45	; 69
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e5 e4       	ldi	r30, 0x45	; 69
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8d 7f       	andi	r24, 0xFD	; 253
    2d10:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2d12:	a5 e4       	ldi	r26, 0x45	; 69
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e5 e4       	ldi	r30, 0x45	; 69
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	8b 7f       	andi	r24, 0xFB	; 251
    2d1e:	8c 93       	st	X, r24
    2d20:	9d c0       	rjmp	.+314    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR2,TCCR2_CS20);
    2d22:	a5 e4       	ldi	r26, 0x45	; 69
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e5 e4       	ldi	r30, 0x45	; 69
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	81 60       	ori	r24, 0x01	; 1
    2d2e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2d30:	a5 e4       	ldi	r26, 0x45	; 69
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	e5 e4       	ldi	r30, 0x45	; 69
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	8d 7f       	andi	r24, 0xFD	; 253
    2d3c:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2d3e:	a5 e4       	ldi	r26, 0x45	; 69
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e5 e4       	ldi	r30, 0x45	; 69
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	8b 7f       	andi	r24, 0xFB	; 251
    2d4a:	8c 93       	st	X, r24
    2d4c:	87 c0       	rjmp	.+270    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2d4e:	a5 e4       	ldi	r26, 0x45	; 69
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e5 e4       	ldi	r30, 0x45	; 69
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	8e 7f       	andi	r24, 0xFE	; 254
    2d5a:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2d5c:	a5 e4       	ldi	r26, 0x45	; 69
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e5 e4       	ldi	r30, 0x45	; 69
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	82 60       	ori	r24, 0x02	; 2
    2d68:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2d6a:	a5 e4       	ldi	r26, 0x45	; 69
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e5 e4       	ldi	r30, 0x45	; 69
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8b 7f       	andi	r24, 0xFB	; 251
    2d76:	8c 93       	st	X, r24
    2d78:	71 c0       	rjmp	.+226    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_32:
            SET_BIT(TCCR2,TCCR2_CS20);
    2d7a:	a5 e4       	ldi	r26, 0x45	; 69
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e5 e4       	ldi	r30, 0x45	; 69
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	81 60       	ori	r24, 0x01	; 1
    2d86:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2d88:	a5 e4       	ldi	r26, 0x45	; 69
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e5 e4       	ldi	r30, 0x45	; 69
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	82 60       	ori	r24, 0x02	; 2
    2d94:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2d96:	a5 e4       	ldi	r26, 0x45	; 69
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e5 e4       	ldi	r30, 0x45	; 69
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	8b 7f       	andi	r24, 0xFB	; 251
    2da2:	8c 93       	st	X, r24
    2da4:	5b c0       	rjmp	.+182    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2da6:	a5 e4       	ldi	r26, 0x45	; 69
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e5 e4       	ldi	r30, 0x45	; 69
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	8e 7f       	andi	r24, 0xFE	; 254
    2db2:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2db4:	a5 e4       	ldi	r26, 0x45	; 69
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e5 e4       	ldi	r30, 0x45	; 69
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8d 7f       	andi	r24, 0xFD	; 253
    2dc0:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2dc2:	a5 e4       	ldi	r26, 0x45	; 69
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e5 e4       	ldi	r30, 0x45	; 69
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	84 60       	ori	r24, 0x04	; 4
    2dce:	8c 93       	st	X, r24
    2dd0:	45 c0       	rjmp	.+138    	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_128:
            SET_BIT(TCCR2,TCCR2_CS20);
    2dd2:	a5 e4       	ldi	r26, 0x45	; 69
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	e5 e4       	ldi	r30, 0x45	; 69
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	81 60       	ori	r24, 0x01	; 1
    2dde:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2de0:	a5 e4       	ldi	r26, 0x45	; 69
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e5 e4       	ldi	r30, 0x45	; 69
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	8d 7f       	andi	r24, 0xFD	; 253
    2dec:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2dee:	a5 e4       	ldi	r26, 0x45	; 69
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e5 e4       	ldi	r30, 0x45	; 69
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	84 60       	ori	r24, 0x04	; 4
    2dfa:	8c 93       	st	X, r24
    2dfc:	2f c0       	rjmp	.+94     	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2dfe:	a5 e4       	ldi	r26, 0x45	; 69
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e5 e4       	ldi	r30, 0x45	; 69
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	8e 7f       	andi	r24, 0xFE	; 254
    2e0a:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2e0c:	a5 e4       	ldi	r26, 0x45	; 69
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e5 e4       	ldi	r30, 0x45	; 69
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	82 60       	ori	r24, 0x02	; 2
    2e18:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2e1a:	a5 e4       	ldi	r26, 0x45	; 69
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	e5 e4       	ldi	r30, 0x45	; 69
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	84 60       	ori	r24, 0x04	; 4
    2e26:	8c 93       	st	X, r24
    2e28:	19 c0       	rjmp	.+50     	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR2,TCCR2_CS20);
    2e2a:	a5 e4       	ldi	r26, 0x45	; 69
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e5 e4       	ldi	r30, 0x45	; 69
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	81 60       	ori	r24, 0x01	; 1
    2e36:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2e38:	a5 e4       	ldi	r26, 0x45	; 69
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	e5 e4       	ldi	r30, 0x45	; 69
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	82 60       	ori	r24, 0x02	; 2
    2e44:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2e46:	a5 e4       	ldi	r26, 0x45	; 69
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e5 e4       	ldi	r30, 0x45	; 69
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	84 60       	ori	r24, 0x04	; 4
    2e52:	8c 93       	st	X, r24
    2e54:	03 c0       	rjmp	.+6      	; 0x2e5c <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2e56:	19 82       	std	Y+1, r1	; 0x01
    2e58:	01 c0       	rjmp	.+2      	; 0x2e5c <Gpt_Init+0xca0>
            break;
        }
        break;

    default:
        returnValue = GPT_ERROR;
    2e5a:	19 82       	std	Y+1, r1	; 0x01
    }
    return returnValue;
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e5e:	65 96       	adiw	r28, 0x15	; 21
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	f8 94       	cli
    2e64:	de bf       	out	0x3e, r29	; 62
    2e66:	0f be       	out	0x3f, r0	; 63
    2e68:	cd bf       	out	0x3d, r28	; 61
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <Gpt_StartTimer>:

Gpt_ReturnType Gpt_StartTimer(Gpt_ChannelType channel, u16 value)
{
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <Gpt_StartTimer+0x6>
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <Gpt_StartTimer+0x8>
    2e78:	00 d0       	rcall	.+0      	; 0x2e7a <Gpt_StartTimer+0xa>
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	8a 83       	std	Y+2, r24	; 0x02
    2e80:	7c 83       	std	Y+4, r23	; 0x04
    2e82:	6b 83       	std	Y+3, r22	; 0x03
    Gpt_ReturnType returnValue = GPT_OK;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	3e 83       	std	Y+6, r19	; 0x06
    2e90:	2d 83       	std	Y+5, r18	; 0x05
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	81 30       	cpi	r24, 0x01	; 1
    2e98:	91 05       	cpc	r25, r1
    2e9a:	11 f1       	breq	.+68     	; 0x2ee0 <Gpt_StartTimer+0x70>
    2e9c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e9e:	3e 81       	ldd	r19, Y+6	; 0x06
    2ea0:	22 30       	cpi	r18, 0x02	; 2
    2ea2:	31 05       	cpc	r19, r1
    2ea4:	2c f4       	brge	.+10     	; 0x2eb0 <Gpt_StartTimer+0x40>
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	61 f0       	breq	.+24     	; 0x2ec6 <Gpt_StartTimer+0x56>
    2eae:	32 c0       	rjmp	.+100    	; 0x2f14 <Gpt_StartTimer+0xa4>
    2eb0:	2d 81       	ldd	r18, Y+5	; 0x05
    2eb2:	3e 81       	ldd	r19, Y+6	; 0x06
    2eb4:	22 30       	cpi	r18, 0x02	; 2
    2eb6:	31 05       	cpc	r19, r1
    2eb8:	d1 f0       	breq	.+52     	; 0x2eee <Gpt_StartTimer+0x7e>
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	83 30       	cpi	r24, 0x03	; 3
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	e1 f0       	breq	.+56     	; 0x2efc <Gpt_StartTimer+0x8c>
    2ec4:	27 c0       	rjmp	.+78     	; 0x2f14 <Gpt_StartTimer+0xa4>
    {
    case GPT_CHANNEL_TIMER0:
        if (value < 256)
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eca:	8f 3f       	cpi	r24, 0xFF	; 255
    2ecc:	91 05       	cpc	r25, r1
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <Gpt_StartTimer+0x62>
    2ed0:	28 f4       	brcc	.+10     	; 0x2edc <Gpt_StartTimer+0x6c>
        {
            OCR0 = value;
    2ed2:	ec e5       	ldi	r30, 0x5C	; 92
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	80 83       	st	Z, r24
    2eda:	1c c0       	rjmp	.+56     	; 0x2f14 <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    2edc:	19 82       	std	Y+1, r1	; 0x01
    2ede:	1a c0       	rjmp	.+52     	; 0x2f14 <Gpt_StartTimer+0xa4>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    2ee0:	ea e4       	ldi	r30, 0x4A	; 74
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	91 83       	std	Z+1, r25	; 0x01
    2eea:	80 83       	st	Z, r24
    2eec:	13 c0       	rjmp	.+38     	; 0x2f14 <Gpt_StartTimer+0xa4>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    2eee:	e8 e4       	ldi	r30, 0x48	; 72
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	0c c0       	rjmp	.+24     	; 0x2f14 <Gpt_StartTimer+0xa4>
            returnValue = GPT_ERROR;
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (value < 256)
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	8f 3f       	cpi	r24, 0xFF	; 255
    2f02:	91 05       	cpc	r25, r1
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <Gpt_StartTimer+0x98>
    2f06:	28 f4       	brcc	.+10     	; 0x2f12 <Gpt_StartTimer+0xa2>
        {
            OCR2 = value;
    2f08:	e3 e4       	ldi	r30, 0x43	; 67
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	80 83       	st	Z, r24
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    2f12:	19 82       	std	Y+1, r1	; 0x01
        break;

    default:
        break;
    }
    return returnValue;
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f16:	26 96       	adiw	r28, 0x06	; 6
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <Gpt_GetTimeElapsed>:

u16 Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <Gpt_GetTimeElapsed+0x6>
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <Gpt_GetTimeElapsed+0x8>
    2f30:	0f 92       	push	r0
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    2f38:	1a 82       	std	Y+2, r1	; 0x02
    2f3a:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	3d 83       	std	Y+5, r19	; 0x05
    2f44:	2c 83       	std	Y+4, r18	; 0x04
    2f46:	8c 81       	ldd	r24, Y+4	; 0x04
    2f48:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	e9 f0       	breq	.+58     	; 0x2f8a <Gpt_GetTimeElapsed+0x62>
    2f50:	2c 81       	ldd	r18, Y+4	; 0x04
    2f52:	3d 81       	ldd	r19, Y+5	; 0x05
    2f54:	22 30       	cpi	r18, 0x02	; 2
    2f56:	31 05       	cpc	r19, r1
    2f58:	2c f4       	brge	.+10     	; 0x2f64 <Gpt_GetTimeElapsed+0x3c>
    2f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	61 f0       	breq	.+24     	; 0x2f7a <Gpt_GetTimeElapsed+0x52>
    2f62:	28 c0       	rjmp	.+80     	; 0x2fb4 <Gpt_GetTimeElapsed+0x8c>
    2f64:	2c 81       	ldd	r18, Y+4	; 0x04
    2f66:	3d 81       	ldd	r19, Y+5	; 0x05
    2f68:	22 30       	cpi	r18, 0x02	; 2
    2f6a:	31 05       	cpc	r19, r1
    2f6c:	a9 f0       	breq	.+42     	; 0x2f98 <Gpt_GetTimeElapsed+0x70>
    2f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f70:	9d 81       	ldd	r25, Y+5	; 0x05
    2f72:	83 30       	cpi	r24, 0x03	; 3
    2f74:	91 05       	cpc	r25, r1
    2f76:	b9 f0       	breq	.+46     	; 0x2fa6 <Gpt_GetTimeElapsed+0x7e>
    2f78:	1d c0       	rjmp	.+58     	; 0x2fb4 <Gpt_GetTimeElapsed+0x8c>
    {
    case GPT_CHANNEL_TIMER0:
        value = TCNT0;
    2f7a:	e2 e5       	ldi	r30, 0x52	; 82
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	88 2f       	mov	r24, r24
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	15 c0       	rjmp	.+42     	; 0x2fb4 <Gpt_GetTimeElapsed+0x8c>
        break;
    case GPT_CHANNEL_TIMER1A:
        value = TCNT1;
    2f8a:	ec e4       	ldi	r30, 0x4C	; 76
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	91 81       	ldd	r25, Z+1	; 0x01
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	0e c0       	rjmp	.+28     	; 0x2fb4 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        value = TCNT1;
    2f98:	ec e4       	ldi	r30, 0x4C	; 76
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	9a 83       	std	Y+2, r25	; 0x02
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	07 c0       	rjmp	.+14     	; 0x2fb4 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        value = TCNT2;
    2fa6:	e4 e4       	ldi	r30, 0x44	; 68
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	08 95       	ret

00002fc8 <Gpt_GetTimeRemaining>:

u16 Gpt_GetTimeRemaining(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2fc8:	df 93       	push	r29
    2fca:	cf 93       	push	r28
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <Gpt_GetTimeRemaining+0x6>
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <Gpt_GetTimeRemaining+0x8>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <Gpt_GetTimeRemaining+0xa>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	8b 83       	std	Y+3, r24	; 0x03
    2fd8:	6c 83       	std	Y+4, r22	; 0x04
    u16 value = 0;
    2fda:	1a 82       	std	Y+2, r1	; 0x02
    2fdc:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	3e 83       	std	Y+6, r19	; 0x06
    2fe6:	2d 83       	std	Y+5, r18	; 0x05
    2fe8:	4d 81       	ldd	r20, Y+5	; 0x05
    2fea:	5e 81       	ldd	r21, Y+6	; 0x06
    2fec:	41 30       	cpi	r20, 0x01	; 1
    2fee:	51 05       	cpc	r21, r1
    2ff0:	e1 f1       	breq	.+120    	; 0x306a <Gpt_GetTimeRemaining+0xa2>
    2ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff6:	82 30       	cpi	r24, 0x02	; 2
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	34 f4       	brge	.+12     	; 0x3008 <Gpt_GetTimeRemaining+0x40>
    2ffc:	2d 81       	ldd	r18, Y+5	; 0x05
    2ffe:	3e 81       	ldd	r19, Y+6	; 0x06
    3000:	21 15       	cp	r18, r1
    3002:	31 05       	cpc	r19, r1
    3004:	71 f0       	breq	.+28     	; 0x3022 <Gpt_GetTimeRemaining+0x5a>
    3006:	90 c0       	rjmp	.+288    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
    3008:	4d 81       	ldd	r20, Y+5	; 0x05
    300a:	5e 81       	ldd	r21, Y+6	; 0x06
    300c:	42 30       	cpi	r20, 0x02	; 2
    300e:	51 05       	cpc	r21, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <Gpt_GetTimeRemaining+0x4c>
    3012:	4a c0       	rjmp	.+148    	; 0x30a8 <Gpt_GetTimeRemaining+0xe0>
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	83 30       	cpi	r24, 0x03	; 3
    301a:	91 05       	cpc	r25, r1
    301c:	09 f4       	brne	.+2      	; 0x3020 <Gpt_GetTimeRemaining+0x58>
    301e:	62 c0       	rjmp	.+196    	; 0x30e4 <Gpt_GetTimeRemaining+0x11c>
    3020:	83 c0       	rjmp	.+262    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3022:	8c 81       	ldd	r24, Y+4	; 0x04
    3024:	88 23       	and	r24, r24
    3026:	61 f4       	brne	.+24     	; 0x3040 <Gpt_GetTimeRemaining+0x78>
        {
            value = 0xFF - TCNT0;
    3028:	e2 e5       	ldi	r30, 0x52	; 82
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	28 2f       	mov	r18, r24
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	8f ef       	ldi	r24, 0xFF	; 255
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	82 1b       	sub	r24, r18
    3038:	93 0b       	sbc	r25, r19
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	74 c0       	rjmp	.+232    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    3040:	8c 81       	ldd	r24, Y+4	; 0x04
    3042:	81 30       	cpi	r24, 0x01	; 1
    3044:	09 f0       	breq	.+2      	; 0x3048 <Gpt_GetTimeRemaining+0x80>
    3046:	70 c0       	rjmp	.+224    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR0 - TCNT0;
    3048:	ec e5       	ldi	r30, 0x5C	; 92
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	e2 e5       	ldi	r30, 0x52	; 82
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	a9 01       	movw	r20, r18
    305e:	48 1b       	sub	r20, r24
    3060:	59 0b       	sbc	r21, r25
    3062:	ca 01       	movw	r24, r20
    3064:	9a 83       	std	Y+2, r25	; 0x02
    3066:	89 83       	std	Y+1, r24	; 0x01
    3068:	5f c0       	rjmp	.+190    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    306a:	8c 81       	ldd	r24, Y+4	; 0x04
    306c:	88 23       	and	r24, r24
    306e:	49 f4       	brne	.+18     	; 0x3082 <Gpt_GetTimeRemaining+0xba>
        {
            value = 0xFFFF - TCNT1;
    3070:	ec e4       	ldi	r30, 0x4C	; 76
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	80 95       	com	r24
    307a:	90 95       	com	r25
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	89 83       	std	Y+1, r24	; 0x01
    3080:	53 c0       	rjmp	.+166    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    3082:	8c 81       	ldd	r24, Y+4	; 0x04
    3084:	81 30       	cpi	r24, 0x01	; 1
    3086:	09 f0       	breq	.+2      	; 0x308a <Gpt_GetTimeRemaining+0xc2>
    3088:	4f c0       	rjmp	.+158    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1A - TCNT1;
    308a:	ea e4       	ldi	r30, 0x4A	; 74
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	20 81       	ld	r18, Z
    3090:	31 81       	ldd	r19, Z+1	; 0x01
    3092:	ec e4       	ldi	r30, 0x4C	; 76
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	a9 01       	movw	r20, r18
    309c:	48 1b       	sub	r20, r24
    309e:	59 0b       	sbc	r21, r25
    30a0:	ca 01       	movw	r24, r20
    30a2:	9a 83       	std	Y+2, r25	; 0x02
    30a4:	89 83       	std	Y+1, r24	; 0x01
    30a6:	40 c0       	rjmp	.+128    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    30a8:	8c 81       	ldd	r24, Y+4	; 0x04
    30aa:	88 23       	and	r24, r24
    30ac:	49 f4       	brne	.+18     	; 0x30c0 <Gpt_GetTimeRemaining+0xf8>
        {
            value = 0xFFFF - TCNT1;
    30ae:	ec e4       	ldi	r30, 0x4C	; 76
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	91 81       	ldd	r25, Z+1	; 0x01
    30b6:	80 95       	com	r24
    30b8:	90 95       	com	r25
    30ba:	9a 83       	std	Y+2, r25	; 0x02
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	34 c0       	rjmp	.+104    	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    30c0:	8c 81       	ldd	r24, Y+4	; 0x04
    30c2:	81 30       	cpi	r24, 0x01	; 1
    30c4:	89 f5       	brne	.+98     	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1B - TCNT1;
    30c6:	e8 e4       	ldi	r30, 0x48	; 72
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	20 81       	ld	r18, Z
    30cc:	31 81       	ldd	r19, Z+1	; 0x01
    30ce:	ec e4       	ldi	r30, 0x4C	; 76
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	91 81       	ldd	r25, Z+1	; 0x01
    30d6:	a9 01       	movw	r20, r18
    30d8:	48 1b       	sub	r20, r24
    30da:	59 0b       	sbc	r21, r25
    30dc:	ca 01       	movw	r24, r20
    30de:	9a 83       	std	Y+2, r25	; 0x02
    30e0:	89 83       	std	Y+1, r24	; 0x01
    30e2:	22 c0       	rjmp	.+68     	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    30e4:	8c 81       	ldd	r24, Y+4	; 0x04
    30e6:	88 23       	and	r24, r24
    30e8:	61 f4       	brne	.+24     	; 0x3102 <Gpt_GetTimeRemaining+0x13a>
        {
            value = 0xFF - TCNT2;
    30ea:	e4 e4       	ldi	r30, 0x44	; 68
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	82 1b       	sub	r24, r18
    30fa:	93 0b       	sbc	r25, r19
    30fc:	9a 83       	std	Y+2, r25	; 0x02
    30fe:	89 83       	std	Y+1, r24	; 0x01
    3100:	13 c0       	rjmp	.+38     	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    3102:	8c 81       	ldd	r24, Y+4	; 0x04
    3104:	81 30       	cpi	r24, 0x01	; 1
    3106:	81 f4       	brne	.+32     	; 0x3128 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR2 - TCNT2;
    3108:	e3 e4       	ldi	r30, 0x43	; 67
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	e4 e4       	ldi	r30, 0x44	; 68
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	88 2f       	mov	r24, r24
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a9 01       	movw	r20, r18
    311e:	48 1b       	sub	r20, r24
    3120:	59 0b       	sbc	r21, r25
    3122:	ca 01       	movw	r24, r20
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    312c:	26 96       	adiw	r28, 0x06	; 6
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <Gpt_EnableNotification>:

void Gpt_EnableNotification(Gpt_ChannelType channel, Gpt_ModeType mode, void (*callback)(void))
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	00 d0       	rcall	.+0      	; 0x3144 <Gpt_EnableNotification+0x6>
    3144:	00 d0       	rcall	.+0      	; 0x3146 <Gpt_EnableNotification+0x8>
    3146:	00 d0       	rcall	.+0      	; 0x3148 <Gpt_EnableNotification+0xa>
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	89 83       	std	Y+1, r24	; 0x01
    314e:	6a 83       	std	Y+2, r22	; 0x02
    3150:	5c 83       	std	Y+4, r21	; 0x04
    3152:	4b 83       	std	Y+3, r20	; 0x03
    switch (channel)
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	3e 83       	std	Y+6, r19	; 0x06
    315c:	2d 83       	std	Y+5, r18	; 0x05
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	9e 81       	ldd	r25, Y+6	; 0x06
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	91 05       	cpc	r25, r1
    3166:	d1 f1       	breq	.+116    	; 0x31dc <Gpt_EnableNotification+0x9e>
    3168:	2d 81       	ldd	r18, Y+5	; 0x05
    316a:	3e 81       	ldd	r19, Y+6	; 0x06
    316c:	22 30       	cpi	r18, 0x02	; 2
    316e:	31 05       	cpc	r19, r1
    3170:	2c f4       	brge	.+10     	; 0x317c <Gpt_EnableNotification+0x3e>
    3172:	8d 81       	ldd	r24, Y+5	; 0x05
    3174:	9e 81       	ldd	r25, Y+6	; 0x06
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	71 f0       	breq	.+28     	; 0x3196 <Gpt_EnableNotification+0x58>
    317a:	96 c0       	rjmp	.+300    	; 0x32a8 <Gpt_EnableNotification+0x16a>
    317c:	2d 81       	ldd	r18, Y+5	; 0x05
    317e:	3e 81       	ldd	r19, Y+6	; 0x06
    3180:	22 30       	cpi	r18, 0x02	; 2
    3182:	31 05       	cpc	r19, r1
    3184:	09 f4       	brne	.+2      	; 0x3188 <Gpt_EnableNotification+0x4a>
    3186:	4d c0       	rjmp	.+154    	; 0x3222 <Gpt_EnableNotification+0xe4>
    3188:	8d 81       	ldd	r24, Y+5	; 0x05
    318a:	9e 81       	ldd	r25, Y+6	; 0x06
    318c:	83 30       	cpi	r24, 0x03	; 3
    318e:	91 05       	cpc	r25, r1
    3190:	09 f4       	brne	.+2      	; 0x3194 <Gpt_EnableNotification+0x56>
    3192:	69 c0       	rjmp	.+210    	; 0x3266 <Gpt_EnableNotification+0x128>
    3194:	89 c0       	rjmp	.+274    	; 0x32a8 <Gpt_EnableNotification+0x16a>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3196:	8a 81       	ldd	r24, Y+2	; 0x02
    3198:	88 23       	and	r24, r24
    319a:	71 f4       	brne	.+28     	; 0x31b8 <Gpt_EnableNotification+0x7a>
        {
            Gpt_Timer0_Callback_Normal = callback;
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	9c 81       	ldd	r25, Y+4	; 0x04
    31a0:	90 93 a9 01 	sts	0x01A9, r25
    31a4:	80 93 a8 01 	sts	0x01A8, r24
            SET_BIT(TIMSK, TIMSK_TOIE0);
    31a8:	a9 e5       	ldi	r26, 0x59	; 89
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e9 e5       	ldi	r30, 0x59	; 89
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	81 60       	ori	r24, 0x01	; 1
    31b4:	8c 93       	st	X, r24
    31b6:	78 c0       	rjmp	.+240    	; 0x32a8 <Gpt_EnableNotification+0x16a>
        }
        else if (mode == GPT_MODE_CTC)
    31b8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ba:	81 30       	cpi	r24, 0x01	; 1
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <Gpt_EnableNotification+0x82>
    31be:	74 c0       	rjmp	.+232    	; 0x32a8 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer0_Callback_Ctc = callback;
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	90 93 9f 01 	sts	0x019F, r25
    31c8:	80 93 9e 01 	sts	0x019E, r24
            SET_BIT(TIMSK, TIMSK_OCIE0);
    31cc:	a9 e5       	ldi	r26, 0x59	; 89
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e9 e5       	ldi	r30, 0x59	; 89
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	82 60       	ori	r24, 0x02	; 2
    31d8:	8c 93       	st	X, r24
    31da:	66 c0       	rjmp	.+204    	; 0x32a8 <Gpt_EnableNotification+0x16a>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	88 23       	and	r24, r24
    31e0:	71 f4       	brne	.+28     	; 0x31fe <Gpt_EnableNotification+0xc0>
        {
            Gpt_Timer1_Callback_Normal = callback;
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	90 93 ab 01 	sts	0x01AB, r25
    31ea:	80 93 aa 01 	sts	0x01AA, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    31ee:	a9 e5       	ldi	r26, 0x59	; 89
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e9 e5       	ldi	r30, 0x59	; 89
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	84 60       	ori	r24, 0x04	; 4
    31fa:	8c 93       	st	X, r24
    31fc:	55 c0       	rjmp	.+170    	; 0x32a8 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	81 30       	cpi	r24, 0x01	; 1
    3202:	09 f0       	breq	.+2      	; 0x3206 <Gpt_EnableNotification+0xc8>
    3204:	51 c0       	rjmp	.+162    	; 0x32a8 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1A_Callback_Ctc = callback;
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	9c 81       	ldd	r25, Y+4	; 0x04
    320a:	90 93 a7 01 	sts	0x01A7, r25
    320e:	80 93 a6 01 	sts	0x01A6, r24
            SET_BIT(TIMSK, TIMSK_OCIE1A);
    3212:	a9 e5       	ldi	r26, 0x59	; 89
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	e9 e5       	ldi	r30, 0x59	; 89
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	80 61       	ori	r24, 0x10	; 16
    321e:	8c 93       	st	X, r24
    3220:	43 c0       	rjmp	.+134    	; 0x32a8 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	88 23       	and	r24, r24
    3226:	71 f4       	brne	.+28     	; 0x3244 <Gpt_EnableNotification+0x106>
        {
            Gpt_Timer1_Callback_Normal = callback;
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	9c 81       	ldd	r25, Y+4	; 0x04
    322c:	90 93 ab 01 	sts	0x01AB, r25
    3230:	80 93 aa 01 	sts	0x01AA, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    3234:	a9 e5       	ldi	r26, 0x59	; 89
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e9 e5       	ldi	r30, 0x59	; 89
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	84 60       	ori	r24, 0x04	; 4
    3240:	8c 93       	st	X, r24
    3242:	32 c0       	rjmp	.+100    	; 0x32a8 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	81 30       	cpi	r24, 0x01	; 1
    3248:	79 f5       	brne	.+94     	; 0x32a8 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1B_Callback_Ctc = callback;
    324a:	8b 81       	ldd	r24, Y+3	; 0x03
    324c:	9c 81       	ldd	r25, Y+4	; 0x04
    324e:	90 93 a3 01 	sts	0x01A3, r25
    3252:	80 93 a2 01 	sts	0x01A2, r24
            SET_BIT(TIMSK, TIMSK_OCIE1B);
    3256:	a9 e5       	ldi	r26, 0x59	; 89
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e9 e5       	ldi	r30, 0x59	; 89
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	88 60       	ori	r24, 0x08	; 8
    3262:	8c 93       	st	X, r24
    3264:	21 c0       	rjmp	.+66     	; 0x32a8 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	88 23       	and	r24, r24
    326a:	71 f4       	brne	.+28     	; 0x3288 <Gpt_EnableNotification+0x14a>
        {
            Gpt_Timer2_Callback_Normal = callback;
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
    326e:	9c 81       	ldd	r25, Y+4	; 0x04
    3270:	90 93 a5 01 	sts	0x01A5, r25
    3274:	80 93 a4 01 	sts	0x01A4, r24
            SET_BIT(TIMSK, TIMSK_TOIE2);
    3278:	a9 e5       	ldi	r26, 0x59	; 89
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e9 e5       	ldi	r30, 0x59	; 89
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	80 64       	ori	r24, 0x40	; 64
    3284:	8c 93       	st	X, r24
    3286:	10 c0       	rjmp	.+32     	; 0x32a8 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	81 30       	cpi	r24, 0x01	; 1
    328c:	69 f4       	brne	.+26     	; 0x32a8 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer2_Callback_Ctc = callback;
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	90 93 a1 01 	sts	0x01A1, r25
    3296:	80 93 a0 01 	sts	0x01A0, r24
            SET_BIT(TIMSK, TIMSK_OCIE2);
    329a:	a9 e5       	ldi	r26, 0x59	; 89
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	e9 e5       	ldi	r30, 0x59	; 89
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	80 68       	ori	r24, 0x80	; 128
    32a6:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    32a8:	26 96       	adiw	r28, 0x06	; 6
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	08 95       	ret

000032ba <Gpt_DisableNotification>:

void Gpt_DisableNotification(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	00 d0       	rcall	.+0      	; 0x32c0 <Gpt_DisableNotification+0x6>
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <Gpt_DisableNotification+0x8>
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	28 2f       	mov	r18, r24
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	3c 83       	std	Y+4, r19	; 0x04
    32d2:	2b 83       	std	Y+3, r18	; 0x03
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	9c 81       	ldd	r25, Y+4	; 0x04
    32d8:	81 30       	cpi	r24, 0x01	; 1
    32da:	91 05       	cpc	r25, r1
    32dc:	69 f1       	breq	.+90     	; 0x3338 <Gpt_DisableNotification+0x7e>
    32de:	2b 81       	ldd	r18, Y+3	; 0x03
    32e0:	3c 81       	ldd	r19, Y+4	; 0x04
    32e2:	22 30       	cpi	r18, 0x02	; 2
    32e4:	31 05       	cpc	r19, r1
    32e6:	2c f4       	brge	.+10     	; 0x32f2 <Gpt_DisableNotification+0x38>
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9c 81       	ldd	r25, Y+4	; 0x04
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f0       	breq	.+26     	; 0x330a <Gpt_DisableNotification+0x50>
    32f0:	64 c0       	rjmp	.+200    	; 0x33ba <Gpt_DisableNotification+0x100>
    32f2:	2b 81       	ldd	r18, Y+3	; 0x03
    32f4:	3c 81       	ldd	r19, Y+4	; 0x04
    32f6:	22 30       	cpi	r18, 0x02	; 2
    32f8:	31 05       	cpc	r19, r1
    32fa:	a1 f1       	breq	.+104    	; 0x3364 <Gpt_DisableNotification+0xaa>
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3300:	83 30       	cpi	r24, 0x03	; 3
    3302:	91 05       	cpc	r25, r1
    3304:	09 f4       	brne	.+2      	; 0x3308 <Gpt_DisableNotification+0x4e>
    3306:	44 c0       	rjmp	.+136    	; 0x3390 <Gpt_DisableNotification+0xd6>
    3308:	58 c0       	rjmp	.+176    	; 0x33ba <Gpt_DisableNotification+0x100>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	88 23       	and	r24, r24
    330e:	41 f4       	brne	.+16     	; 0x3320 <Gpt_DisableNotification+0x66>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    3310:	a9 e5       	ldi	r26, 0x59	; 89
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	e9 e5       	ldi	r30, 0x59	; 89
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	8e 7f       	andi	r24, 0xFE	; 254
    331c:	8c 93       	st	X, r24
    331e:	4d c0       	rjmp	.+154    	; 0x33ba <Gpt_DisableNotification+0x100>
        }
        else if (mode == GPT_MODE_CTC)
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	81 30       	cpi	r24, 0x01	; 1
    3324:	09 f0       	breq	.+2      	; 0x3328 <Gpt_DisableNotification+0x6e>
    3326:	49 c0       	rjmp	.+146    	; 0x33ba <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    3328:	a9 e5       	ldi	r26, 0x59	; 89
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	e9 e5       	ldi	r30, 0x59	; 89
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	8d 7f       	andi	r24, 0xFD	; 253
    3334:	8c 93       	st	X, r24
    3336:	41 c0       	rjmp	.+130    	; 0x33ba <Gpt_DisableNotification+0x100>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    3338:	8a 81       	ldd	r24, Y+2	; 0x02
    333a:	88 23       	and	r24, r24
    333c:	41 f4       	brne	.+16     	; 0x334e <Gpt_DisableNotification+0x94>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    333e:	a9 e5       	ldi	r26, 0x59	; 89
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	e9 e5       	ldi	r30, 0x59	; 89
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 81       	ld	r24, Z
    3348:	8b 7f       	andi	r24, 0xFB	; 251
    334a:	8c 93       	st	X, r24
    334c:	36 c0       	rjmp	.+108    	; 0x33ba <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	81 30       	cpi	r24, 0x01	; 1
    3352:	99 f5       	brne	.+102    	; 0x33ba <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1A);
    3354:	a9 e5       	ldi	r26, 0x59	; 89
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	e9 e5       	ldi	r30, 0x59	; 89
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
    335e:	8f 7e       	andi	r24, 0xEF	; 239
    3360:	8c 93       	st	X, r24
    3362:	2b c0       	rjmp	.+86     	; 0x33ba <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	88 23       	and	r24, r24
    3368:	41 f4       	brne	.+16     	; 0x337a <Gpt_DisableNotification+0xc0>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    336a:	a9 e5       	ldi	r26, 0x59	; 89
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	e9 e5       	ldi	r30, 0x59	; 89
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	8b 7f       	andi	r24, 0xFB	; 251
    3376:	8c 93       	st	X, r24
    3378:	20 c0       	rjmp	.+64     	; 0x33ba <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	81 30       	cpi	r24, 0x01	; 1
    337e:	e9 f4       	brne	.+58     	; 0x33ba <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1B);
    3380:	a9 e5       	ldi	r26, 0x59	; 89
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	e9 e5       	ldi	r30, 0x59	; 89
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	87 7f       	andi	r24, 0xF7	; 247
    338c:	8c 93       	st	X, r24
    338e:	15 c0       	rjmp	.+42     	; 0x33ba <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	88 23       	and	r24, r24
    3394:	41 f4       	brne	.+16     	; 0x33a6 <Gpt_DisableNotification+0xec>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE2);
    3396:	a9 e5       	ldi	r26, 0x59	; 89
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	e9 e5       	ldi	r30, 0x59	; 89
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	8f 7b       	andi	r24, 0xBF	; 191
    33a2:	8c 93       	st	X, r24
    33a4:	0a c0       	rjmp	.+20     	; 0x33ba <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	81 30       	cpi	r24, 0x01	; 1
    33aa:	39 f4       	brne	.+14     	; 0x33ba <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE2);
    33ac:	a9 e5       	ldi	r26, 0x59	; 89
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e9 e5       	ldi	r30, 0x59	; 89
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	8f 77       	andi	r24, 0x7F	; 127
    33b8:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <I2C_InitMaster>:
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	e0 e2       	ldi	r30, 0x20	; 32
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	82 e0       	ldi	r24, 0x02	; 2
    33d6:	80 83       	st	Z, r24
    33d8:	e1 e2       	ldi	r30, 0x21	; 33
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	10 82       	st	Z, r1
    33de:	e6 e5       	ldi	r30, 0x56	; 86
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	84 e0       	ldi	r24, 0x04	; 4
    33e4:	80 83       	st	Z, r24
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <I2C_SendStartCondition>:
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	e6 e5       	ldi	r30, 0x56	; 86
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	84 ea       	ldi	r24, 0xA4	; 164
    33fa:	80 83       	st	Z, r24
    33fc:	e6 e5       	ldi	r30, 0x56	; 86
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	88 23       	and	r24, r24
    3404:	dc f7       	brge	.-10     	; 0x33fc <I2C_SendStartCondition+0x10>
    3406:	cf 91       	pop	r28
    3408:	df 91       	pop	r29
    340a:	08 95       	ret

0000340c <I2C_SendStopCondition>:
    340c:	df 93       	push	r29
    340e:	cf 93       	push	r28
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
    3414:	e6 e5       	ldi	r30, 0x56	; 86
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	84 e9       	ldi	r24, 0x94	; 148
    341a:	80 83       	st	Z, r24
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <I2C_MasterWriteDataByte>:
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	0f 92       	push	r0
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	89 83       	std	Y+1, r24	; 0x01
    342e:	e3 e2       	ldi	r30, 0x23	; 35
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	80 83       	st	Z, r24
    3436:	e6 e5       	ldi	r30, 0x56	; 86
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	84 e8       	ldi	r24, 0x84	; 132
    343c:	80 83       	st	Z, r24
    343e:	e6 e5       	ldi	r30, 0x56	; 86
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	88 23       	and	r24, r24
    3446:	dc f7       	brge	.-10     	; 0x343e <I2C_MasterWriteDataByte+0x1c>
    3448:	0f 90       	pop	r0
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <I2C_MasterReadDataByteWith_ACK>:
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	e6 e5       	ldi	r30, 0x56	; 86
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	84 ec       	ldi	r24, 0xC4	; 196
    345e:	80 83       	st	Z, r24
    3460:	e6 e5       	ldi	r30, 0x56	; 86
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	80 81       	ld	r24, Z
    3466:	88 23       	and	r24, r24
    3468:	dc f7       	brge	.-10     	; 0x3460 <I2C_MasterReadDataByteWith_ACK+0x10>
    346a:	e3 e2       	ldi	r30, 0x23	; 35
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <I2C_MasterReadDataByteWith_NACK>:
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	e6 e5       	ldi	r30, 0x56	; 86
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	84 e8       	ldi	r24, 0x84	; 132
    3484:	80 83       	st	Z, r24
    3486:	e6 e5       	ldi	r30, 0x56	; 86
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	88 23       	and	r24, r24
    348e:	dc f7       	brge	.-10     	; 0x3486 <I2C_MasterReadDataByteWith_NACK+0x10>
    3490:	e3 e2       	ldi	r30, 0x23	; 35
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <Keypad_Init>:
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	41 e0       	ldi	r20, 0x01	; 1
    34aa:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    34ae:	83 e0       	ldi	r24, 0x03	; 3
    34b0:	61 e0       	ldi	r22, 0x01	; 1
    34b2:	41 e0       	ldi	r20, 0x01	; 1
    34b4:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	62 e0       	ldi	r22, 0x02	; 2
    34bc:	41 e0       	ldi	r20, 0x01	; 1
    34be:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    34c2:	83 e0       	ldi	r24, 0x03	; 3
    34c4:	63 e0       	ldi	r22, 0x03	; 3
    34c6:	41 e0       	ldi	r20, 0x01	; 1
    34c8:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    34cc:	83 e0       	ldi	r24, 0x03	; 3
    34ce:	64 e0       	ldi	r22, 0x04	; 4
    34d0:	42 e0       	ldi	r20, 0x02	; 2
    34d2:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    34d6:	83 e0       	ldi	r24, 0x03	; 3
    34d8:	65 e0       	ldi	r22, 0x05	; 5
    34da:	42 e0       	ldi	r20, 0x02	; 2
    34dc:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    34e0:	83 e0       	ldi	r24, 0x03	; 3
    34e2:	66 e0       	ldi	r22, 0x06	; 6
    34e4:	42 e0       	ldi	r20, 0x02	; 2
    34e6:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    34ea:	83 e0       	ldi	r24, 0x03	; 3
    34ec:	67 e0       	ldi	r22, 0x07	; 7
    34ee:	42 e0       	ldi	r20, 0x02	; 2
    34f0:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <Keypad_GetButtonState>:
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    3502:	28 97       	sbiw	r28, 0x08	; 8
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	8c 83       	std	Y+4, r24	; 0x04
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	8b 83       	std	Y+3, r24	; 0x03
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	86 95       	lsr	r24
    3518:	86 95       	lsr	r24
    351a:	8a 83       	std	Y+2, r24	; 0x02
    351c:	8c 81       	ldd	r24, Y+4	; 0x04
    351e:	83 70       	andi	r24, 0x03	; 3
    3520:	89 83       	std	Y+1, r24	; 0x01
    3522:	83 e0       	ldi	r24, 0x03	; 3
    3524:	64 e0       	ldi	r22, 0x04	; 4
    3526:	41 e0       	ldi	r20, 0x01	; 1
    3528:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    352c:	83 e0       	ldi	r24, 0x03	; 3
    352e:	65 e0       	ldi	r22, 0x05	; 5
    3530:	41 e0       	ldi	r20, 0x01	; 1
    3532:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3536:	83 e0       	ldi	r24, 0x03	; 3
    3538:	66 e0       	ldi	r22, 0x06	; 6
    353a:	41 e0       	ldi	r20, 0x01	; 1
    353c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3540:	83 e0       	ldi	r24, 0x03	; 3
    3542:	67 e0       	ldi	r22, 0x07	; 7
    3544:	41 e0       	ldi	r20, 0x01	; 1
    3546:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	38 87       	std	Y+8, r19	; 0x08
    3552:	2f 83       	std	Y+7, r18	; 0x07
    3554:	8f 81       	ldd	r24, Y+7	; 0x07
    3556:	98 85       	ldd	r25, Y+8	; 0x08
    3558:	81 30       	cpi	r24, 0x01	; 1
    355a:	91 05       	cpc	r25, r1
    355c:	d9 f0       	breq	.+54     	; 0x3594 <Keypad_GetButtonState+0x9a>
    355e:	2f 81       	ldd	r18, Y+7	; 0x07
    3560:	38 85       	ldd	r19, Y+8	; 0x08
    3562:	22 30       	cpi	r18, 0x02	; 2
    3564:	31 05       	cpc	r19, r1
    3566:	2c f4       	brge	.+10     	; 0x3572 <Keypad_GetButtonState+0x78>
    3568:	8f 81       	ldd	r24, Y+7	; 0x07
    356a:	98 85       	ldd	r25, Y+8	; 0x08
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	61 f0       	breq	.+24     	; 0x3588 <Keypad_GetButtonState+0x8e>
    3570:	22 c0       	rjmp	.+68     	; 0x35b6 <Keypad_GetButtonState+0xbc>
    3572:	2f 81       	ldd	r18, Y+7	; 0x07
    3574:	38 85       	ldd	r19, Y+8	; 0x08
    3576:	22 30       	cpi	r18, 0x02	; 2
    3578:	31 05       	cpc	r19, r1
    357a:	91 f0       	breq	.+36     	; 0x35a0 <Keypad_GetButtonState+0xa6>
    357c:	8f 81       	ldd	r24, Y+7	; 0x07
    357e:	98 85       	ldd	r25, Y+8	; 0x08
    3580:	83 30       	cpi	r24, 0x03	; 3
    3582:	91 05       	cpc	r25, r1
    3584:	99 f0       	breq	.+38     	; 0x35ac <Keypad_GetButtonState+0xb2>
    3586:	17 c0       	rjmp	.+46     	; 0x35b6 <Keypad_GetButtonState+0xbc>
    3588:	83 e0       	ldi	r24, 0x03	; 3
    358a:	64 e0       	ldi	r22, 0x04	; 4
    358c:	40 e0       	ldi	r20, 0x00	; 0
    358e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3592:	11 c0       	rjmp	.+34     	; 0x35b6 <Keypad_GetButtonState+0xbc>
    3594:	83 e0       	ldi	r24, 0x03	; 3
    3596:	65 e0       	ldi	r22, 0x05	; 5
    3598:	40 e0       	ldi	r20, 0x00	; 0
    359a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    359e:	0b c0       	rjmp	.+22     	; 0x35b6 <Keypad_GetButtonState+0xbc>
    35a0:	83 e0       	ldi	r24, 0x03	; 3
    35a2:	66 e0       	ldi	r22, 0x06	; 6
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    35aa:	05 c0       	rjmp	.+10     	; 0x35b6 <Keypad_GetButtonState+0xbc>
    35ac:	83 e0       	ldi	r24, 0x03	; 3
    35ae:	67 e0       	ldi	r22, 0x07	; 7
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    35b6:	8a 81       	ldd	r24, Y+2	; 0x02
    35b8:	28 2f       	mov	r18, r24
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	3e 83       	std	Y+6, r19	; 0x06
    35be:	2d 83       	std	Y+5, r18	; 0x05
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	9e 81       	ldd	r25, Y+6	; 0x06
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	91 05       	cpc	r25, r1
    35c8:	e9 f0       	breq	.+58     	; 0x3604 <Keypad_GetButtonState+0x10a>
    35ca:	2d 81       	ldd	r18, Y+5	; 0x05
    35cc:	3e 81       	ldd	r19, Y+6	; 0x06
    35ce:	22 30       	cpi	r18, 0x02	; 2
    35d0:	31 05       	cpc	r19, r1
    35d2:	2c f4       	brge	.+10     	; 0x35de <Keypad_GetButtonState+0xe4>
    35d4:	8d 81       	ldd	r24, Y+5	; 0x05
    35d6:	9e 81       	ldd	r25, Y+6	; 0x06
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	61 f0       	breq	.+24     	; 0x35f4 <Keypad_GetButtonState+0xfa>
    35dc:	2a c0       	rjmp	.+84     	; 0x3632 <Keypad_GetButtonState+0x138>
    35de:	2d 81       	ldd	r18, Y+5	; 0x05
    35e0:	3e 81       	ldd	r19, Y+6	; 0x06
    35e2:	22 30       	cpi	r18, 0x02	; 2
    35e4:	31 05       	cpc	r19, r1
    35e6:	b1 f0       	breq	.+44     	; 0x3614 <Keypad_GetButtonState+0x11a>
    35e8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ea:	9e 81       	ldd	r25, Y+6	; 0x06
    35ec:	83 30       	cpi	r24, 0x03	; 3
    35ee:	91 05       	cpc	r25, r1
    35f0:	c9 f0       	breq	.+50     	; 0x3624 <Keypad_GetButtonState+0x12a>
    35f2:	1f c0       	rjmp	.+62     	; 0x3632 <Keypad_GetButtonState+0x138>
    35f4:	83 e0       	ldi	r24, 0x03	; 3
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    35fc:	88 23       	and	r24, r24
    35fe:	c9 f4       	brne	.+50     	; 0x3632 <Keypad_GetButtonState+0x138>
    3600:	1b 82       	std	Y+3, r1	; 0x03
    3602:	17 c0       	rjmp	.+46     	; 0x3632 <Keypad_GetButtonState+0x138>
    3604:	83 e0       	ldi	r24, 0x03	; 3
    3606:	61 e0       	ldi	r22, 0x01	; 1
    3608:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    360c:	88 23       	and	r24, r24
    360e:	89 f4       	brne	.+34     	; 0x3632 <Keypad_GetButtonState+0x138>
    3610:	1b 82       	std	Y+3, r1	; 0x03
    3612:	0f c0       	rjmp	.+30     	; 0x3632 <Keypad_GetButtonState+0x138>
    3614:	83 e0       	ldi	r24, 0x03	; 3
    3616:	62 e0       	ldi	r22, 0x02	; 2
    3618:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    361c:	88 23       	and	r24, r24
    361e:	49 f4       	brne	.+18     	; 0x3632 <Keypad_GetButtonState+0x138>
    3620:	1b 82       	std	Y+3, r1	; 0x03
    3622:	07 c0       	rjmp	.+14     	; 0x3632 <Keypad_GetButtonState+0x138>
    3624:	83 e0       	ldi	r24, 0x03	; 3
    3626:	63 e0       	ldi	r22, 0x03	; 3
    3628:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    362c:	88 23       	and	r24, r24
    362e:	09 f4       	brne	.+2      	; 0x3632 <Keypad_GetButtonState+0x138>
    3630:	1b 82       	std	Y+3, r1	; 0x03
    3632:	8b 81       	ldd	r24, Y+3	; 0x03
    3634:	28 96       	adiw	r28, 0x08	; 8
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <Keypad_GetButtonStatePooling>:
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	28 97       	sbiw	r28, 0x08	; 8
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	8c 83       	std	Y+4, r24	; 0x04
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	8b 83       	std	Y+3, r24	; 0x03
    3660:	8c 81       	ldd	r24, Y+4	; 0x04
    3662:	86 95       	lsr	r24
    3664:	86 95       	lsr	r24
    3666:	8a 83       	std	Y+2, r24	; 0x02
    3668:	8c 81       	ldd	r24, Y+4	; 0x04
    366a:	83 70       	andi	r24, 0x03	; 3
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	83 e0       	ldi	r24, 0x03	; 3
    3670:	64 e0       	ldi	r22, 0x04	; 4
    3672:	41 e0       	ldi	r20, 0x01	; 1
    3674:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3678:	83 e0       	ldi	r24, 0x03	; 3
    367a:	65 e0       	ldi	r22, 0x05	; 5
    367c:	41 e0       	ldi	r20, 0x01	; 1
    367e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3682:	83 e0       	ldi	r24, 0x03	; 3
    3684:	66 e0       	ldi	r22, 0x06	; 6
    3686:	41 e0       	ldi	r20, 0x01	; 1
    3688:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	67 e0       	ldi	r22, 0x07	; 7
    3690:	41 e0       	ldi	r20, 0x01	; 1
    3692:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	28 2f       	mov	r18, r24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	38 87       	std	Y+8, r19	; 0x08
    369e:	2f 83       	std	Y+7, r18	; 0x07
    36a0:	8f 81       	ldd	r24, Y+7	; 0x07
    36a2:	98 85       	ldd	r25, Y+8	; 0x08
    36a4:	81 30       	cpi	r24, 0x01	; 1
    36a6:	91 05       	cpc	r25, r1
    36a8:	d9 f0       	breq	.+54     	; 0x36e0 <Keypad_GetButtonStatePooling+0x9a>
    36aa:	2f 81       	ldd	r18, Y+7	; 0x07
    36ac:	38 85       	ldd	r19, Y+8	; 0x08
    36ae:	22 30       	cpi	r18, 0x02	; 2
    36b0:	31 05       	cpc	r19, r1
    36b2:	2c f4       	brge	.+10     	; 0x36be <Keypad_GetButtonStatePooling+0x78>
    36b4:	8f 81       	ldd	r24, Y+7	; 0x07
    36b6:	98 85       	ldd	r25, Y+8	; 0x08
    36b8:	00 97       	sbiw	r24, 0x00	; 0
    36ba:	61 f0       	breq	.+24     	; 0x36d4 <Keypad_GetButtonStatePooling+0x8e>
    36bc:	22 c0       	rjmp	.+68     	; 0x3702 <Keypad_GetButtonStatePooling+0xbc>
    36be:	2f 81       	ldd	r18, Y+7	; 0x07
    36c0:	38 85       	ldd	r19, Y+8	; 0x08
    36c2:	22 30       	cpi	r18, 0x02	; 2
    36c4:	31 05       	cpc	r19, r1
    36c6:	91 f0       	breq	.+36     	; 0x36ec <Keypad_GetButtonStatePooling+0xa6>
    36c8:	8f 81       	ldd	r24, Y+7	; 0x07
    36ca:	98 85       	ldd	r25, Y+8	; 0x08
    36cc:	83 30       	cpi	r24, 0x03	; 3
    36ce:	91 05       	cpc	r25, r1
    36d0:	99 f0       	breq	.+38     	; 0x36f8 <Keypad_GetButtonStatePooling+0xb2>
    36d2:	17 c0       	rjmp	.+46     	; 0x3702 <Keypad_GetButtonStatePooling+0xbc>
    36d4:	83 e0       	ldi	r24, 0x03	; 3
    36d6:	64 e0       	ldi	r22, 0x04	; 4
    36d8:	40 e0       	ldi	r20, 0x00	; 0
    36da:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    36de:	11 c0       	rjmp	.+34     	; 0x3702 <Keypad_GetButtonStatePooling+0xbc>
    36e0:	83 e0       	ldi	r24, 0x03	; 3
    36e2:	65 e0       	ldi	r22, 0x05	; 5
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    36ea:	0b c0       	rjmp	.+22     	; 0x3702 <Keypad_GetButtonStatePooling+0xbc>
    36ec:	83 e0       	ldi	r24, 0x03	; 3
    36ee:	66 e0       	ldi	r22, 0x06	; 6
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    36f6:	05 c0       	rjmp	.+10     	; 0x3702 <Keypad_GetButtonStatePooling+0xbc>
    36f8:	83 e0       	ldi	r24, 0x03	; 3
    36fa:	67 e0       	ldi	r22, 0x07	; 7
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	28 2f       	mov	r18, r24
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	3e 83       	std	Y+6, r19	; 0x06
    370a:	2d 83       	std	Y+5, r18	; 0x05
    370c:	8d 81       	ldd	r24, Y+5	; 0x05
    370e:	9e 81       	ldd	r25, Y+6	; 0x06
    3710:	81 30       	cpi	r24, 0x01	; 1
    3712:	91 05       	cpc	r25, r1
    3714:	19 f1       	breq	.+70     	; 0x375c <Keypad_GetButtonStatePooling+0x116>
    3716:	2d 81       	ldd	r18, Y+5	; 0x05
    3718:	3e 81       	ldd	r19, Y+6	; 0x06
    371a:	22 30       	cpi	r18, 0x02	; 2
    371c:	31 05       	cpc	r19, r1
    371e:	2c f4       	brge	.+10     	; 0x372a <Keypad_GetButtonStatePooling+0xe4>
    3720:	8d 81       	ldd	r24, Y+5	; 0x05
    3722:	9e 81       	ldd	r25, Y+6	; 0x06
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	61 f0       	breq	.+24     	; 0x3740 <Keypad_GetButtonStatePooling+0xfa>
    3728:	42 c0       	rjmp	.+132    	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    372a:	2d 81       	ldd	r18, Y+5	; 0x05
    372c:	3e 81       	ldd	r19, Y+6	; 0x06
    372e:	22 30       	cpi	r18, 0x02	; 2
    3730:	31 05       	cpc	r19, r1
    3732:	11 f1       	breq	.+68     	; 0x3778 <Keypad_GetButtonStatePooling+0x132>
    3734:	8d 81       	ldd	r24, Y+5	; 0x05
    3736:	9e 81       	ldd	r25, Y+6	; 0x06
    3738:	83 30       	cpi	r24, 0x03	; 3
    373a:	91 05       	cpc	r25, r1
    373c:	59 f1       	breq	.+86     	; 0x3794 <Keypad_GetButtonStatePooling+0x14e>
    373e:	37 c0       	rjmp	.+110    	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    3740:	83 e0       	ldi	r24, 0x03	; 3
    3742:	60 e0       	ldi	r22, 0x00	; 0
    3744:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    3748:	88 23       	and	r24, r24
    374a:	89 f5       	brne	.+98     	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    374c:	1b 82       	std	Y+3, r1	; 0x03
    374e:	83 e0       	ldi	r24, 0x03	; 3
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    3756:	88 23       	and	r24, r24
    3758:	d1 f3       	breq	.-12     	; 0x374e <Keypad_GetButtonStatePooling+0x108>
    375a:	29 c0       	rjmp	.+82     	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	61 e0       	ldi	r22, 0x01	; 1
    3760:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    3764:	88 23       	and	r24, r24
    3766:	19 f5       	brne	.+70     	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    3768:	1b 82       	std	Y+3, r1	; 0x03
    376a:	83 e0       	ldi	r24, 0x03	; 3
    376c:	61 e0       	ldi	r22, 0x01	; 1
    376e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    3772:	88 23       	and	r24, r24
    3774:	d1 f3       	breq	.-12     	; 0x376a <Keypad_GetButtonStatePooling+0x124>
    3776:	1b c0       	rjmp	.+54     	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    3778:	83 e0       	ldi	r24, 0x03	; 3
    377a:	62 e0       	ldi	r22, 0x02	; 2
    377c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    3780:	88 23       	and	r24, r24
    3782:	a9 f4       	brne	.+42     	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    3784:	1b 82       	std	Y+3, r1	; 0x03
    3786:	83 e0       	ldi	r24, 0x03	; 3
    3788:	62 e0       	ldi	r22, 0x02	; 2
    378a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    378e:	88 23       	and	r24, r24
    3790:	d1 f3       	breq	.-12     	; 0x3786 <Keypad_GetButtonStatePooling+0x140>
    3792:	0d c0       	rjmp	.+26     	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    3794:	83 e0       	ldi	r24, 0x03	; 3
    3796:	63 e0       	ldi	r22, 0x03	; 3
    3798:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    379c:	88 23       	and	r24, r24
    379e:	39 f4       	brne	.+14     	; 0x37ae <Keypad_GetButtonStatePooling+0x168>
    37a0:	1b 82       	std	Y+3, r1	; 0x03
    37a2:	83 e0       	ldi	r24, 0x03	; 3
    37a4:	63 e0       	ldi	r22, 0x03	; 3
    37a6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    37aa:	88 23       	and	r24, r24
    37ac:	d1 f3       	breq	.-12     	; 0x37a2 <Keypad_GetButtonStatePooling+0x15c>
    37ae:	8b 81       	ldd	r24, Y+3	; 0x03
    37b0:	28 96       	adiw	r28, 0x08	; 8
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <Keypad_GetPressedButton>:
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	00 d0       	rcall	.+0      	; 0x37c8 <Keypad_GetPressedButton+0x6>
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	1a 82       	std	Y+2, r1	; 0x02
    37ce:	80 e1       	ldi	r24, 0x10	; 16
    37d0:	89 83       	std	Y+1, r24	; 0x01
    37d2:	1a 82       	std	Y+2, r1	; 0x02
    37d4:	0b c0       	rjmp	.+22     	; 0x37ec <Keypad_GetPressedButton+0x2a>
    37d6:	8a 81       	ldd	r24, Y+2	; 0x02
    37d8:	0e 94 23 1b 	call	0x3646	; 0x3646 <Keypad_GetButtonStatePooling>
    37dc:	88 23       	and	r24, r24
    37de:	19 f4       	brne	.+6      	; 0x37e6 <Keypad_GetPressedButton+0x24>
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	89 83       	std	Y+1, r24	; 0x01
    37e4:	06 c0       	rjmp	.+12     	; 0x37f2 <Keypad_GetPressedButton+0x30>
    37e6:	8a 81       	ldd	r24, Y+2	; 0x02
    37e8:	8f 5f       	subi	r24, 0xFF	; 255
    37ea:	8a 83       	std	Y+2, r24	; 0x02
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	80 31       	cpi	r24, 0x10	; 16
    37f0:	90 f3       	brcs	.-28     	; 0x37d6 <Keypad_GetPressedButton+0x14>
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	cf 91       	pop	r28
    37fa:	df 91       	pop	r29
    37fc:	08 95       	ret

000037fe <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    37fe:	df 93       	push	r29
    3800:	cf 93       	push	r28
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	2f 97       	sbiw	r28, 0x0f	; 15
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    3812:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    3814:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <LCD_InitPinsMode>
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	a0 ef       	ldi	r26, 0xF0	; 240
    381e:	b1 e4       	ldi	r27, 0x41	; 65
    3820:	8b 87       	std	Y+11, r24	; 0x0b
    3822:	9c 87       	std	Y+12, r25	; 0x0c
    3824:	ad 87       	std	Y+13, r26	; 0x0d
    3826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3828:	6b 85       	ldd	r22, Y+11	; 0x0b
    382a:	7c 85       	ldd	r23, Y+12	; 0x0c
    382c:	8d 85       	ldd	r24, Y+13	; 0x0d
    382e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	4a ef       	ldi	r20, 0xFA	; 250
    3836:	54 e4       	ldi	r21, 0x44	; 68
    3838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	8f 83       	std	Y+7, r24	; 0x07
    3842:	98 87       	std	Y+8, r25	; 0x08
    3844:	a9 87       	std	Y+9, r26	; 0x09
    3846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3848:	6f 81       	ldd	r22, Y+7	; 0x07
    384a:	78 85       	ldd	r23, Y+8	; 0x08
    384c:	89 85       	ldd	r24, Y+9	; 0x09
    384e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e8       	ldi	r20, 0x80	; 128
    3856:	5f e3       	ldi	r21, 0x3F	; 63
    3858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    385c:	88 23       	and	r24, r24
    385e:	2c f4       	brge	.+10     	; 0x386a <LCD_Init+0x6c>
		__ticks = 1;
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9e 83       	std	Y+6, r25	; 0x06
    3866:	8d 83       	std	Y+5, r24	; 0x05
    3868:	3f c0       	rjmp	.+126    	; 0x38e8 <LCD_Init+0xea>
	else if (__tmp > 65535)
    386a:	6f 81       	ldd	r22, Y+7	; 0x07
    386c:	78 85       	ldd	r23, Y+8	; 0x08
    386e:	89 85       	ldd	r24, Y+9	; 0x09
    3870:	9a 85       	ldd	r25, Y+10	; 0x0a
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	3f ef       	ldi	r19, 0xFF	; 255
    3876:	4f e7       	ldi	r20, 0x7F	; 127
    3878:	57 e4       	ldi	r21, 0x47	; 71
    387a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    387e:	18 16       	cp	r1, r24
    3880:	4c f5       	brge	.+82     	; 0x38d4 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3882:	6b 85       	ldd	r22, Y+11	; 0x0b
    3884:	7c 85       	ldd	r23, Y+12	; 0x0c
    3886:	8d 85       	ldd	r24, Y+13	; 0x0d
    3888:	9e 85       	ldd	r25, Y+14	; 0x0e
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	40 e2       	ldi	r20, 0x20	; 32
    3890:	51 e4       	ldi	r21, 0x41	; 65
    3892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	bc 01       	movw	r22, r24
    389c:	cd 01       	movw	r24, r26
    389e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	0f c0       	rjmp	.+30     	; 0x38ca <LCD_Init+0xcc>
    38ac:	88 ec       	ldi	r24, 0xC8	; 200
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	9c 83       	std	Y+4, r25	; 0x04
    38b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	9c 81       	ldd	r25, Y+4	; 0x04
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	f1 f7       	brne	.-4      	; 0x38b8 <LCD_Init+0xba>
    38bc:	9c 83       	std	Y+4, r25	; 0x04
    38be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c0:	8d 81       	ldd	r24, Y+5	; 0x05
    38c2:	9e 81       	ldd	r25, Y+6	; 0x06
    38c4:	01 97       	sbiw	r24, 0x01	; 1
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	69 f7       	brne	.-38     	; 0x38ac <LCD_Init+0xae>
    38d2:	14 c0       	rjmp	.+40     	; 0x38fc <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d4:	6f 81       	ldd	r22, Y+7	; 0x07
    38d6:	78 85       	ldd	r23, Y+8	; 0x08
    38d8:	89 85       	ldd	r24, Y+9	; 0x09
    38da:	9a 85       	ldd	r25, Y+10	; 0x0a
    38dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	9e 83       	std	Y+6, r25	; 0x06
    38e6:	8d 83       	std	Y+5, r24	; 0x05
    38e8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ea:	9e 81       	ldd	r25, Y+6	; 0x06
    38ec:	9a 83       	std	Y+2, r25	; 0x02
    38ee:	89 83       	std	Y+1, r24	; 0x01
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <LCD_Init+0xf6>
    38f8:	9a 83       	std	Y+2, r25	; 0x02
    38fa:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    38fc:	80 e3       	ldi	r24, 0x30	; 48
    38fe:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    3900:	8f 85       	ldd	r24, Y+15	; 0x0f
    3902:	88 60       	ori	r24, 0x08	; 8
    3904:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    3906:	8f 85       	ldd	r24, Y+15	; 0x0f
    3908:	84 60       	ori	r24, 0x04	; 4
    390a:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    390c:	8f 85       	ldd	r24, Y+15	; 0x0f
    390e:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000; 
    3912:	88 e0       	ldi	r24, 0x08	; 8
    3914:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    3916:	8f 85       	ldd	r24, Y+15	; 0x0f
    3918:	84 60       	ori	r24, 0x04	; 4
    391a:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    391c:	8f 85       	ldd	r24, Y+15	; 0x0f
    391e:	81 60       	ori	r24, 0x01	; 1
    3920:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    3922:	8f 85       	ldd	r24, Y+15	; 0x0f
    3924:	82 60       	ori	r24, 0x02	; 2
    3926:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    3928:	8f 85       	ldd	r24, Y+15	; 0x0f
    392a:	82 60       	ori	r24, 0x02	; 2
    392c:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    392e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3930:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <LCD_SendCommand>
}
    393a:	2f 96       	adiw	r28, 0x0f	; 15
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret

0000394c <LCD_Clear>:


void LCD_Clear (void) {
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <LCD_SendCommand>
}
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	0f 92       	push	r0
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <LCD_SendData>
}
    3972:	0f 90       	pop	r0
    3974:	cf 91       	pop	r28
    3976:	df 91       	pop	r29
    3978:	08 95       	ret

0000397a <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    397a:	df 93       	push	r29
    397c:	cf 93       	push	r28
    397e:	00 d0       	rcall	.+0      	; 0x3980 <LCD_DisplayString+0x6>
    3980:	0f 92       	push	r0
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	9b 83       	std	Y+3, r25	; 0x03
    3988:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    398a:	19 82       	std	Y+1, r1	; 0x01
    398c:	0e c0       	rjmp	.+28     	; 0x39aa <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	28 2f       	mov	r18, r24
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	8a 81       	ldd	r24, Y+2	; 0x02
    3996:	9b 81       	ldd	r25, Y+3	; 0x03
    3998:	fc 01       	movw	r30, r24
    399a:	e2 0f       	add	r30, r18
    399c:	f3 1f       	adc	r31, r19
    399e:	80 81       	ld	r24, Z
    39a0:	0e 94 b0 1c 	call	0x3960	; 0x3960 <LCD_DisplayCharacter>
        i++;
    39a4:	89 81       	ldd	r24, Y+1	; 0x01
    39a6:	8f 5f       	subi	r24, 0xFF	; 255
    39a8:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	28 2f       	mov	r18, r24
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	9b 81       	ldd	r25, Y+3	; 0x03
    39b4:	fc 01       	movw	r30, r24
    39b6:	e2 0f       	add	r30, r18
    39b8:	f3 1f       	adc	r31, r19
    39ba:	80 81       	ld	r24, Z
    39bc:	88 23       	and	r24, r24
    39be:	39 f7       	brne	.-50     	; 0x398e <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    39cc:	df 93       	push	r29
    39ce:	cf 93       	push	r28
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <LCD_SetCursorPosition+0x6>
    39d2:	0f 92       	push	r0
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	8a 83       	std	Y+2, r24	; 0x02
    39da:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	88 2f       	mov	r24, r24
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	00 24       	eor	r0, r0
    39e4:	96 95       	lsr	r25
    39e6:	87 95       	ror	r24
    39e8:	07 94       	ror	r0
    39ea:	96 95       	lsr	r25
    39ec:	87 95       	ror	r24
    39ee:	07 94       	ror	r0
    39f0:	98 2f       	mov	r25, r24
    39f2:	80 2d       	mov	r24, r0
    39f4:	98 2f       	mov	r25, r24
    39f6:	8b 81       	ldd	r24, Y+3	; 0x03
    39f8:	89 0f       	add	r24, r25
    39fa:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	80 68       	ori	r24, 0x80	; 128
    3a00:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <LCD_SendCommand>
}
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	cf 91       	pop	r28
    3a10:	df 91       	pop	r29
    3a12:	08 95       	ret

00003a14 <LCD_DisplayNumber>:

void LCD_DisplayNumber (s32 number) {
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	00 d0       	rcall	.+0      	; 0x3a1a <LCD_DisplayNumber+0x6>
    3a1a:	00 d0       	rcall	.+0      	; 0x3a1c <LCD_DisplayNumber+0x8>
    3a1c:	00 d0       	rcall	.+0      	; 0x3a1e <LCD_DisplayNumber+0xa>
    3a1e:	cd b7       	in	r28, 0x3d	; 61
    3a20:	de b7       	in	r29, 0x3e	; 62
    3a22:	9e 83       	std	Y+6, r25	; 0x06
    3a24:	8d 83       	std	Y+5, r24	; 0x05
    u32 reversed_number = 0;
    3a26:	1c 82       	std	Y+4, r1	; 0x04
    3a28:	1b 82       	std	Y+3, r1	; 0x03
    u8 digits = 0;
    3a2a:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a30:	99 23       	and	r25, r25
    3a32:	5c f4       	brge	.+22     	; 0x3a4a <LCD_DisplayNumber+0x36>
        number = number*-1;
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	9e 81       	ldd	r25, Y+6	; 0x06
    3a38:	90 95       	com	r25
    3a3a:	81 95       	neg	r24
    3a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3e:	9e 83       	std	Y+6, r25	; 0x06
    3a40:	8d 83       	std	Y+5, r24	; 0x05
        LCD_DisplayCharacter('-');
    3a42:	8d e2       	ldi	r24, 0x2D	; 45
    3a44:	0e 94 b0 1c 	call	0x3960	; 0x3960 <LCD_DisplayCharacter>
    3a48:	2d c0       	rjmp	.+90     	; 0x3aa4 <LCD_DisplayNumber+0x90>
    }
    else if (number == 0) {
    3a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	49 f5       	brne	.+82     	; 0x3aa4 <LCD_DisplayNumber+0x90>
        LCD_DisplayCharacter('0');
    3a52:	80 e3       	ldi	r24, 0x30	; 48
    3a54:	0e 94 b0 1c 	call	0x3960	; 0x3960 <LCD_DisplayCharacter>
    3a58:	25 c0       	rjmp	.+74     	; 0x3aa4 <LCD_DisplayNumber+0x90>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    3a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5e:	9c 01       	movw	r18, r24
    3a60:	22 0f       	add	r18, r18
    3a62:	33 1f       	adc	r19, r19
    3a64:	c9 01       	movw	r24, r18
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	88 0f       	add	r24, r24
    3a6c:	99 1f       	adc	r25, r25
    3a6e:	f9 01       	movw	r30, r18
    3a70:	e8 0f       	add	r30, r24
    3a72:	f9 1f       	adc	r31, r25
    3a74:	8d 81       	ldd	r24, Y+5	; 0x05
    3a76:	9e 81       	ldd	r25, Y+6	; 0x06
    3a78:	2a e0       	ldi	r18, 0x0A	; 10
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	b9 01       	movw	r22, r18
    3a7e:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    3a82:	8e 0f       	add	r24, r30
    3a84:	9f 1f       	adc	r25, r31
    3a86:	9c 83       	std	Y+4, r25	; 0x04
    3a88:	8b 83       	std	Y+3, r24	; 0x03
        number = number / 10;
    3a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8e:	2a e0       	ldi	r18, 0x0A	; 10
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	b9 01       	movw	r22, r18
    3a94:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    3a98:	cb 01       	movw	r24, r22
    3a9a:	9e 83       	std	Y+6, r25	; 0x06
    3a9c:	8d 83       	std	Y+5, r24	; 0x05
        digits++;
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	8f 5f       	subi	r24, 0xFF	; 255
    3aa2:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	b9 f6       	brne	.-82     	; 0x3a5a <LCD_DisplayNumber+0x46>
    3aac:	1b c0       	rjmp	.+54     	; 0x3ae4 <LCD_DisplayNumber+0xd0>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    3aae:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab2:	2a e0       	ldi	r18, 0x0A	; 10
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	b9 01       	movw	r22, r18
    3ab8:	0e 94 a1 32 	call	0x6542	; 0x6542 <__udivmodhi4>
    3abc:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	80 5d       	subi	r24, 0xD0	; 208
    3ac2:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	0e 94 b0 1c 	call	0x3960	; 0x3960 <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    3aca:	8b 81       	ldd	r24, Y+3	; 0x03
    3acc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ace:	2a e0       	ldi	r18, 0x0A	; 10
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	b9 01       	movw	r22, r18
    3ad4:	0e 94 a1 32 	call	0x6542	; 0x6542 <__udivmodhi4>
    3ad8:	cb 01       	movw	r24, r22
    3ada:	9c 83       	std	Y+4, r25	; 0x04
    3adc:	8b 83       	std	Y+3, r24	; 0x03
        digits--;
    3ade:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae0:	81 50       	subi	r24, 0x01	; 1
    3ae2:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    3ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	09 f7       	brne	.-62     	; 0x3aae <LCD_DisplayNumber+0x9a>
    3aec:	06 c0       	rjmp	.+12     	; 0x3afa <LCD_DisplayNumber+0xe6>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    3aee:	80 e3       	ldi	r24, 0x30	; 48
    3af0:	0e 94 b0 1c 	call	0x3960	; 0x3960 <LCD_DisplayCharacter>
        digits--;
    3af4:	8a 81       	ldd	r24, Y+2	; 0x02
    3af6:	81 50       	subi	r24, 0x01	; 1
    3af8:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    3afa:	8a 81       	ldd	r24, Y+2	; 0x02
    3afc:	88 23       	and	r24, r24
    3afe:	b9 f7       	brne	.-18     	; 0x3aee <LCD_DisplayNumber+0xda>
        LCD_DisplayCharacter('0');
        digits--;
    }
    
}
    3b00:	26 96       	adiw	r28, 0x06	; 6
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	00 d0       	rcall	.+0      	; 0x3b18 <LCD_ShiftLeft+0x6>
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3b1e:	19 82       	std	Y+1, r1	; 0x01
    3b20:	06 c0       	rjmp	.+12     	; 0x3b2e <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    3b22:	88 e1       	ldi	r24, 0x18	; 24
    3b24:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <LCD_SendCommand>
    
}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	8f 5f       	subi	r24, 0xFF	; 255
    3b2c:	89 83       	std	Y+1, r24	; 0x01
    3b2e:	99 81       	ldd	r25, Y+1	; 0x01
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	98 17       	cp	r25, r24
    3b34:	b0 f3       	brcs	.-20     	; 0x3b22 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    3b40:	df 93       	push	r29
    3b42:	cf 93       	push	r28
    3b44:	00 d0       	rcall	.+0      	; 0x3b46 <LCD_ShiftRight+0x6>
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3b4c:	19 82       	std	Y+1, r1	; 0x01
    3b4e:	06 c0       	rjmp	.+12     	; 0x3b5c <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    3b50:	8c e1       	ldi	r24, 0x1C	; 28
    3b52:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	8f 5f       	subi	r24, 0xFF	; 255
    3b5a:	89 83       	std	Y+1, r24	; 0x01
    3b5c:	99 81       	ldd	r25, Y+1	; 0x01
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	98 17       	cp	r25, r24
    3b62:	b0 f3       	brcs	.-20     	; 0x3b50 <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	2f 97       	sbiw	r28, 0x0f	; 15
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	63 e0       	ldi	r22, 0x03	; 3
    3b88:	40 e0       	ldi	r20, 0x00	; 0
    3b8a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3b8e:	83 e0       	ldi	r24, 0x03	; 3
    3b90:	66 e0       	ldi	r22, 0x06	; 6
    3b92:	40 e0       	ldi	r20, 0x00	; 0
    3b94:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    3b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b9a:	98 2f       	mov	r25, r24
    3b9c:	91 70       	andi	r25, 0x01	; 1
    3b9e:	82 e0       	ldi	r24, 0x02	; 2
    3ba0:	62 e0       	ldi	r22, 0x02	; 2
    3ba2:	49 2f       	mov	r20, r25
    3ba4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    3ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3baa:	86 95       	lsr	r24
    3bac:	98 2f       	mov	r25, r24
    3bae:	91 70       	andi	r25, 0x01	; 1
    3bb0:	82 e0       	ldi	r24, 0x02	; 2
    3bb2:	63 e0       	ldi	r22, 0x03	; 3
    3bb4:	49 2f       	mov	r20, r25
    3bb6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    3bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bbc:	86 95       	lsr	r24
    3bbe:	86 95       	lsr	r24
    3bc0:	98 2f       	mov	r25, r24
    3bc2:	91 70       	andi	r25, 0x01	; 1
    3bc4:	82 e0       	ldi	r24, 0x02	; 2
    3bc6:	64 e0       	ldi	r22, 0x04	; 4
    3bc8:	49 2f       	mov	r20, r25
    3bca:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    3bce:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd0:	86 95       	lsr	r24
    3bd2:	86 95       	lsr	r24
    3bd4:	86 95       	lsr	r24
    3bd6:	98 2f       	mov	r25, r24
    3bd8:	91 70       	andi	r25, 0x01	; 1
    3bda:	82 e0       	ldi	r24, 0x02	; 2
    3bdc:	65 e0       	ldi	r22, 0x05	; 5
    3bde:	49 2f       	mov	r20, r25
    3be0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    3be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be6:	82 95       	swap	r24
    3be8:	8f 70       	andi	r24, 0x0F	; 15
    3bea:	98 2f       	mov	r25, r24
    3bec:	91 70       	andi	r25, 0x01	; 1
    3bee:	82 e0       	ldi	r24, 0x02	; 2
    3bf0:	66 e0       	ldi	r22, 0x06	; 6
    3bf2:	49 2f       	mov	r20, r25
    3bf4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    3bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bfa:	82 95       	swap	r24
    3bfc:	86 95       	lsr	r24
    3bfe:	87 70       	andi	r24, 0x07	; 7
    3c00:	98 2f       	mov	r25, r24
    3c02:	91 70       	andi	r25, 0x01	; 1
    3c04:	82 e0       	ldi	r24, 0x02	; 2
    3c06:	67 e0       	ldi	r22, 0x07	; 7
    3c08:	49 2f       	mov	r20, r25
    3c0a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    3c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c10:	82 95       	swap	r24
    3c12:	86 95       	lsr	r24
    3c14:	86 95       	lsr	r24
    3c16:	83 70       	andi	r24, 0x03	; 3
    3c18:	98 2f       	mov	r25, r24
    3c1a:	91 70       	andi	r25, 0x01	; 1
    3c1c:	83 e0       	ldi	r24, 0x03	; 3
    3c1e:	63 e0       	ldi	r22, 0x03	; 3
    3c20:	49 2f       	mov	r20, r25
    3c22:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    3c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c28:	98 2f       	mov	r25, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	99 27       	eor	r25, r25
    3c2e:	99 1f       	adc	r25, r25
    3c30:	83 e0       	ldi	r24, 0x03	; 3
    3c32:	64 e0       	ldi	r22, 0x04	; 4
    3c34:	49 2f       	mov	r20, r25
    3c36:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3c3a:	83 e0       	ldi	r24, 0x03	; 3
    3c3c:	65 e0       	ldi	r22, 0x05	; 5
    3c3e:	41 e0       	ldi	r20, 0x01	; 1
    3c40:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	a0 e0       	ldi	r26, 0x00	; 0
    3c4a:	b0 e4       	ldi	r27, 0x40	; 64
    3c4c:	8b 87       	std	Y+11, r24	; 0x0b
    3c4e:	9c 87       	std	Y+12, r25	; 0x0c
    3c50:	ad 87       	std	Y+13, r26	; 0x0d
    3c52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	4a ef       	ldi	r20, 0xFA	; 250
    3c62:	54 e4       	ldi	r21, 0x44	; 68
    3c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	8f 83       	std	Y+7, r24	; 0x07
    3c6e:	98 87       	std	Y+8, r25	; 0x08
    3c70:	a9 87       	std	Y+9, r26	; 0x09
    3c72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c74:	6f 81       	ldd	r22, Y+7	; 0x07
    3c76:	78 85       	ldd	r23, Y+8	; 0x08
    3c78:	89 85       	ldd	r24, Y+9	; 0x09
    3c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	40 e8       	ldi	r20, 0x80	; 128
    3c82:	5f e3       	ldi	r21, 0x3F	; 63
    3c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c88:	88 23       	and	r24, r24
    3c8a:	2c f4       	brge	.+10     	; 0x3c96 <LCD_SendCommand+0x128>
		__ticks = 1;
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	3f c0       	rjmp	.+126    	; 0x3d14 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    3c96:	6f 81       	ldd	r22, Y+7	; 0x07
    3c98:	78 85       	ldd	r23, Y+8	; 0x08
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	3f ef       	ldi	r19, 0xFF	; 255
    3ca2:	4f e7       	ldi	r20, 0x7F	; 127
    3ca4:	57 e4       	ldi	r21, 0x47	; 71
    3ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3caa:	18 16       	cp	r1, r24
    3cac:	4c f5       	brge	.+82     	; 0x3d00 <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e2       	ldi	r20, 0x20	; 32
    3cbc:	51 e4       	ldi	r21, 0x41	; 65
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	cd 01       	movw	r24, r26
    3cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	9e 83       	std	Y+6, r25	; 0x06
    3cd4:	8d 83       	std	Y+5, r24	; 0x05
    3cd6:	0f c0       	rjmp	.+30     	; 0x3cf6 <LCD_SendCommand+0x188>
    3cd8:	88 ec       	ldi	r24, 0xC8	; 200
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	9c 83       	std	Y+4, r25	; 0x04
    3cde:	8b 83       	std	Y+3, r24	; 0x03
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	f1 f7       	brne	.-4      	; 0x3ce4 <LCD_SendCommand+0x176>
    3ce8:	9c 83       	std	Y+4, r25	; 0x04
    3cea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cec:	8d 81       	ldd	r24, Y+5	; 0x05
    3cee:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	9e 83       	std	Y+6, r25	; 0x06
    3cf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	69 f7       	brne	.-38     	; 0x3cd8 <LCD_SendCommand+0x16a>
    3cfe:	14 c0       	rjmp	.+40     	; 0x3d28 <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d00:	6f 81       	ldd	r22, Y+7	; 0x07
    3d02:	78 85       	ldd	r23, Y+8	; 0x08
    3d04:	89 85       	ldd	r24, Y+9	; 0x09
    3d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	9e 83       	std	Y+6, r25	; 0x06
    3d12:	8d 83       	std	Y+5, r24	; 0x05
    3d14:	8d 81       	ldd	r24, Y+5	; 0x05
    3d16:	9e 81       	ldd	r25, Y+6	; 0x06
    3d18:	9a 83       	std	Y+2, r25	; 0x02
    3d1a:	89 83       	std	Y+1, r24	; 0x01
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <LCD_SendCommand+0x1b2>
    3d24:	9a 83       	std	Y+2, r25	; 0x02
    3d26:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3d28:	83 e0       	ldi	r24, 0x03	; 3
    3d2a:	65 e0       	ldi	r22, 0x05	; 5
    3d2c:	40 e0       	ldi	r20, 0x00	; 0
    3d2e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
}
    3d32:	2f 96       	adiw	r28, 0x0f	; 15
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
    3d4c:	2f 97       	sbiw	r28, 0x0f	; 15
    3d4e:	0f b6       	in	r0, 0x3f	; 63
    3d50:	f8 94       	cli
    3d52:	de bf       	out	0x3e, r29	; 62
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	cd bf       	out	0x3d, r28	; 61
    3d58:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	63 e0       	ldi	r22, 0x03	; 3
    3d5e:	41 e0       	ldi	r20, 0x01	; 1
    3d60:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3d64:	83 e0       	ldi	r24, 0x03	; 3
    3d66:	66 e0       	ldi	r22, 0x06	; 6
    3d68:	40 e0       	ldi	r20, 0x00	; 0
    3d6a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    3d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d70:	98 2f       	mov	r25, r24
    3d72:	91 70       	andi	r25, 0x01	; 1
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	62 e0       	ldi	r22, 0x02	; 2
    3d78:	49 2f       	mov	r20, r25
    3d7a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    3d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d80:	86 95       	lsr	r24
    3d82:	98 2f       	mov	r25, r24
    3d84:	91 70       	andi	r25, 0x01	; 1
    3d86:	82 e0       	ldi	r24, 0x02	; 2
    3d88:	63 e0       	ldi	r22, 0x03	; 3
    3d8a:	49 2f       	mov	r20, r25
    3d8c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    3d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d92:	86 95       	lsr	r24
    3d94:	86 95       	lsr	r24
    3d96:	98 2f       	mov	r25, r24
    3d98:	91 70       	andi	r25, 0x01	; 1
    3d9a:	82 e0       	ldi	r24, 0x02	; 2
    3d9c:	64 e0       	ldi	r22, 0x04	; 4
    3d9e:	49 2f       	mov	r20, r25
    3da0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    3da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da6:	86 95       	lsr	r24
    3da8:	86 95       	lsr	r24
    3daa:	86 95       	lsr	r24
    3dac:	98 2f       	mov	r25, r24
    3dae:	91 70       	andi	r25, 0x01	; 1
    3db0:	82 e0       	ldi	r24, 0x02	; 2
    3db2:	65 e0       	ldi	r22, 0x05	; 5
    3db4:	49 2f       	mov	r20, r25
    3db6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    3dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dbc:	82 95       	swap	r24
    3dbe:	8f 70       	andi	r24, 0x0F	; 15
    3dc0:	98 2f       	mov	r25, r24
    3dc2:	91 70       	andi	r25, 0x01	; 1
    3dc4:	82 e0       	ldi	r24, 0x02	; 2
    3dc6:	66 e0       	ldi	r22, 0x06	; 6
    3dc8:	49 2f       	mov	r20, r25
    3dca:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    3dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dd0:	82 95       	swap	r24
    3dd2:	86 95       	lsr	r24
    3dd4:	87 70       	andi	r24, 0x07	; 7
    3dd6:	98 2f       	mov	r25, r24
    3dd8:	91 70       	andi	r25, 0x01	; 1
    3dda:	82 e0       	ldi	r24, 0x02	; 2
    3ddc:	67 e0       	ldi	r22, 0x07	; 7
    3dde:	49 2f       	mov	r20, r25
    3de0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    3de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3de6:	82 95       	swap	r24
    3de8:	86 95       	lsr	r24
    3dea:	86 95       	lsr	r24
    3dec:	83 70       	andi	r24, 0x03	; 3
    3dee:	98 2f       	mov	r25, r24
    3df0:	91 70       	andi	r25, 0x01	; 1
    3df2:	83 e0       	ldi	r24, 0x03	; 3
    3df4:	63 e0       	ldi	r22, 0x03	; 3
    3df6:	49 2f       	mov	r20, r25
    3df8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    3dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dfe:	98 2f       	mov	r25, r24
    3e00:	99 1f       	adc	r25, r25
    3e02:	99 27       	eor	r25, r25
    3e04:	99 1f       	adc	r25, r25
    3e06:	83 e0       	ldi	r24, 0x03	; 3
    3e08:	64 e0       	ldi	r22, 0x04	; 4
    3e0a:	49 2f       	mov	r20, r25
    3e0c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3e10:	83 e0       	ldi	r24, 0x03	; 3
    3e12:	65 e0       	ldi	r22, 0x05	; 5
    3e14:	41 e0       	ldi	r20, 0x01	; 1
    3e16:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	a0 e0       	ldi	r26, 0x00	; 0
    3e20:	b0 e4       	ldi	r27, 0x40	; 64
    3e22:	8b 87       	std	Y+11, r24	; 0x0b
    3e24:	9c 87       	std	Y+12, r25	; 0x0c
    3e26:	ad 87       	std	Y+13, r26	; 0x0d
    3e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	4a ef       	ldi	r20, 0xFA	; 250
    3e38:	54 e4       	ldi	r21, 0x44	; 68
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	8f 83       	std	Y+7, r24	; 0x07
    3e44:	98 87       	std	Y+8, r25	; 0x08
    3e46:	a9 87       	std	Y+9, r26	; 0x09
    3e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e4c:	78 85       	ldd	r23, Y+8	; 0x08
    3e4e:	89 85       	ldd	r24, Y+9	; 0x09
    3e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	40 e8       	ldi	r20, 0x80	; 128
    3e58:	5f e3       	ldi	r21, 0x3F	; 63
    3e5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e5e:	88 23       	and	r24, r24
    3e60:	2c f4       	brge	.+10     	; 0x3e6c <LCD_SendData+0x128>
		__ticks = 1;
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	9e 83       	std	Y+6, r25	; 0x06
    3e68:	8d 83       	std	Y+5, r24	; 0x05
    3e6a:	3f c0       	rjmp	.+126    	; 0x3eea <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    3e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6e:	78 85       	ldd	r23, Y+8	; 0x08
    3e70:	89 85       	ldd	r24, Y+9	; 0x09
    3e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	3f ef       	ldi	r19, 0xFF	; 255
    3e78:	4f e7       	ldi	r20, 0x7F	; 127
    3e7a:	57 e4       	ldi	r21, 0x47	; 71
    3e7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e80:	18 16       	cp	r1, r24
    3e82:	4c f5       	brge	.+82     	; 0x3ed6 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e2       	ldi	r20, 0x20	; 32
    3e92:	51 e4       	ldi	r21, 0x41	; 65
    3e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	bc 01       	movw	r22, r24
    3e9e:	cd 01       	movw	r24, r26
    3ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	9e 83       	std	Y+6, r25	; 0x06
    3eaa:	8d 83       	std	Y+5, r24	; 0x05
    3eac:	0f c0       	rjmp	.+30     	; 0x3ecc <LCD_SendData+0x188>
    3eae:	88 ec       	ldi	r24, 0xC8	; 200
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	9c 83       	std	Y+4, r25	; 0x04
    3eb4:	8b 83       	std	Y+3, r24	; 0x03
    3eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eba:	01 97       	sbiw	r24, 0x01	; 1
    3ebc:	f1 f7       	brne	.-4      	; 0x3eba <LCD_SendData+0x176>
    3ebe:	9c 83       	std	Y+4, r25	; 0x04
    3ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ece:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed0:	00 97       	sbiw	r24, 0x00	; 0
    3ed2:	69 f7       	brne	.-38     	; 0x3eae <LCD_SendData+0x16a>
    3ed4:	14 c0       	rjmp	.+40     	; 0x3efe <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed8:	78 85       	ldd	r23, Y+8	; 0x08
    3eda:	89 85       	ldd	r24, Y+9	; 0x09
    3edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	9e 83       	std	Y+6, r25	; 0x06
    3ee8:	8d 83       	std	Y+5, r24	; 0x05
    3eea:	8d 81       	ldd	r24, Y+5	; 0x05
    3eec:	9e 81       	ldd	r25, Y+6	; 0x06
    3eee:	9a 83       	std	Y+2, r25	; 0x02
    3ef0:	89 83       	std	Y+1, r24	; 0x01
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	f1 f7       	brne	.-4      	; 0x3ef6 <LCD_SendData+0x1b2>
    3efa:	9a 83       	std	Y+2, r25	; 0x02
    3efc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3efe:	83 e0       	ldi	r24, 0x03	; 3
    3f00:	65 e0       	ldi	r22, 0x05	; 5
    3f02:	40 e0       	ldi	r20, 0x00	; 0
    3f04:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
}
    3f08:	2f 96       	adiw	r28, 0x0f	; 15
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	cf 91       	pop	r28
    3f16:	df 91       	pop	r29
    3f18:	08 95       	ret

00003f1a <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    3f1a:	df 93       	push	r29
    3f1c:	cf 93       	push	r28
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	63 e0       	ldi	r22, 0x03	; 3
    3f26:	42 e0       	ldi	r20, 0x02	; 2
    3f28:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    3f2c:	83 e0       	ldi	r24, 0x03	; 3
    3f2e:	66 e0       	ldi	r22, 0x06	; 6
    3f30:	42 e0       	ldi	r20, 0x02	; 2
    3f32:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    3f36:	83 e0       	ldi	r24, 0x03	; 3
    3f38:	65 e0       	ldi	r22, 0x05	; 5
    3f3a:	42 e0       	ldi	r20, 0x02	; 2
    3f3c:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    3f40:	82 e0       	ldi	r24, 0x02	; 2
    3f42:	62 e0       	ldi	r22, 0x02	; 2
    3f44:	42 e0       	ldi	r20, 0x02	; 2
    3f46:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    3f4a:	82 e0       	ldi	r24, 0x02	; 2
    3f4c:	63 e0       	ldi	r22, 0x03	; 3
    3f4e:	42 e0       	ldi	r20, 0x02	; 2
    3f50:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    3f54:	82 e0       	ldi	r24, 0x02	; 2
    3f56:	64 e0       	ldi	r22, 0x04	; 4
    3f58:	42 e0       	ldi	r20, 0x02	; 2
    3f5a:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    3f5e:	82 e0       	ldi	r24, 0x02	; 2
    3f60:	65 e0       	ldi	r22, 0x05	; 5
    3f62:	42 e0       	ldi	r20, 0x02	; 2
    3f64:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    3f68:	82 e0       	ldi	r24, 0x02	; 2
    3f6a:	66 e0       	ldi	r22, 0x06	; 6
    3f6c:	42 e0       	ldi	r20, 0x02	; 2
    3f6e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	67 e0       	ldi	r22, 0x07	; 7
    3f76:	42 e0       	ldi	r20, 0x02	; 2
    3f78:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    3f7c:	83 e0       	ldi	r24, 0x03	; 3
    3f7e:	63 e0       	ldi	r22, 0x03	; 3
    3f80:	42 e0       	ldi	r20, 0x02	; 2
    3f82:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    3f86:	83 e0       	ldi	r24, 0x03	; 3
    3f88:	64 e0       	ldi	r22, 0x04	; 4
    3f8a:	42 e0       	ldi	r20, 0x02	; 2
    3f8c:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
}
    3f90:	cf 91       	pop	r28
    3f92:	df 91       	pop	r29
    3f94:	08 95       	ret

00003f96 <SPI_Init>:
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	ad e2       	ldi	r26, 0x2D	; 45
    3fa0:	b0 e0       	ldi	r27, 0x00	; 0
    3fa2:	ed e2       	ldi	r30, 0x2D	; 45
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	80 81       	ld	r24, Z
    3fa8:	80 62       	ori	r24, 0x20	; 32
    3faa:	8c 93       	st	X, r24
    3fac:	ad e2       	ldi	r26, 0x2D	; 45
    3fae:	b0 e0       	ldi	r27, 0x00	; 0
    3fb0:	ed e2       	ldi	r30, 0x2D	; 45
    3fb2:	f0 e0       	ldi	r31, 0x00	; 0
    3fb4:	80 81       	ld	r24, Z
    3fb6:	8f 7e       	andi	r24, 0xEF	; 239
    3fb8:	8c 93       	st	X, r24
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	65 e0       	ldi	r22, 0x05	; 5
    3fbe:	40 e0       	ldi	r20, 0x00	; 0
    3fc0:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    3fc6:	64 e0       	ldi	r22, 0x04	; 4
    3fc8:	40 e0       	ldi	r20, 0x00	; 0
    3fca:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	67 e0       	ldi	r22, 0x07	; 7
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	66 e0       	ldi	r22, 0x06	; 6
    3fdc:	42 e0       	ldi	r20, 0x02	; 2
    3fde:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    3fe2:	ad e2       	ldi	r26, 0x2D	; 45
    3fe4:	b0 e0       	ldi	r27, 0x00	; 0
    3fe6:	ed e2       	ldi	r30, 0x2D	; 45
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	80 81       	ld	r24, Z
    3fec:	80 64       	ori	r24, 0x40	; 64
    3fee:	8c 93       	st	X, r24
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <SPI_Send_Data>:
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	0f 92       	push	r0
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	89 83       	std	Y+1, r24	; 0x01
    4002:	ef e2       	ldi	r30, 0x2F	; 47
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	80 83       	st	Z, r24
    400a:	ee e2       	ldi	r30, 0x2E	; 46
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	80 81       	ld	r24, Z
    4010:	88 23       	and	r24, r24
    4012:	dc f7       	brge	.-10     	; 0x400a <SPI_Send_Data+0x14>
    4014:	0f 90       	pop	r0
    4016:	cf 91       	pop	r28
    4018:	df 91       	pop	r29
    401a:	08 95       	ret

0000401c <SPI_Recieve_Data>:
    401c:	df 93       	push	r29
    401e:	cf 93       	push	r28
    4020:	cd b7       	in	r28, 0x3d	; 61
    4022:	de b7       	in	r29, 0x3e	; 62
    4024:	ee e2       	ldi	r30, 0x2E	; 46
    4026:	f0 e0       	ldi	r31, 0x00	; 0
    4028:	80 81       	ld	r24, Z
    402a:	88 23       	and	r24, r24
    402c:	dc f7       	brge	.-10     	; 0x4024 <SPI_Recieve_Data+0x8>
    402e:	ef e2       	ldi	r30, 0x2F	; 47
    4030:	f0 e0       	ldi	r31, 0x00	; 0
    4032:	80 81       	ld	r24, Z
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	08 95       	ret

0000403a <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	66 e0       	ldi	r22, 0x06	; 6
    4046:	42 e0       	ldi	r20, 0x02	; 2
    4048:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	65 e0       	ldi	r22, 0x05	; 5
    4050:	42 e0       	ldi	r20, 0x02	; 2
    4052:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	64 e0       	ldi	r22, 0x04	; 4
    405a:	42 e0       	ldi	r20, 0x02	; 2
    405c:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	67 e0       	ldi	r22, 0x07	; 7
    4064:	42 e0       	ldi	r20, 0x02	; 2
    4066:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	62 e0       	ldi	r22, 0x02	; 2
    406e:	42 e0       	ldi	r20, 0x02	; 2
    4070:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	61 e0       	ldi	r22, 0x01	; 1
    4078:	42 e0       	ldi	r20, 0x02	; 2
    407a:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	60 e0       	ldi	r22, 0x00	; 0
    4082:	42 e0       	ldi	r20, 0x02	; 2
    4084:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>

}
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	00 d0       	rcall	.+0      	; 0x4094 <SSD_Write+0x6>
    4094:	0f 92       	push	r0
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
    409a:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	28 2f       	mov	r18, r24
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	3b 83       	std	Y+3, r19	; 0x03
    40a4:	2a 83       	std	Y+2, r18	; 0x02
    40a6:	8a 81       	ldd	r24, Y+2	; 0x02
    40a8:	9b 81       	ldd	r25, Y+3	; 0x03
    40aa:	84 30       	cpi	r24, 0x04	; 4
    40ac:	91 05       	cpc	r25, r1
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <SSD_Write+0x24>
    40b0:	d7 c0       	rjmp	.+430    	; 0x4260 <SSD_Write+0x1d2>
    40b2:	2a 81       	ldd	r18, Y+2	; 0x02
    40b4:	3b 81       	ldd	r19, Y+3	; 0x03
    40b6:	25 30       	cpi	r18, 0x05	; 5
    40b8:	31 05       	cpc	r19, r1
    40ba:	ec f4       	brge	.+58     	; 0x40f6 <SSD_Write+0x68>
    40bc:	8a 81       	ldd	r24, Y+2	; 0x02
    40be:	9b 81       	ldd	r25, Y+3	; 0x03
    40c0:	81 30       	cpi	r24, 0x01	; 1
    40c2:	91 05       	cpc	r25, r1
    40c4:	09 f4       	brne	.+2      	; 0x40c8 <SSD_Write+0x3a>
    40c6:	60 c0       	rjmp	.+192    	; 0x4188 <SSD_Write+0xfa>
    40c8:	2a 81       	ldd	r18, Y+2	; 0x02
    40ca:	3b 81       	ldd	r19, Y+3	; 0x03
    40cc:	22 30       	cpi	r18, 0x02	; 2
    40ce:	31 05       	cpc	r19, r1
    40d0:	2c f4       	brge	.+10     	; 0x40dc <SSD_Write+0x4e>
    40d2:	8a 81       	ldd	r24, Y+2	; 0x02
    40d4:	9b 81       	ldd	r25, Y+3	; 0x03
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	99 f1       	breq	.+102    	; 0x4140 <SSD_Write+0xb2>
    40da:	9a c1       	rjmp	.+820    	; 0x4410 <SSD_Write+0x382>
    40dc:	2a 81       	ldd	r18, Y+2	; 0x02
    40de:	3b 81       	ldd	r19, Y+3	; 0x03
    40e0:	22 30       	cpi	r18, 0x02	; 2
    40e2:	31 05       	cpc	r19, r1
    40e4:	09 f4       	brne	.+2      	; 0x40e8 <SSD_Write+0x5a>
    40e6:	74 c0       	rjmp	.+232    	; 0x41d0 <SSD_Write+0x142>
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	9b 81       	ldd	r25, Y+3	; 0x03
    40ec:	83 30       	cpi	r24, 0x03	; 3
    40ee:	91 05       	cpc	r25, r1
    40f0:	09 f4       	brne	.+2      	; 0x40f4 <SSD_Write+0x66>
    40f2:	92 c0       	rjmp	.+292    	; 0x4218 <SSD_Write+0x18a>
    40f4:	8d c1       	rjmp	.+794    	; 0x4410 <SSD_Write+0x382>
    40f6:	2a 81       	ldd	r18, Y+2	; 0x02
    40f8:	3b 81       	ldd	r19, Y+3	; 0x03
    40fa:	27 30       	cpi	r18, 0x07	; 7
    40fc:	31 05       	cpc	r19, r1
    40fe:	09 f4       	brne	.+2      	; 0x4102 <SSD_Write+0x74>
    4100:	1b c1       	rjmp	.+566    	; 0x4338 <SSD_Write+0x2aa>
    4102:	8a 81       	ldd	r24, Y+2	; 0x02
    4104:	9b 81       	ldd	r25, Y+3	; 0x03
    4106:	88 30       	cpi	r24, 0x08	; 8
    4108:	91 05       	cpc	r25, r1
    410a:	6c f4       	brge	.+26     	; 0x4126 <SSD_Write+0x98>
    410c:	2a 81       	ldd	r18, Y+2	; 0x02
    410e:	3b 81       	ldd	r19, Y+3	; 0x03
    4110:	25 30       	cpi	r18, 0x05	; 5
    4112:	31 05       	cpc	r19, r1
    4114:	09 f4       	brne	.+2      	; 0x4118 <SSD_Write+0x8a>
    4116:	c8 c0       	rjmp	.+400    	; 0x42a8 <SSD_Write+0x21a>
    4118:	8a 81       	ldd	r24, Y+2	; 0x02
    411a:	9b 81       	ldd	r25, Y+3	; 0x03
    411c:	86 30       	cpi	r24, 0x06	; 6
    411e:	91 05       	cpc	r25, r1
    4120:	09 f4       	brne	.+2      	; 0x4124 <SSD_Write+0x96>
    4122:	e6 c0       	rjmp	.+460    	; 0x42f0 <SSD_Write+0x262>
    4124:	75 c1       	rjmp	.+746    	; 0x4410 <SSD_Write+0x382>
    4126:	2a 81       	ldd	r18, Y+2	; 0x02
    4128:	3b 81       	ldd	r19, Y+3	; 0x03
    412a:	28 30       	cpi	r18, 0x08	; 8
    412c:	31 05       	cpc	r19, r1
    412e:	09 f4       	brne	.+2      	; 0x4132 <SSD_Write+0xa4>
    4130:	27 c1       	rjmp	.+590    	; 0x4380 <SSD_Write+0x2f2>
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	9b 81       	ldd	r25, Y+3	; 0x03
    4136:	89 30       	cpi	r24, 0x09	; 9
    4138:	91 05       	cpc	r25, r1
    413a:	09 f4       	brne	.+2      	; 0x413e <SSD_Write+0xb0>
    413c:	45 c1       	rjmp	.+650    	; 0x43c8 <SSD_Write+0x33a>
    413e:	68 c1       	rjmp	.+720    	; 0x4410 <SSD_Write+0x382>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	66 e0       	ldi	r22, 0x06	; 6
    4144:	40 e0       	ldi	r20, 0x00	; 0
    4146:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	65 e0       	ldi	r22, 0x05	; 5
    414e:	40 e0       	ldi	r20, 0x00	; 0
    4150:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	64 e0       	ldi	r22, 0x04	; 4
    4158:	40 e0       	ldi	r20, 0x00	; 0
    415a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	67 e0       	ldi	r22, 0x07	; 7
    4162:	40 e0       	ldi	r20, 0x00	; 0
    4164:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	62 e0       	ldi	r22, 0x02	; 2
    416c:	40 e0       	ldi	r20, 0x00	; 0
    416e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	61 e0       	ldi	r22, 0x01	; 1
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	60 e0       	ldi	r22, 0x00	; 0
    4180:	41 e0       	ldi	r20, 0x01	; 1
    4182:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    4186:	67 c1       	rjmp	.+718    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	66 e0       	ldi	r22, 0x06	; 6
    418c:	41 e0       	ldi	r20, 0x01	; 1
    418e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	65 e0       	ldi	r22, 0x05	; 5
    4196:	40 e0       	ldi	r20, 0x00	; 0
    4198:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	64 e0       	ldi	r22, 0x04	; 4
    41a0:	40 e0       	ldi	r20, 0x00	; 0
    41a2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	67 e0       	ldi	r22, 0x07	; 7
    41aa:	41 e0       	ldi	r20, 0x01	; 1
    41ac:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	62 e0       	ldi	r22, 0x02	; 2
    41b4:	41 e0       	ldi	r20, 0x01	; 1
    41b6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	61 e0       	ldi	r22, 0x01	; 1
    41be:	41 e0       	ldi	r20, 0x01	; 1
    41c0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	60 e0       	ldi	r22, 0x00	; 0
    41c8:	41 e0       	ldi	r20, 0x01	; 1
    41ca:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    41ce:	43 c1       	rjmp	.+646    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	66 e0       	ldi	r22, 0x06	; 6
    41d4:	40 e0       	ldi	r20, 0x00	; 0
    41d6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    41da:	81 e0       	ldi	r24, 0x01	; 1
    41dc:	65 e0       	ldi	r22, 0x05	; 5
    41de:	40 e0       	ldi	r20, 0x00	; 0
    41e0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	64 e0       	ldi	r22, 0x04	; 4
    41e8:	41 e0       	ldi	r20, 0x01	; 1
    41ea:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	67 e0       	ldi	r22, 0x07	; 7
    41f2:	40 e0       	ldi	r20, 0x00	; 0
    41f4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	62 e0       	ldi	r22, 0x02	; 2
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	61 e0       	ldi	r22, 0x01	; 1
    4206:	41 e0       	ldi	r20, 0x01	; 1
    4208:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	40 e0       	ldi	r20, 0x00	; 0
    4212:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    4216:	1f c1       	rjmp	.+574    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	66 e0       	ldi	r22, 0x06	; 6
    421c:	40 e0       	ldi	r20, 0x00	; 0
    421e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	65 e0       	ldi	r22, 0x05	; 5
    4226:	40 e0       	ldi	r20, 0x00	; 0
    4228:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	64 e0       	ldi	r22, 0x04	; 4
    4230:	40 e0       	ldi	r20, 0x00	; 0
    4232:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	67 e0       	ldi	r22, 0x07	; 7
    423a:	40 e0       	ldi	r20, 0x00	; 0
    423c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	62 e0       	ldi	r22, 0x02	; 2
    4244:	41 e0       	ldi	r20, 0x01	; 1
    4246:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	61 e0       	ldi	r22, 0x01	; 1
    424e:	41 e0       	ldi	r20, 0x01	; 1
    4250:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	60 e0       	ldi	r22, 0x00	; 0
    4258:	40 e0       	ldi	r20, 0x00	; 0
    425a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    425e:	fb c0       	rjmp	.+502    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	66 e0       	ldi	r22, 0x06	; 6
    4264:	41 e0       	ldi	r20, 0x01	; 1
    4266:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	65 e0       	ldi	r22, 0x05	; 5
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	64 e0       	ldi	r22, 0x04	; 4
    4278:	40 e0       	ldi	r20, 0x00	; 0
    427a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    427e:	81 e0       	ldi	r24, 0x01	; 1
    4280:	67 e0       	ldi	r22, 0x07	; 7
    4282:	41 e0       	ldi	r20, 0x01	; 1
    4284:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	62 e0       	ldi	r22, 0x02	; 2
    428c:	41 e0       	ldi	r20, 0x01	; 1
    428e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	61 e0       	ldi	r22, 0x01	; 1
    4296:	40 e0       	ldi	r20, 0x00	; 0
    4298:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    429c:	81 e0       	ldi	r24, 0x01	; 1
    429e:	60 e0       	ldi	r22, 0x00	; 0
    42a0:	40 e0       	ldi	r20, 0x00	; 0
    42a2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    42a6:	d7 c0       	rjmp	.+430    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	66 e0       	ldi	r22, 0x06	; 6
    42ac:	40 e0       	ldi	r20, 0x00	; 0
    42ae:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	65 e0       	ldi	r22, 0x05	; 5
    42b6:	41 e0       	ldi	r20, 0x01	; 1
    42b8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	64 e0       	ldi	r22, 0x04	; 4
    42c0:	40 e0       	ldi	r20, 0x00	; 0
    42c2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	67 e0       	ldi	r22, 0x07	; 7
    42ca:	40 e0       	ldi	r20, 0x00	; 0
    42cc:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	62 e0       	ldi	r22, 0x02	; 2
    42d4:	41 e0       	ldi	r20, 0x01	; 1
    42d6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	61 e0       	ldi	r22, 0x01	; 1
    42de:	40 e0       	ldi	r20, 0x00	; 0
    42e0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	60 e0       	ldi	r22, 0x00	; 0
    42e8:	40 e0       	ldi	r20, 0x00	; 0
    42ea:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    42ee:	b3 c0       	rjmp	.+358    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	66 e0       	ldi	r22, 0x06	; 6
    42f4:	40 e0       	ldi	r20, 0x00	; 0
    42f6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	65 e0       	ldi	r22, 0x05	; 5
    42fe:	41 e0       	ldi	r20, 0x01	; 1
    4300:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	64 e0       	ldi	r22, 0x04	; 4
    4308:	40 e0       	ldi	r20, 0x00	; 0
    430a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	67 e0       	ldi	r22, 0x07	; 7
    4312:	40 e0       	ldi	r20, 0x00	; 0
    4314:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	62 e0       	ldi	r22, 0x02	; 2
    431c:	40 e0       	ldi	r20, 0x00	; 0
    431e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	61 e0       	ldi	r22, 0x01	; 1
    4326:	40 e0       	ldi	r20, 0x00	; 0
    4328:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	60 e0       	ldi	r22, 0x00	; 0
    4330:	40 e0       	ldi	r20, 0x00	; 0
    4332:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    4336:	8f c0       	rjmp	.+286    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	66 e0       	ldi	r22, 0x06	; 6
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	65 e0       	ldi	r22, 0x05	; 5
    4346:	40 e0       	ldi	r20, 0x00	; 0
    4348:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	64 e0       	ldi	r22, 0x04	; 4
    4350:	40 e0       	ldi	r20, 0x00	; 0
    4352:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	67 e0       	ldi	r22, 0x07	; 7
    435a:	41 e0       	ldi	r20, 0x01	; 1
    435c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	62 e0       	ldi	r22, 0x02	; 2
    4364:	41 e0       	ldi	r20, 0x01	; 1
    4366:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	61 e0       	ldi	r22, 0x01	; 1
    436e:	41 e0       	ldi	r20, 0x01	; 1
    4370:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	41 e0       	ldi	r20, 0x01	; 1
    437a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    437e:	6b c0       	rjmp	.+214    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	66 e0       	ldi	r22, 0x06	; 6
    4384:	40 e0       	ldi	r20, 0x00	; 0
    4386:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	65 e0       	ldi	r22, 0x05	; 5
    438e:	40 e0       	ldi	r20, 0x00	; 0
    4390:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	64 e0       	ldi	r22, 0x04	; 4
    4398:	40 e0       	ldi	r20, 0x00	; 0
    439a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	67 e0       	ldi	r22, 0x07	; 7
    43a2:	40 e0       	ldi	r20, 0x00	; 0
    43a4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	62 e0       	ldi	r22, 0x02	; 2
    43ac:	40 e0       	ldi	r20, 0x00	; 0
    43ae:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	61 e0       	ldi	r22, 0x01	; 1
    43b6:	40 e0       	ldi	r20, 0x00	; 0
    43b8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	60 e0       	ldi	r22, 0x00	; 0
    43c0:	40 e0       	ldi	r20, 0x00	; 0
    43c2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    43c6:	47 c0       	rjmp	.+142    	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	66 e0       	ldi	r22, 0x06	; 6
    43cc:	40 e0       	ldi	r20, 0x00	; 0
    43ce:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	65 e0       	ldi	r22, 0x05	; 5
    43d6:	40 e0       	ldi	r20, 0x00	; 0
    43d8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	64 e0       	ldi	r22, 0x04	; 4
    43e0:	40 e0       	ldi	r20, 0x00	; 0
    43e2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	67 e0       	ldi	r22, 0x07	; 7
    43ea:	40 e0       	ldi	r20, 0x00	; 0
    43ec:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	62 e0       	ldi	r22, 0x02	; 2
    43f4:	41 e0       	ldi	r20, 0x01	; 1
    43f6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	61 e0       	ldi	r22, 0x01	; 1
    43fe:	40 e0       	ldi	r20, 0x00	; 0
    4400:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	60 e0       	ldi	r22, 0x00	; 0
    4408:	40 e0       	ldi	r20, 0x00	; 0
    440a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    440e:	23 c0       	rjmp	.+70     	; 0x4456 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	66 e0       	ldi	r22, 0x06	; 6
    4414:	41 e0       	ldi	r20, 0x01	; 1
    4416:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    441a:	81 e0       	ldi	r24, 0x01	; 1
    441c:	65 e0       	ldi	r22, 0x05	; 5
    441e:	41 e0       	ldi	r20, 0x01	; 1
    4420:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	64 e0       	ldi	r22, 0x04	; 4
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	67 e0       	ldi	r22, 0x07	; 7
    4432:	41 e0       	ldi	r20, 0x01	; 1
    4434:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	62 e0       	ldi	r22, 0x02	; 2
    443c:	41 e0       	ldi	r20, 0x01	; 1
    443e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	61 e0       	ldi	r22, 0x01	; 1
    4446:	41 e0       	ldi	r20, 0x01	; 1
    4448:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	60 e0       	ldi	r22, 0x00	; 0
    4450:	41 e0       	ldi	r20, 0x01	; 1
    4452:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    #else 
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    4456:	0f 90       	pop	r0
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
    445c:	cf 91       	pop	r28
    445e:	df 91       	pop	r29
    4460:	08 95       	ret

00004462 <Spt_Init>:
// {
//     Spt_Timer2_Callback_Ctc();
// }

Spt_ReturnType Spt_Init(Spt_ConfigType *config)
{
    4462:	df 93       	push	r29
    4464:	cf 93       	push	r28
    4466:	cd b7       	in	r28, 0x3d	; 61
    4468:	de b7       	in	r29, 0x3e	; 62
    446a:	65 97       	sbiw	r28, 0x15	; 21
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	f8 94       	cli
    4470:	de bf       	out	0x3e, r29	; 62
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	9b 83       	std	Y+3, r25	; 0x03
    4478:	8a 83       	std	Y+2, r24	; 0x02
    Spt_ReturnType returnValue = SPT_OK;
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    447e:	ea 81       	ldd	r30, Y+2	; 0x02
    4480:	fb 81       	ldd	r31, Y+3	; 0x03
    4482:	80 81       	ld	r24, Z
    4484:	28 2f       	mov	r18, r24
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	3d 8b       	std	Y+21, r19	; 0x15
    448a:	2c 8b       	std	Y+20, r18	; 0x14
    448c:	8c 89       	ldd	r24, Y+20	; 0x14
    448e:	9d 89       	ldd	r25, Y+21	; 0x15
    4490:	81 30       	cpi	r24, 0x01	; 1
    4492:	91 05       	cpc	r25, r1
    4494:	09 f4       	brne	.+2      	; 0x4498 <Spt_Init+0x36>
    4496:	77 c1       	rjmp	.+750    	; 0x4786 <Spt_Init+0x324>
    4498:	2c 89       	ldd	r18, Y+20	; 0x14
    449a:	3d 89       	ldd	r19, Y+21	; 0x15
    449c:	22 30       	cpi	r18, 0x02	; 2
    449e:	31 05       	cpc	r19, r1
    44a0:	2c f4       	brge	.+10     	; 0x44ac <Spt_Init+0x4a>
    44a2:	8c 89       	ldd	r24, Y+20	; 0x14
    44a4:	9d 89       	ldd	r25, Y+21	; 0x15
    44a6:	00 97       	sbiw	r24, 0x00	; 0
    44a8:	71 f0       	breq	.+28     	; 0x44c6 <Spt_Init+0x64>
    44aa:	b7 c5       	rjmp	.+2926   	; 0x501a <Spt_Init+0xbb8>
    44ac:	2c 89       	ldd	r18, Y+20	; 0x14
    44ae:	3d 89       	ldd	r19, Y+21	; 0x15
    44b0:	22 30       	cpi	r18, 0x02	; 2
    44b2:	31 05       	cpc	r19, r1
    44b4:	09 f4       	brne	.+2      	; 0x44b8 <Spt_Init+0x56>
    44b6:	dc c2       	rjmp	.+1464   	; 0x4a70 <Spt_Init+0x60e>
    44b8:	8c 89       	ldd	r24, Y+20	; 0x14
    44ba:	9d 89       	ldd	r25, Y+21	; 0x15
    44bc:	83 30       	cpi	r24, 0x03	; 3
    44be:	91 05       	cpc	r25, r1
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <Spt_Init+0x62>
    44c2:	4b c4       	rjmp	.+2198   	; 0x4d5a <Spt_Init+0x8f8>
    44c4:	aa c5       	rjmp	.+2900   	; 0x501a <Spt_Init+0xbb8>
    {

    case SPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    44c6:	ea 81       	ldd	r30, Y+2	; 0x02
    44c8:	fb 81       	ldd	r31, Y+3	; 0x03
    44ca:	81 81       	ldd	r24, Z+1	; 0x01
    44cc:	88 23       	and	r24, r24
    44ce:	79 f4       	brne	.+30     	; 0x44ee <Spt_Init+0x8c>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    44d0:	a3 e5       	ldi	r26, 0x53	; 83
    44d2:	b0 e0       	ldi	r27, 0x00	; 0
    44d4:	e3 e5       	ldi	r30, 0x53	; 83
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	80 81       	ld	r24, Z
    44da:	80 64       	ori	r24, 0x40	; 64
    44dc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    44de:	a3 e5       	ldi	r26, 0x53	; 83
    44e0:	b0 e0       	ldi	r27, 0x00	; 0
    44e2:	e3 e5       	ldi	r30, 0x53	; 83
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	80 81       	ld	r24, Z
    44e8:	88 60       	ori	r24, 0x08	; 8
    44ea:	8c 93       	st	X, r24
    44ec:	15 c0       	rjmp	.+42     	; 0x4518 <Spt_Init+0xb6>
        }
        else if (config->mode == SPT_MODE_PWM_PHASE_CORRECT)
    44ee:	ea 81       	ldd	r30, Y+2	; 0x02
    44f0:	fb 81       	ldd	r31, Y+3	; 0x03
    44f2:	81 81       	ldd	r24, Z+1	; 0x01
    44f4:	81 30       	cpi	r24, 0x01	; 1
    44f6:	79 f4       	brne	.+30     	; 0x4516 <Spt_Init+0xb4>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    44f8:	a3 e5       	ldi	r26, 0x53	; 83
    44fa:	b0 e0       	ldi	r27, 0x00	; 0
    44fc:	e3 e5       	ldi	r30, 0x53	; 83
    44fe:	f0 e0       	ldi	r31, 0x00	; 0
    4500:	80 81       	ld	r24, Z
    4502:	80 64       	ori	r24, 0x40	; 64
    4504:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    4506:	a3 e5       	ldi	r26, 0x53	; 83
    4508:	b0 e0       	ldi	r27, 0x00	; 0
    450a:	e3 e5       	ldi	r30, 0x53	; 83
    450c:	f0 e0       	ldi	r31, 0x00	; 0
    450e:	80 81       	ld	r24, Z
    4510:	87 7f       	andi	r24, 0xF7	; 247
    4512:	8c 93       	st	X, r24
    4514:	01 c0       	rjmp	.+2      	; 0x4518 <Spt_Init+0xb6>
        }
        else
        {
            returnValue = SPT_ERROR;
    4516:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    4518:	ea 81       	ldd	r30, Y+2	; 0x02
    451a:	fb 81       	ldd	r31, Y+3	; 0x03
    451c:	82 81       	ldd	r24, Z+2	; 0x02
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	3b 8b       	std	Y+19, r19	; 0x13
    4524:	2a 8b       	std	Y+18, r18	; 0x12
    4526:	8a 89       	ldd	r24, Y+18	; 0x12
    4528:	9b 89       	ldd	r25, Y+19	; 0x13
    452a:	82 30       	cpi	r24, 0x02	; 2
    452c:	91 05       	cpc	r25, r1
    452e:	c1 f0       	breq	.+48     	; 0x4560 <Spt_Init+0xfe>
    4530:	2a 89       	ldd	r18, Y+18	; 0x12
    4532:	3b 89       	ldd	r19, Y+19	; 0x13
    4534:	23 30       	cpi	r18, 0x03	; 3
    4536:	31 05       	cpc	r19, r1
    4538:	11 f1       	breq	.+68     	; 0x457e <Spt_Init+0x11c>
    453a:	8a 89       	ldd	r24, Y+18	; 0x12
    453c:	9b 89       	ldd	r25, Y+19	; 0x13
    453e:	00 97       	sbiw	r24, 0x00	; 0
    4540:	69 f5       	brne	.+90     	; 0x459c <Spt_Init+0x13a>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    4542:	a3 e5       	ldi	r26, 0x53	; 83
    4544:	b0 e0       	ldi	r27, 0x00	; 0
    4546:	e3 e5       	ldi	r30, 0x53	; 83
    4548:	f0 e0       	ldi	r31, 0x00	; 0
    454a:	80 81       	ld	r24, Z
    454c:	8f 7e       	andi	r24, 0xEF	; 239
    454e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    4550:	a3 e5       	ldi	r26, 0x53	; 83
    4552:	b0 e0       	ldi	r27, 0x00	; 0
    4554:	e3 e5       	ldi	r30, 0x53	; 83
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	80 81       	ld	r24, Z
    455a:	8f 7d       	andi	r24, 0xDF	; 223
    455c:	8c 93       	st	X, r24
    455e:	1f c0       	rjmp	.+62     	; 0x459e <Spt_Init+0x13c>
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    4560:	a3 e5       	ldi	r26, 0x53	; 83
    4562:	b0 e0       	ldi	r27, 0x00	; 0
    4564:	e3 e5       	ldi	r30, 0x53	; 83
    4566:	f0 e0       	ldi	r31, 0x00	; 0
    4568:	80 81       	ld	r24, Z
    456a:	80 61       	ori	r24, 0x10	; 16
    456c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    456e:	a3 e5       	ldi	r26, 0x53	; 83
    4570:	b0 e0       	ldi	r27, 0x00	; 0
    4572:	e3 e5       	ldi	r30, 0x53	; 83
    4574:	f0 e0       	ldi	r31, 0x00	; 0
    4576:	80 81       	ld	r24, Z
    4578:	80 62       	ori	r24, 0x20	; 32
    457a:	8c 93       	st	X, r24
    457c:	10 c0       	rjmp	.+32     	; 0x459e <Spt_Init+0x13c>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    457e:	a3 e5       	ldi	r26, 0x53	; 83
    4580:	b0 e0       	ldi	r27, 0x00	; 0
    4582:	e3 e5       	ldi	r30, 0x53	; 83
    4584:	f0 e0       	ldi	r31, 0x00	; 0
    4586:	80 81       	ld	r24, Z
    4588:	8f 7e       	andi	r24, 0xEF	; 239
    458a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    458c:	a3 e5       	ldi	r26, 0x53	; 83
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	e3 e5       	ldi	r30, 0x53	; 83
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	80 62       	ori	r24, 0x20	; 32
    4598:	8c 93       	st	X, r24
    459a:	01 c0       	rjmp	.+2      	; 0x459e <Spt_Init+0x13c>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    459c:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    459e:	ea 81       	ldd	r30, Y+2	; 0x02
    45a0:	fb 81       	ldd	r31, Y+3	; 0x03
    45a2:	83 81       	ldd	r24, Z+3	; 0x03
    45a4:	28 2f       	mov	r18, r24
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	39 8b       	std	Y+17, r19	; 0x11
    45aa:	28 8b       	std	Y+16, r18	; 0x10
    45ac:	88 89       	ldd	r24, Y+16	; 0x10
    45ae:	99 89       	ldd	r25, Y+17	; 0x11
    45b0:	84 30       	cpi	r24, 0x04	; 4
    45b2:	91 05       	cpc	r25, r1
    45b4:	09 f4       	brne	.+2      	; 0x45b8 <Spt_Init+0x156>
    45b6:	77 c0       	rjmp	.+238    	; 0x46a6 <Spt_Init+0x244>
    45b8:	28 89       	ldd	r18, Y+16	; 0x10
    45ba:	39 89       	ldd	r19, Y+17	; 0x11
    45bc:	25 30       	cpi	r18, 0x05	; 5
    45be:	31 05       	cpc	r19, r1
    45c0:	8c f4       	brge	.+34     	; 0x45e4 <Spt_Init+0x182>
    45c2:	88 89       	ldd	r24, Y+16	; 0x10
    45c4:	99 89       	ldd	r25, Y+17	; 0x11
    45c6:	81 30       	cpi	r24, 0x01	; 1
    45c8:	91 05       	cpc	r25, r1
    45ca:	09 f4       	brne	.+2      	; 0x45ce <Spt_Init+0x16c>
    45cc:	40 c0       	rjmp	.+128    	; 0x464e <Spt_Init+0x1ec>
    45ce:	28 89       	ldd	r18, Y+16	; 0x10
    45d0:	39 89       	ldd	r19, Y+17	; 0x11
    45d2:	22 30       	cpi	r18, 0x02	; 2
    45d4:	31 05       	cpc	r19, r1
    45d6:	09 f4       	brne	.+2      	; 0x45da <Spt_Init+0x178>
    45d8:	50 c0       	rjmp	.+160    	; 0x467a <Spt_Init+0x218>
    45da:	88 89       	ldd	r24, Y+16	; 0x10
    45dc:	99 89       	ldd	r25, Y+17	; 0x11
    45de:	00 97       	sbiw	r24, 0x00	; 0
    45e0:	01 f1       	breq	.+64     	; 0x4622 <Spt_Init+0x1c0>
    45e2:	cf c0       	rjmp	.+414    	; 0x4782 <Spt_Init+0x320>
    45e4:	28 89       	ldd	r18, Y+16	; 0x10
    45e6:	39 89       	ldd	r19, Y+17	; 0x11
    45e8:	27 30       	cpi	r18, 0x07	; 7
    45ea:	31 05       	cpc	r19, r1
    45ec:	09 f4       	brne	.+2      	; 0x45f0 <Spt_Init+0x18e>
    45ee:	87 c0       	rjmp	.+270    	; 0x46fe <Spt_Init+0x29c>
    45f0:	88 89       	ldd	r24, Y+16	; 0x10
    45f2:	99 89       	ldd	r25, Y+17	; 0x11
    45f4:	88 30       	cpi	r24, 0x08	; 8
    45f6:	91 05       	cpc	r25, r1
    45f8:	3c f4       	brge	.+14     	; 0x4608 <Spt_Init+0x1a6>
    45fa:	28 89       	ldd	r18, Y+16	; 0x10
    45fc:	39 89       	ldd	r19, Y+17	; 0x11
    45fe:	26 30       	cpi	r18, 0x06	; 6
    4600:	31 05       	cpc	r19, r1
    4602:	09 f4       	brne	.+2      	; 0x4606 <Spt_Init+0x1a4>
    4604:	66 c0       	rjmp	.+204    	; 0x46d2 <Spt_Init+0x270>
    4606:	bd c0       	rjmp	.+378    	; 0x4782 <Spt_Init+0x320>
    4608:	88 89       	ldd	r24, Y+16	; 0x10
    460a:	99 89       	ldd	r25, Y+17	; 0x11
    460c:	88 30       	cpi	r24, 0x08	; 8
    460e:	91 05       	cpc	r25, r1
    4610:	09 f4       	brne	.+2      	; 0x4614 <Spt_Init+0x1b2>
    4612:	8b c0       	rjmp	.+278    	; 0x472a <Spt_Init+0x2c8>
    4614:	28 89       	ldd	r18, Y+16	; 0x10
    4616:	39 89       	ldd	r19, Y+17	; 0x11
    4618:	29 30       	cpi	r18, 0x09	; 9
    461a:	31 05       	cpc	r19, r1
    461c:	09 f4       	brne	.+2      	; 0x4620 <Spt_Init+0x1be>
    461e:	9b c0       	rjmp	.+310    	; 0x4756 <Spt_Init+0x2f4>
    4620:	b0 c0       	rjmp	.+352    	; 0x4782 <Spt_Init+0x320>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    4622:	a3 e5       	ldi	r26, 0x53	; 83
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	e3 e5       	ldi	r30, 0x53	; 83
    4628:	f0 e0       	ldi	r31, 0x00	; 0
    462a:	80 81       	ld	r24, Z
    462c:	8e 7f       	andi	r24, 0xFE	; 254
    462e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    4630:	a3 e5       	ldi	r26, 0x53	; 83
    4632:	b0 e0       	ldi	r27, 0x00	; 0
    4634:	e3 e5       	ldi	r30, 0x53	; 83
    4636:	f0 e0       	ldi	r31, 0x00	; 0
    4638:	80 81       	ld	r24, Z
    463a:	8d 7f       	andi	r24, 0xFD	; 253
    463c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    463e:	a3 e5       	ldi	r26, 0x53	; 83
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	e3 e5       	ldi	r30, 0x53	; 83
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	80 81       	ld	r24, Z
    4648:	8b 7f       	andi	r24, 0xFB	; 251
    464a:	8c 93       	st	X, r24
    464c:	e7 c4       	rjmp	.+2510   	; 0x501c <Spt_Init+0xbba>
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    464e:	a3 e5       	ldi	r26, 0x53	; 83
    4650:	b0 e0       	ldi	r27, 0x00	; 0
    4652:	e3 e5       	ldi	r30, 0x53	; 83
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	80 81       	ld	r24, Z
    4658:	81 60       	ori	r24, 0x01	; 1
    465a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    465c:	a3 e5       	ldi	r26, 0x53	; 83
    465e:	b0 e0       	ldi	r27, 0x00	; 0
    4660:	e3 e5       	ldi	r30, 0x53	; 83
    4662:	f0 e0       	ldi	r31, 0x00	; 0
    4664:	80 81       	ld	r24, Z
    4666:	8d 7f       	andi	r24, 0xFD	; 253
    4668:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    466a:	a3 e5       	ldi	r26, 0x53	; 83
    466c:	b0 e0       	ldi	r27, 0x00	; 0
    466e:	e3 e5       	ldi	r30, 0x53	; 83
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	80 81       	ld	r24, Z
    4674:	8b 7f       	andi	r24, 0xFB	; 251
    4676:	8c 93       	st	X, r24
    4678:	d1 c4       	rjmp	.+2466   	; 0x501c <Spt_Init+0xbba>
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    467a:	a3 e5       	ldi	r26, 0x53	; 83
    467c:	b0 e0       	ldi	r27, 0x00	; 0
    467e:	e3 e5       	ldi	r30, 0x53	; 83
    4680:	f0 e0       	ldi	r31, 0x00	; 0
    4682:	80 81       	ld	r24, Z
    4684:	8e 7f       	andi	r24, 0xFE	; 254
    4686:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    4688:	a3 e5       	ldi	r26, 0x53	; 83
    468a:	b0 e0       	ldi	r27, 0x00	; 0
    468c:	e3 e5       	ldi	r30, 0x53	; 83
    468e:	f0 e0       	ldi	r31, 0x00	; 0
    4690:	80 81       	ld	r24, Z
    4692:	82 60       	ori	r24, 0x02	; 2
    4694:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    4696:	a3 e5       	ldi	r26, 0x53	; 83
    4698:	b0 e0       	ldi	r27, 0x00	; 0
    469a:	e3 e5       	ldi	r30, 0x53	; 83
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	80 81       	ld	r24, Z
    46a0:	8b 7f       	andi	r24, 0xFB	; 251
    46a2:	8c 93       	st	X, r24
    46a4:	bb c4       	rjmp	.+2422   	; 0x501c <Spt_Init+0xbba>
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    46a6:	a3 e5       	ldi	r26, 0x53	; 83
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
    46aa:	e3 e5       	ldi	r30, 0x53	; 83
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	80 81       	ld	r24, Z
    46b0:	81 60       	ori	r24, 0x01	; 1
    46b2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    46b4:	a3 e5       	ldi	r26, 0x53	; 83
    46b6:	b0 e0       	ldi	r27, 0x00	; 0
    46b8:	e3 e5       	ldi	r30, 0x53	; 83
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	80 81       	ld	r24, Z
    46be:	82 60       	ori	r24, 0x02	; 2
    46c0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    46c2:	a3 e5       	ldi	r26, 0x53	; 83
    46c4:	b0 e0       	ldi	r27, 0x00	; 0
    46c6:	e3 e5       	ldi	r30, 0x53	; 83
    46c8:	f0 e0       	ldi	r31, 0x00	; 0
    46ca:	80 81       	ld	r24, Z
    46cc:	8b 7f       	andi	r24, 0xFB	; 251
    46ce:	8c 93       	st	X, r24
    46d0:	a5 c4       	rjmp	.+2378   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    46d2:	a3 e5       	ldi	r26, 0x53	; 83
    46d4:	b0 e0       	ldi	r27, 0x00	; 0
    46d6:	e3 e5       	ldi	r30, 0x53	; 83
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	80 81       	ld	r24, Z
    46dc:	8e 7f       	andi	r24, 0xFE	; 254
    46de:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    46e0:	a3 e5       	ldi	r26, 0x53	; 83
    46e2:	b0 e0       	ldi	r27, 0x00	; 0
    46e4:	e3 e5       	ldi	r30, 0x53	; 83
    46e6:	f0 e0       	ldi	r31, 0x00	; 0
    46e8:	80 81       	ld	r24, Z
    46ea:	8d 7f       	andi	r24, 0xFD	; 253
    46ec:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    46ee:	a3 e5       	ldi	r26, 0x53	; 83
    46f0:	b0 e0       	ldi	r27, 0x00	; 0
    46f2:	e3 e5       	ldi	r30, 0x53	; 83
    46f4:	f0 e0       	ldi	r31, 0x00	; 0
    46f6:	80 81       	ld	r24, Z
    46f8:	84 60       	ori	r24, 0x04	; 4
    46fa:	8c 93       	st	X, r24
    46fc:	8f c4       	rjmp	.+2334   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    46fe:	a3 e5       	ldi	r26, 0x53	; 83
    4700:	b0 e0       	ldi	r27, 0x00	; 0
    4702:	e3 e5       	ldi	r30, 0x53	; 83
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	81 60       	ori	r24, 0x01	; 1
    470a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    470c:	a3 e5       	ldi	r26, 0x53	; 83
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	e3 e5       	ldi	r30, 0x53	; 83
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	8d 7f       	andi	r24, 0xFD	; 253
    4718:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    471a:	a3 e5       	ldi	r26, 0x53	; 83
    471c:	b0 e0       	ldi	r27, 0x00	; 0
    471e:	e3 e5       	ldi	r30, 0x53	; 83
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	80 81       	ld	r24, Z
    4724:	84 60       	ori	r24, 0x04	; 4
    4726:	8c 93       	st	X, r24
    4728:	79 c4       	rjmp	.+2290   	; 0x501c <Spt_Init+0xbba>
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    472a:	a3 e5       	ldi	r26, 0x53	; 83
    472c:	b0 e0       	ldi	r27, 0x00	; 0
    472e:	e3 e5       	ldi	r30, 0x53	; 83
    4730:	f0 e0       	ldi	r31, 0x00	; 0
    4732:	80 81       	ld	r24, Z
    4734:	8e 7f       	andi	r24, 0xFE	; 254
    4736:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    4738:	a3 e5       	ldi	r26, 0x53	; 83
    473a:	b0 e0       	ldi	r27, 0x00	; 0
    473c:	e3 e5       	ldi	r30, 0x53	; 83
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	80 81       	ld	r24, Z
    4742:	82 60       	ori	r24, 0x02	; 2
    4744:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    4746:	a3 e5       	ldi	r26, 0x53	; 83
    4748:	b0 e0       	ldi	r27, 0x00	; 0
    474a:	e3 e5       	ldi	r30, 0x53	; 83
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	80 81       	ld	r24, Z
    4750:	84 60       	ori	r24, 0x04	; 4
    4752:	8c 93       	st	X, r24
    4754:	63 c4       	rjmp	.+2246   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    4756:	a3 e5       	ldi	r26, 0x53	; 83
    4758:	b0 e0       	ldi	r27, 0x00	; 0
    475a:	e3 e5       	ldi	r30, 0x53	; 83
    475c:	f0 e0       	ldi	r31, 0x00	; 0
    475e:	80 81       	ld	r24, Z
    4760:	81 60       	ori	r24, 0x01	; 1
    4762:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    4764:	a3 e5       	ldi	r26, 0x53	; 83
    4766:	b0 e0       	ldi	r27, 0x00	; 0
    4768:	e3 e5       	ldi	r30, 0x53	; 83
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	80 81       	ld	r24, Z
    476e:	82 60       	ori	r24, 0x02	; 2
    4770:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    4772:	a3 e5       	ldi	r26, 0x53	; 83
    4774:	b0 e0       	ldi	r27, 0x00	; 0
    4776:	e3 e5       	ldi	r30, 0x53	; 83
    4778:	f0 e0       	ldi	r31, 0x00	; 0
    477a:	80 81       	ld	r24, Z
    477c:	84 60       	ori	r24, 0x04	; 4
    477e:	8c 93       	st	X, r24
    4780:	4d c4       	rjmp	.+2202   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4782:	19 82       	std	Y+1, r1	; 0x01
    4784:	4b c4       	rjmp	.+2198   	; 0x501c <Spt_Init+0xbba>
        }
        break;

    case SPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    4786:	ea 81       	ldd	r30, Y+2	; 0x02
    4788:	fb 81       	ldd	r31, Y+3	; 0x03
    478a:	81 81       	ldd	r24, Z+1	; 0x01
    478c:	88 23       	and	r24, r24
    478e:	e9 f4       	brne	.+58     	; 0x47ca <Spt_Init+0x368>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4790:	af e4       	ldi	r26, 0x4F	; 79
    4792:	b0 e0       	ldi	r27, 0x00	; 0
    4794:	ef e4       	ldi	r30, 0x4F	; 79
    4796:	f0 e0       	ldi	r31, 0x00	; 0
    4798:	80 81       	ld	r24, Z
    479a:	8e 7f       	andi	r24, 0xFE	; 254
    479c:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    479e:	af e4       	ldi	r26, 0x4F	; 79
    47a0:	b0 e0       	ldi	r27, 0x00	; 0
    47a2:	ef e4       	ldi	r30, 0x4F	; 79
    47a4:	f0 e0       	ldi	r31, 0x00	; 0
    47a6:	80 81       	ld	r24, Z
    47a8:	82 60       	ori	r24, 0x02	; 2
    47aa:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    47ac:	ae e4       	ldi	r26, 0x4E	; 78
    47ae:	b0 e0       	ldi	r27, 0x00	; 0
    47b0:	ee e4       	ldi	r30, 0x4E	; 78
    47b2:	f0 e0       	ldi	r31, 0x00	; 0
    47b4:	80 81       	ld	r24, Z
    47b6:	88 60       	ori	r24, 0x08	; 8
    47b8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    47ba:	ae e4       	ldi	r26, 0x4E	; 78
    47bc:	b0 e0       	ldi	r27, 0x00	; 0
    47be:	ee e4       	ldi	r30, 0x4E	; 78
    47c0:	f0 e0       	ldi	r31, 0x00	; 0
    47c2:	80 81       	ld	r24, Z
    47c4:	80 61       	ori	r24, 0x10	; 16
    47c6:	8c 93       	st	X, r24
    47c8:	01 c0       	rjmp	.+2      	; 0x47cc <Spt_Init+0x36a>
        //     // TODO
        //     // TODO
        // }
        else
        {
            returnValue = SPT_ERROR;
    47ca:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    47cc:	ea 81       	ldd	r30, Y+2	; 0x02
    47ce:	fb 81       	ldd	r31, Y+3	; 0x03
    47d0:	82 81       	ldd	r24, Z+2	; 0x02
    47d2:	28 2f       	mov	r18, r24
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	3f 87       	std	Y+15, r19	; 0x0f
    47d8:	2e 87       	std	Y+14, r18	; 0x0e
    47da:	8e 85       	ldd	r24, Y+14	; 0x0e
    47dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    47de:	81 30       	cpi	r24, 0x01	; 1
    47e0:	91 05       	cpc	r25, r1
    47e2:	21 f1       	breq	.+72     	; 0x482c <Spt_Init+0x3ca>
    47e4:	2e 85       	ldd	r18, Y+14	; 0x0e
    47e6:	3f 85       	ldd	r19, Y+15	; 0x0f
    47e8:	22 30       	cpi	r18, 0x02	; 2
    47ea:	31 05       	cpc	r19, r1
    47ec:	2c f4       	brge	.+10     	; 0x47f8 <Spt_Init+0x396>
    47ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    47f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    47f2:	00 97       	sbiw	r24, 0x00	; 0
    47f4:	61 f0       	breq	.+24     	; 0x480e <Spt_Init+0x3ac>
    47f6:	47 c0       	rjmp	.+142    	; 0x4886 <Spt_Init+0x424>
    47f8:	2e 85       	ldd	r18, Y+14	; 0x0e
    47fa:	3f 85       	ldd	r19, Y+15	; 0x0f
    47fc:	22 30       	cpi	r18, 0x02	; 2
    47fe:	31 05       	cpc	r19, r1
    4800:	21 f1       	breq	.+72     	; 0x484a <Spt_Init+0x3e8>
    4802:	8e 85       	ldd	r24, Y+14	; 0x0e
    4804:	9f 85       	ldd	r25, Y+15	; 0x0f
    4806:	83 30       	cpi	r24, 0x03	; 3
    4808:	91 05       	cpc	r25, r1
    480a:	71 f1       	breq	.+92     	; 0x4868 <Spt_Init+0x406>
    480c:	3c c0       	rjmp	.+120    	; 0x4886 <Spt_Init+0x424>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    480e:	af e4       	ldi	r26, 0x4F	; 79
    4810:	b0 e0       	ldi	r27, 0x00	; 0
    4812:	ef e4       	ldi	r30, 0x4F	; 79
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	80 81       	ld	r24, Z
    4818:	8f 7b       	andi	r24, 0xBF	; 191
    481a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    481c:	af e4       	ldi	r26, 0x4F	; 79
    481e:	b0 e0       	ldi	r27, 0x00	; 0
    4820:	ef e4       	ldi	r30, 0x4F	; 79
    4822:	f0 e0       	ldi	r31, 0x00	; 0
    4824:	80 81       	ld	r24, Z
    4826:	8f 77       	andi	r24, 0x7F	; 127
    4828:	8c 93       	st	X, r24
    482a:	2e c0       	rjmp	.+92     	; 0x4888 <Spt_Init+0x426>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    482c:	af e4       	ldi	r26, 0x4F	; 79
    482e:	b0 e0       	ldi	r27, 0x00	; 0
    4830:	ef e4       	ldi	r30, 0x4F	; 79
    4832:	f0 e0       	ldi	r31, 0x00	; 0
    4834:	80 81       	ld	r24, Z
    4836:	80 64       	ori	r24, 0x40	; 64
    4838:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    483a:	af e4       	ldi	r26, 0x4F	; 79
    483c:	b0 e0       	ldi	r27, 0x00	; 0
    483e:	ef e4       	ldi	r30, 0x4F	; 79
    4840:	f0 e0       	ldi	r31, 0x00	; 0
    4842:	80 81       	ld	r24, Z
    4844:	8f 77       	andi	r24, 0x7F	; 127
    4846:	8c 93       	st	X, r24
    4848:	1f c0       	rjmp	.+62     	; 0x4888 <Spt_Init+0x426>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    484a:	af e4       	ldi	r26, 0x4F	; 79
    484c:	b0 e0       	ldi	r27, 0x00	; 0
    484e:	ef e4       	ldi	r30, 0x4F	; 79
    4850:	f0 e0       	ldi	r31, 0x00	; 0
    4852:	80 81       	ld	r24, Z
    4854:	80 64       	ori	r24, 0x40	; 64
    4856:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    4858:	af e4       	ldi	r26, 0x4F	; 79
    485a:	b0 e0       	ldi	r27, 0x00	; 0
    485c:	ef e4       	ldi	r30, 0x4F	; 79
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	80 68       	ori	r24, 0x80	; 128
    4864:	8c 93       	st	X, r24
    4866:	10 c0       	rjmp	.+32     	; 0x4888 <Spt_Init+0x426>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    4868:	af e4       	ldi	r26, 0x4F	; 79
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	ef e4       	ldi	r30, 0x4F	; 79
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	80 81       	ld	r24, Z
    4872:	8f 7b       	andi	r24, 0xBF	; 191
    4874:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    4876:	af e4       	ldi	r26, 0x4F	; 79
    4878:	b0 e0       	ldi	r27, 0x00	; 0
    487a:	ef e4       	ldi	r30, 0x4F	; 79
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	80 81       	ld	r24, Z
    4880:	80 68       	ori	r24, 0x80	; 128
    4882:	8c 93       	st	X, r24
    4884:	01 c0       	rjmp	.+2      	; 0x4888 <Spt_Init+0x426>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4886:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    4888:	ea 81       	ldd	r30, Y+2	; 0x02
    488a:	fb 81       	ldd	r31, Y+3	; 0x03
    488c:	83 81       	ldd	r24, Z+3	; 0x03
    488e:	28 2f       	mov	r18, r24
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	3d 87       	std	Y+13, r19	; 0x0d
    4894:	2c 87       	std	Y+12, r18	; 0x0c
    4896:	8c 85       	ldd	r24, Y+12	; 0x0c
    4898:	9d 85       	ldd	r25, Y+13	; 0x0d
    489a:	84 30       	cpi	r24, 0x04	; 4
    489c:	91 05       	cpc	r25, r1
    489e:	09 f4       	brne	.+2      	; 0x48a2 <Spt_Init+0x440>
    48a0:	77 c0       	rjmp	.+238    	; 0x4990 <Spt_Init+0x52e>
    48a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    48a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    48a6:	25 30       	cpi	r18, 0x05	; 5
    48a8:	31 05       	cpc	r19, r1
    48aa:	8c f4       	brge	.+34     	; 0x48ce <Spt_Init+0x46c>
    48ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    48ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    48b0:	81 30       	cpi	r24, 0x01	; 1
    48b2:	91 05       	cpc	r25, r1
    48b4:	09 f4       	brne	.+2      	; 0x48b8 <Spt_Init+0x456>
    48b6:	40 c0       	rjmp	.+128    	; 0x4938 <Spt_Init+0x4d6>
    48b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    48ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    48bc:	22 30       	cpi	r18, 0x02	; 2
    48be:	31 05       	cpc	r19, r1
    48c0:	09 f4       	brne	.+2      	; 0x48c4 <Spt_Init+0x462>
    48c2:	50 c0       	rjmp	.+160    	; 0x4964 <Spt_Init+0x502>
    48c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    48c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    48c8:	00 97       	sbiw	r24, 0x00	; 0
    48ca:	01 f1       	breq	.+64     	; 0x490c <Spt_Init+0x4aa>
    48cc:	cf c0       	rjmp	.+414    	; 0x4a6c <Spt_Init+0x60a>
    48ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    48d0:	3d 85       	ldd	r19, Y+13	; 0x0d
    48d2:	27 30       	cpi	r18, 0x07	; 7
    48d4:	31 05       	cpc	r19, r1
    48d6:	09 f4       	brne	.+2      	; 0x48da <Spt_Init+0x478>
    48d8:	87 c0       	rjmp	.+270    	; 0x49e8 <Spt_Init+0x586>
    48da:	8c 85       	ldd	r24, Y+12	; 0x0c
    48dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    48de:	88 30       	cpi	r24, 0x08	; 8
    48e0:	91 05       	cpc	r25, r1
    48e2:	3c f4       	brge	.+14     	; 0x48f2 <Spt_Init+0x490>
    48e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    48e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    48e8:	26 30       	cpi	r18, 0x06	; 6
    48ea:	31 05       	cpc	r19, r1
    48ec:	09 f4       	brne	.+2      	; 0x48f0 <Spt_Init+0x48e>
    48ee:	66 c0       	rjmp	.+204    	; 0x49bc <Spt_Init+0x55a>
    48f0:	bd c0       	rjmp	.+378    	; 0x4a6c <Spt_Init+0x60a>
    48f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    48f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    48f6:	88 30       	cpi	r24, 0x08	; 8
    48f8:	91 05       	cpc	r25, r1
    48fa:	09 f4       	brne	.+2      	; 0x48fe <Spt_Init+0x49c>
    48fc:	8b c0       	rjmp	.+278    	; 0x4a14 <Spt_Init+0x5b2>
    48fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    4900:	3d 85       	ldd	r19, Y+13	; 0x0d
    4902:	29 30       	cpi	r18, 0x09	; 9
    4904:	31 05       	cpc	r19, r1
    4906:	09 f4       	brne	.+2      	; 0x490a <Spt_Init+0x4a8>
    4908:	9b c0       	rjmp	.+310    	; 0x4a40 <Spt_Init+0x5de>
    490a:	b0 c0       	rjmp	.+352    	; 0x4a6c <Spt_Init+0x60a>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    490c:	ae e4       	ldi	r26, 0x4E	; 78
    490e:	b0 e0       	ldi	r27, 0x00	; 0
    4910:	ee e4       	ldi	r30, 0x4E	; 78
    4912:	f0 e0       	ldi	r31, 0x00	; 0
    4914:	80 81       	ld	r24, Z
    4916:	8e 7f       	andi	r24, 0xFE	; 254
    4918:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    491a:	ae e4       	ldi	r26, 0x4E	; 78
    491c:	b0 e0       	ldi	r27, 0x00	; 0
    491e:	ee e4       	ldi	r30, 0x4E	; 78
    4920:	f0 e0       	ldi	r31, 0x00	; 0
    4922:	80 81       	ld	r24, Z
    4924:	8d 7f       	andi	r24, 0xFD	; 253
    4926:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4928:	ae e4       	ldi	r26, 0x4E	; 78
    492a:	b0 e0       	ldi	r27, 0x00	; 0
    492c:	ee e4       	ldi	r30, 0x4E	; 78
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	80 81       	ld	r24, Z
    4932:	8b 7f       	andi	r24, 0xFB	; 251
    4934:	8c 93       	st	X, r24
    4936:	72 c3       	rjmp	.+1764   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4938:	ae e4       	ldi	r26, 0x4E	; 78
    493a:	b0 e0       	ldi	r27, 0x00	; 0
    493c:	ee e4       	ldi	r30, 0x4E	; 78
    493e:	f0 e0       	ldi	r31, 0x00	; 0
    4940:	80 81       	ld	r24, Z
    4942:	81 60       	ori	r24, 0x01	; 1
    4944:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4946:	ae e4       	ldi	r26, 0x4E	; 78
    4948:	b0 e0       	ldi	r27, 0x00	; 0
    494a:	ee e4       	ldi	r30, 0x4E	; 78
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	80 81       	ld	r24, Z
    4950:	8d 7f       	andi	r24, 0xFD	; 253
    4952:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4954:	ae e4       	ldi	r26, 0x4E	; 78
    4956:	b0 e0       	ldi	r27, 0x00	; 0
    4958:	ee e4       	ldi	r30, 0x4E	; 78
    495a:	f0 e0       	ldi	r31, 0x00	; 0
    495c:	80 81       	ld	r24, Z
    495e:	8b 7f       	andi	r24, 0xFB	; 251
    4960:	8c 93       	st	X, r24
    4962:	5c c3       	rjmp	.+1720   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4964:	ae e4       	ldi	r26, 0x4E	; 78
    4966:	b0 e0       	ldi	r27, 0x00	; 0
    4968:	ee e4       	ldi	r30, 0x4E	; 78
    496a:	f0 e0       	ldi	r31, 0x00	; 0
    496c:	80 81       	ld	r24, Z
    496e:	8e 7f       	andi	r24, 0xFE	; 254
    4970:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4972:	ae e4       	ldi	r26, 0x4E	; 78
    4974:	b0 e0       	ldi	r27, 0x00	; 0
    4976:	ee e4       	ldi	r30, 0x4E	; 78
    4978:	f0 e0       	ldi	r31, 0x00	; 0
    497a:	80 81       	ld	r24, Z
    497c:	82 60       	ori	r24, 0x02	; 2
    497e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4980:	ae e4       	ldi	r26, 0x4E	; 78
    4982:	b0 e0       	ldi	r27, 0x00	; 0
    4984:	ee e4       	ldi	r30, 0x4E	; 78
    4986:	f0 e0       	ldi	r31, 0x00	; 0
    4988:	80 81       	ld	r24, Z
    498a:	8b 7f       	andi	r24, 0xFB	; 251
    498c:	8c 93       	st	X, r24
    498e:	46 c3       	rjmp	.+1676   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4990:	ae e4       	ldi	r26, 0x4E	; 78
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	ee e4       	ldi	r30, 0x4E	; 78
    4996:	f0 e0       	ldi	r31, 0x00	; 0
    4998:	80 81       	ld	r24, Z
    499a:	81 60       	ori	r24, 0x01	; 1
    499c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    499e:	ae e4       	ldi	r26, 0x4E	; 78
    49a0:	b0 e0       	ldi	r27, 0x00	; 0
    49a2:	ee e4       	ldi	r30, 0x4E	; 78
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	80 81       	ld	r24, Z
    49a8:	82 60       	ori	r24, 0x02	; 2
    49aa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    49ac:	ae e4       	ldi	r26, 0x4E	; 78
    49ae:	b0 e0       	ldi	r27, 0x00	; 0
    49b0:	ee e4       	ldi	r30, 0x4E	; 78
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	80 81       	ld	r24, Z
    49b6:	8b 7f       	andi	r24, 0xFB	; 251
    49b8:	8c 93       	st	X, r24
    49ba:	30 c3       	rjmp	.+1632   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    49bc:	ae e4       	ldi	r26, 0x4E	; 78
    49be:	b0 e0       	ldi	r27, 0x00	; 0
    49c0:	ee e4       	ldi	r30, 0x4E	; 78
    49c2:	f0 e0       	ldi	r31, 0x00	; 0
    49c4:	80 81       	ld	r24, Z
    49c6:	8e 7f       	andi	r24, 0xFE	; 254
    49c8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    49ca:	ae e4       	ldi	r26, 0x4E	; 78
    49cc:	b0 e0       	ldi	r27, 0x00	; 0
    49ce:	ee e4       	ldi	r30, 0x4E	; 78
    49d0:	f0 e0       	ldi	r31, 0x00	; 0
    49d2:	80 81       	ld	r24, Z
    49d4:	8d 7f       	andi	r24, 0xFD	; 253
    49d6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    49d8:	ae e4       	ldi	r26, 0x4E	; 78
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	ee e4       	ldi	r30, 0x4E	; 78
    49de:	f0 e0       	ldi	r31, 0x00	; 0
    49e0:	80 81       	ld	r24, Z
    49e2:	84 60       	ori	r24, 0x04	; 4
    49e4:	8c 93       	st	X, r24
    49e6:	1a c3       	rjmp	.+1588   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    49e8:	ae e4       	ldi	r26, 0x4E	; 78
    49ea:	b0 e0       	ldi	r27, 0x00	; 0
    49ec:	ee e4       	ldi	r30, 0x4E	; 78
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	80 81       	ld	r24, Z
    49f2:	81 60       	ori	r24, 0x01	; 1
    49f4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    49f6:	ae e4       	ldi	r26, 0x4E	; 78
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	ee e4       	ldi	r30, 0x4E	; 78
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	80 81       	ld	r24, Z
    4a00:	8d 7f       	andi	r24, 0xFD	; 253
    4a02:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4a04:	ae e4       	ldi	r26, 0x4E	; 78
    4a06:	b0 e0       	ldi	r27, 0x00	; 0
    4a08:	ee e4       	ldi	r30, 0x4E	; 78
    4a0a:	f0 e0       	ldi	r31, 0x00	; 0
    4a0c:	80 81       	ld	r24, Z
    4a0e:	84 60       	ori	r24, 0x04	; 4
    4a10:	8c 93       	st	X, r24
    4a12:	04 c3       	rjmp	.+1544   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4a14:	ae e4       	ldi	r26, 0x4E	; 78
    4a16:	b0 e0       	ldi	r27, 0x00	; 0
    4a18:	ee e4       	ldi	r30, 0x4E	; 78
    4a1a:	f0 e0       	ldi	r31, 0x00	; 0
    4a1c:	80 81       	ld	r24, Z
    4a1e:	8e 7f       	andi	r24, 0xFE	; 254
    4a20:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4a22:	ae e4       	ldi	r26, 0x4E	; 78
    4a24:	b0 e0       	ldi	r27, 0x00	; 0
    4a26:	ee e4       	ldi	r30, 0x4E	; 78
    4a28:	f0 e0       	ldi	r31, 0x00	; 0
    4a2a:	80 81       	ld	r24, Z
    4a2c:	82 60       	ori	r24, 0x02	; 2
    4a2e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4a30:	ae e4       	ldi	r26, 0x4E	; 78
    4a32:	b0 e0       	ldi	r27, 0x00	; 0
    4a34:	ee e4       	ldi	r30, 0x4E	; 78
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	80 81       	ld	r24, Z
    4a3a:	84 60       	ori	r24, 0x04	; 4
    4a3c:	8c 93       	st	X, r24
    4a3e:	ee c2       	rjmp	.+1500   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4a40:	ae e4       	ldi	r26, 0x4E	; 78
    4a42:	b0 e0       	ldi	r27, 0x00	; 0
    4a44:	ee e4       	ldi	r30, 0x4E	; 78
    4a46:	f0 e0       	ldi	r31, 0x00	; 0
    4a48:	80 81       	ld	r24, Z
    4a4a:	81 60       	ori	r24, 0x01	; 1
    4a4c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4a4e:	ae e4       	ldi	r26, 0x4E	; 78
    4a50:	b0 e0       	ldi	r27, 0x00	; 0
    4a52:	ee e4       	ldi	r30, 0x4E	; 78
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	80 81       	ld	r24, Z
    4a58:	82 60       	ori	r24, 0x02	; 2
    4a5a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4a5c:	ae e4       	ldi	r26, 0x4E	; 78
    4a5e:	b0 e0       	ldi	r27, 0x00	; 0
    4a60:	ee e4       	ldi	r30, 0x4E	; 78
    4a62:	f0 e0       	ldi	r31, 0x00	; 0
    4a64:	80 81       	ld	r24, Z
    4a66:	84 60       	ori	r24, 0x04	; 4
    4a68:	8c 93       	st	X, r24
    4a6a:	d8 c2       	rjmp	.+1456   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4a6c:	19 82       	std	Y+1, r1	; 0x01
    4a6e:	d6 c2       	rjmp	.+1452   	; 0x501c <Spt_Init+0xbba>
        }
        break;

        case SPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    4a70:	ea 81       	ldd	r30, Y+2	; 0x02
    4a72:	fb 81       	ldd	r31, Y+3	; 0x03
    4a74:	81 81       	ldd	r24, Z+1	; 0x01
    4a76:	88 23       	and	r24, r24
    4a78:	e9 f4       	brne	.+58     	; 0x4ab4 <Spt_Init+0x652>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4a7a:	af e4       	ldi	r26, 0x4F	; 79
    4a7c:	b0 e0       	ldi	r27, 0x00	; 0
    4a7e:	ef e4       	ldi	r30, 0x4F	; 79
    4a80:	f0 e0       	ldi	r31, 0x00	; 0
    4a82:	80 81       	ld	r24, Z
    4a84:	8e 7f       	andi	r24, 0xFE	; 254
    4a86:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    4a88:	af e4       	ldi	r26, 0x4F	; 79
    4a8a:	b0 e0       	ldi	r27, 0x00	; 0
    4a8c:	ef e4       	ldi	r30, 0x4F	; 79
    4a8e:	f0 e0       	ldi	r31, 0x00	; 0
    4a90:	80 81       	ld	r24, Z
    4a92:	82 60       	ori	r24, 0x02	; 2
    4a94:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    4a96:	ae e4       	ldi	r26, 0x4E	; 78
    4a98:	b0 e0       	ldi	r27, 0x00	; 0
    4a9a:	ee e4       	ldi	r30, 0x4E	; 78
    4a9c:	f0 e0       	ldi	r31, 0x00	; 0
    4a9e:	80 81       	ld	r24, Z
    4aa0:	88 60       	ori	r24, 0x08	; 8
    4aa2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    4aa4:	ae e4       	ldi	r26, 0x4E	; 78
    4aa6:	b0 e0       	ldi	r27, 0x00	; 0
    4aa8:	ee e4       	ldi	r30, 0x4E	; 78
    4aaa:	f0 e0       	ldi	r31, 0x00	; 0
    4aac:	80 81       	ld	r24, Z
    4aae:	80 61       	ori	r24, 0x10	; 16
    4ab0:	8c 93       	st	X, r24
    4ab2:	01 c0       	rjmp	.+2      	; 0x4ab6 <Spt_Init+0x654>
        //         // TODO
        //         // TODO
        //     }
        else
        {
            returnValue = SPT_ERROR;
    4ab4:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    4ab6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ab8:	fb 81       	ldd	r31, Y+3	; 0x03
    4aba:	82 81       	ldd	r24, Z+2	; 0x02
    4abc:	28 2f       	mov	r18, r24
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	3b 87       	std	Y+11, r19	; 0x0b
    4ac2:	2a 87       	std	Y+10, r18	; 0x0a
    4ac4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ac6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ac8:	81 30       	cpi	r24, 0x01	; 1
    4aca:	91 05       	cpc	r25, r1
    4acc:	21 f1       	breq	.+72     	; 0x4b16 <Spt_Init+0x6b4>
    4ace:	2a 85       	ldd	r18, Y+10	; 0x0a
    4ad0:	3b 85       	ldd	r19, Y+11	; 0x0b
    4ad2:	22 30       	cpi	r18, 0x02	; 2
    4ad4:	31 05       	cpc	r19, r1
    4ad6:	2c f4       	brge	.+10     	; 0x4ae2 <Spt_Init+0x680>
    4ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ada:	9b 85       	ldd	r25, Y+11	; 0x0b
    4adc:	00 97       	sbiw	r24, 0x00	; 0
    4ade:	61 f0       	breq	.+24     	; 0x4af8 <Spt_Init+0x696>
    4ae0:	47 c0       	rjmp	.+142    	; 0x4b70 <Spt_Init+0x70e>
    4ae2:	2a 85       	ldd	r18, Y+10	; 0x0a
    4ae4:	3b 85       	ldd	r19, Y+11	; 0x0b
    4ae6:	22 30       	cpi	r18, 0x02	; 2
    4ae8:	31 05       	cpc	r19, r1
    4aea:	21 f1       	breq	.+72     	; 0x4b34 <Spt_Init+0x6d2>
    4aec:	8a 85       	ldd	r24, Y+10	; 0x0a
    4aee:	9b 85       	ldd	r25, Y+11	; 0x0b
    4af0:	83 30       	cpi	r24, 0x03	; 3
    4af2:	91 05       	cpc	r25, r1
    4af4:	71 f1       	breq	.+92     	; 0x4b52 <Spt_Init+0x6f0>
    4af6:	3c c0       	rjmp	.+120    	; 0x4b70 <Spt_Init+0x70e>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    4af8:	af e4       	ldi	r26, 0x4F	; 79
    4afa:	b0 e0       	ldi	r27, 0x00	; 0
    4afc:	ef e4       	ldi	r30, 0x4F	; 79
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	80 81       	ld	r24, Z
    4b02:	8f 7e       	andi	r24, 0xEF	; 239
    4b04:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    4b06:	af e4       	ldi	r26, 0x4F	; 79
    4b08:	b0 e0       	ldi	r27, 0x00	; 0
    4b0a:	ef e4       	ldi	r30, 0x4F	; 79
    4b0c:	f0 e0       	ldi	r31, 0x00	; 0
    4b0e:	80 81       	ld	r24, Z
    4b10:	8f 7d       	andi	r24, 0xDF	; 223
    4b12:	8c 93       	st	X, r24
    4b14:	2e c0       	rjmp	.+92     	; 0x4b72 <Spt_Init+0x710>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    4b16:	af e4       	ldi	r26, 0x4F	; 79
    4b18:	b0 e0       	ldi	r27, 0x00	; 0
    4b1a:	ef e4       	ldi	r30, 0x4F	; 79
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	80 81       	ld	r24, Z
    4b20:	80 61       	ori	r24, 0x10	; 16
    4b22:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    4b24:	af e4       	ldi	r26, 0x4F	; 79
    4b26:	b0 e0       	ldi	r27, 0x00	; 0
    4b28:	ef e4       	ldi	r30, 0x4F	; 79
    4b2a:	f0 e0       	ldi	r31, 0x00	; 0
    4b2c:	80 81       	ld	r24, Z
    4b2e:	8f 7d       	andi	r24, 0xDF	; 223
    4b30:	8c 93       	st	X, r24
    4b32:	1f c0       	rjmp	.+62     	; 0x4b72 <Spt_Init+0x710>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    4b34:	af e4       	ldi	r26, 0x4F	; 79
    4b36:	b0 e0       	ldi	r27, 0x00	; 0
    4b38:	ef e4       	ldi	r30, 0x4F	; 79
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	80 81       	ld	r24, Z
    4b3e:	80 61       	ori	r24, 0x10	; 16
    4b40:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    4b42:	af e4       	ldi	r26, 0x4F	; 79
    4b44:	b0 e0       	ldi	r27, 0x00	; 0
    4b46:	ef e4       	ldi	r30, 0x4F	; 79
    4b48:	f0 e0       	ldi	r31, 0x00	; 0
    4b4a:	80 81       	ld	r24, Z
    4b4c:	80 62       	ori	r24, 0x20	; 32
    4b4e:	8c 93       	st	X, r24
    4b50:	10 c0       	rjmp	.+32     	; 0x4b72 <Spt_Init+0x710>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    4b52:	af e4       	ldi	r26, 0x4F	; 79
    4b54:	b0 e0       	ldi	r27, 0x00	; 0
    4b56:	ef e4       	ldi	r30, 0x4F	; 79
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	8f 7e       	andi	r24, 0xEF	; 239
    4b5e:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    4b60:	af e4       	ldi	r26, 0x4F	; 79
    4b62:	b0 e0       	ldi	r27, 0x00	; 0
    4b64:	ef e4       	ldi	r30, 0x4F	; 79
    4b66:	f0 e0       	ldi	r31, 0x00	; 0
    4b68:	80 81       	ld	r24, Z
    4b6a:	80 62       	ori	r24, 0x20	; 32
    4b6c:	8c 93       	st	X, r24
    4b6e:	01 c0       	rjmp	.+2      	; 0x4b72 <Spt_Init+0x710>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4b70:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    4b72:	ea 81       	ldd	r30, Y+2	; 0x02
    4b74:	fb 81       	ldd	r31, Y+3	; 0x03
    4b76:	83 81       	ldd	r24, Z+3	; 0x03
    4b78:	28 2f       	mov	r18, r24
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	39 87       	std	Y+9, r19	; 0x09
    4b7e:	28 87       	std	Y+8, r18	; 0x08
    4b80:	88 85       	ldd	r24, Y+8	; 0x08
    4b82:	99 85       	ldd	r25, Y+9	; 0x09
    4b84:	84 30       	cpi	r24, 0x04	; 4
    4b86:	91 05       	cpc	r25, r1
    4b88:	09 f4       	brne	.+2      	; 0x4b8c <Spt_Init+0x72a>
    4b8a:	77 c0       	rjmp	.+238    	; 0x4c7a <Spt_Init+0x818>
    4b8c:	28 85       	ldd	r18, Y+8	; 0x08
    4b8e:	39 85       	ldd	r19, Y+9	; 0x09
    4b90:	25 30       	cpi	r18, 0x05	; 5
    4b92:	31 05       	cpc	r19, r1
    4b94:	8c f4       	brge	.+34     	; 0x4bb8 <Spt_Init+0x756>
    4b96:	88 85       	ldd	r24, Y+8	; 0x08
    4b98:	99 85       	ldd	r25, Y+9	; 0x09
    4b9a:	81 30       	cpi	r24, 0x01	; 1
    4b9c:	91 05       	cpc	r25, r1
    4b9e:	09 f4       	brne	.+2      	; 0x4ba2 <Spt_Init+0x740>
    4ba0:	40 c0       	rjmp	.+128    	; 0x4c22 <Spt_Init+0x7c0>
    4ba2:	28 85       	ldd	r18, Y+8	; 0x08
    4ba4:	39 85       	ldd	r19, Y+9	; 0x09
    4ba6:	22 30       	cpi	r18, 0x02	; 2
    4ba8:	31 05       	cpc	r19, r1
    4baa:	09 f4       	brne	.+2      	; 0x4bae <Spt_Init+0x74c>
    4bac:	50 c0       	rjmp	.+160    	; 0x4c4e <Spt_Init+0x7ec>
    4bae:	88 85       	ldd	r24, Y+8	; 0x08
    4bb0:	99 85       	ldd	r25, Y+9	; 0x09
    4bb2:	00 97       	sbiw	r24, 0x00	; 0
    4bb4:	01 f1       	breq	.+64     	; 0x4bf6 <Spt_Init+0x794>
    4bb6:	cf c0       	rjmp	.+414    	; 0x4d56 <Spt_Init+0x8f4>
    4bb8:	28 85       	ldd	r18, Y+8	; 0x08
    4bba:	39 85       	ldd	r19, Y+9	; 0x09
    4bbc:	27 30       	cpi	r18, 0x07	; 7
    4bbe:	31 05       	cpc	r19, r1
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <Spt_Init+0x762>
    4bc2:	87 c0       	rjmp	.+270    	; 0x4cd2 <Spt_Init+0x870>
    4bc4:	88 85       	ldd	r24, Y+8	; 0x08
    4bc6:	99 85       	ldd	r25, Y+9	; 0x09
    4bc8:	88 30       	cpi	r24, 0x08	; 8
    4bca:	91 05       	cpc	r25, r1
    4bcc:	3c f4       	brge	.+14     	; 0x4bdc <Spt_Init+0x77a>
    4bce:	28 85       	ldd	r18, Y+8	; 0x08
    4bd0:	39 85       	ldd	r19, Y+9	; 0x09
    4bd2:	26 30       	cpi	r18, 0x06	; 6
    4bd4:	31 05       	cpc	r19, r1
    4bd6:	09 f4       	brne	.+2      	; 0x4bda <Spt_Init+0x778>
    4bd8:	66 c0       	rjmp	.+204    	; 0x4ca6 <Spt_Init+0x844>
    4bda:	bd c0       	rjmp	.+378    	; 0x4d56 <Spt_Init+0x8f4>
    4bdc:	88 85       	ldd	r24, Y+8	; 0x08
    4bde:	99 85       	ldd	r25, Y+9	; 0x09
    4be0:	88 30       	cpi	r24, 0x08	; 8
    4be2:	91 05       	cpc	r25, r1
    4be4:	09 f4       	brne	.+2      	; 0x4be8 <Spt_Init+0x786>
    4be6:	8b c0       	rjmp	.+278    	; 0x4cfe <Spt_Init+0x89c>
    4be8:	28 85       	ldd	r18, Y+8	; 0x08
    4bea:	39 85       	ldd	r19, Y+9	; 0x09
    4bec:	29 30       	cpi	r18, 0x09	; 9
    4bee:	31 05       	cpc	r19, r1
    4bf0:	09 f4       	brne	.+2      	; 0x4bf4 <Spt_Init+0x792>
    4bf2:	9b c0       	rjmp	.+310    	; 0x4d2a <Spt_Init+0x8c8>
    4bf4:	b0 c0       	rjmp	.+352    	; 0x4d56 <Spt_Init+0x8f4>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4bf6:	ae e4       	ldi	r26, 0x4E	; 78
    4bf8:	b0 e0       	ldi	r27, 0x00	; 0
    4bfa:	ee e4       	ldi	r30, 0x4E	; 78
    4bfc:	f0 e0       	ldi	r31, 0x00	; 0
    4bfe:	80 81       	ld	r24, Z
    4c00:	8e 7f       	andi	r24, 0xFE	; 254
    4c02:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4c04:	ae e4       	ldi	r26, 0x4E	; 78
    4c06:	b0 e0       	ldi	r27, 0x00	; 0
    4c08:	ee e4       	ldi	r30, 0x4E	; 78
    4c0a:	f0 e0       	ldi	r31, 0x00	; 0
    4c0c:	80 81       	ld	r24, Z
    4c0e:	8d 7f       	andi	r24, 0xFD	; 253
    4c10:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4c12:	ae e4       	ldi	r26, 0x4E	; 78
    4c14:	b0 e0       	ldi	r27, 0x00	; 0
    4c16:	ee e4       	ldi	r30, 0x4E	; 78
    4c18:	f0 e0       	ldi	r31, 0x00	; 0
    4c1a:	80 81       	ld	r24, Z
    4c1c:	8b 7f       	andi	r24, 0xFB	; 251
    4c1e:	8c 93       	st	X, r24
    4c20:	fd c1       	rjmp	.+1018   	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4c22:	ae e4       	ldi	r26, 0x4E	; 78
    4c24:	b0 e0       	ldi	r27, 0x00	; 0
    4c26:	ee e4       	ldi	r30, 0x4E	; 78
    4c28:	f0 e0       	ldi	r31, 0x00	; 0
    4c2a:	80 81       	ld	r24, Z
    4c2c:	81 60       	ori	r24, 0x01	; 1
    4c2e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4c30:	ae e4       	ldi	r26, 0x4E	; 78
    4c32:	b0 e0       	ldi	r27, 0x00	; 0
    4c34:	ee e4       	ldi	r30, 0x4E	; 78
    4c36:	f0 e0       	ldi	r31, 0x00	; 0
    4c38:	80 81       	ld	r24, Z
    4c3a:	8d 7f       	andi	r24, 0xFD	; 253
    4c3c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4c3e:	ae e4       	ldi	r26, 0x4E	; 78
    4c40:	b0 e0       	ldi	r27, 0x00	; 0
    4c42:	ee e4       	ldi	r30, 0x4E	; 78
    4c44:	f0 e0       	ldi	r31, 0x00	; 0
    4c46:	80 81       	ld	r24, Z
    4c48:	8b 7f       	andi	r24, 0xFB	; 251
    4c4a:	8c 93       	st	X, r24
    4c4c:	e7 c1       	rjmp	.+974    	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4c4e:	ae e4       	ldi	r26, 0x4E	; 78
    4c50:	b0 e0       	ldi	r27, 0x00	; 0
    4c52:	ee e4       	ldi	r30, 0x4E	; 78
    4c54:	f0 e0       	ldi	r31, 0x00	; 0
    4c56:	80 81       	ld	r24, Z
    4c58:	8e 7f       	andi	r24, 0xFE	; 254
    4c5a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4c5c:	ae e4       	ldi	r26, 0x4E	; 78
    4c5e:	b0 e0       	ldi	r27, 0x00	; 0
    4c60:	ee e4       	ldi	r30, 0x4E	; 78
    4c62:	f0 e0       	ldi	r31, 0x00	; 0
    4c64:	80 81       	ld	r24, Z
    4c66:	82 60       	ori	r24, 0x02	; 2
    4c68:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4c6a:	ae e4       	ldi	r26, 0x4E	; 78
    4c6c:	b0 e0       	ldi	r27, 0x00	; 0
    4c6e:	ee e4       	ldi	r30, 0x4E	; 78
    4c70:	f0 e0       	ldi	r31, 0x00	; 0
    4c72:	80 81       	ld	r24, Z
    4c74:	8b 7f       	andi	r24, 0xFB	; 251
    4c76:	8c 93       	st	X, r24
    4c78:	d1 c1       	rjmp	.+930    	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4c7a:	ae e4       	ldi	r26, 0x4E	; 78
    4c7c:	b0 e0       	ldi	r27, 0x00	; 0
    4c7e:	ee e4       	ldi	r30, 0x4E	; 78
    4c80:	f0 e0       	ldi	r31, 0x00	; 0
    4c82:	80 81       	ld	r24, Z
    4c84:	81 60       	ori	r24, 0x01	; 1
    4c86:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4c88:	ae e4       	ldi	r26, 0x4E	; 78
    4c8a:	b0 e0       	ldi	r27, 0x00	; 0
    4c8c:	ee e4       	ldi	r30, 0x4E	; 78
    4c8e:	f0 e0       	ldi	r31, 0x00	; 0
    4c90:	80 81       	ld	r24, Z
    4c92:	82 60       	ori	r24, 0x02	; 2
    4c94:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4c96:	ae e4       	ldi	r26, 0x4E	; 78
    4c98:	b0 e0       	ldi	r27, 0x00	; 0
    4c9a:	ee e4       	ldi	r30, 0x4E	; 78
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	80 81       	ld	r24, Z
    4ca0:	8b 7f       	andi	r24, 0xFB	; 251
    4ca2:	8c 93       	st	X, r24
    4ca4:	bb c1       	rjmp	.+886    	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4ca6:	ae e4       	ldi	r26, 0x4E	; 78
    4ca8:	b0 e0       	ldi	r27, 0x00	; 0
    4caa:	ee e4       	ldi	r30, 0x4E	; 78
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	80 81       	ld	r24, Z
    4cb0:	8e 7f       	andi	r24, 0xFE	; 254
    4cb2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4cb4:	ae e4       	ldi	r26, 0x4E	; 78
    4cb6:	b0 e0       	ldi	r27, 0x00	; 0
    4cb8:	ee e4       	ldi	r30, 0x4E	; 78
    4cba:	f0 e0       	ldi	r31, 0x00	; 0
    4cbc:	80 81       	ld	r24, Z
    4cbe:	8d 7f       	andi	r24, 0xFD	; 253
    4cc0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4cc2:	ae e4       	ldi	r26, 0x4E	; 78
    4cc4:	b0 e0       	ldi	r27, 0x00	; 0
    4cc6:	ee e4       	ldi	r30, 0x4E	; 78
    4cc8:	f0 e0       	ldi	r31, 0x00	; 0
    4cca:	80 81       	ld	r24, Z
    4ccc:	84 60       	ori	r24, 0x04	; 4
    4cce:	8c 93       	st	X, r24
    4cd0:	a5 c1       	rjmp	.+842    	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4cd2:	ae e4       	ldi	r26, 0x4E	; 78
    4cd4:	b0 e0       	ldi	r27, 0x00	; 0
    4cd6:	ee e4       	ldi	r30, 0x4E	; 78
    4cd8:	f0 e0       	ldi	r31, 0x00	; 0
    4cda:	80 81       	ld	r24, Z
    4cdc:	81 60       	ori	r24, 0x01	; 1
    4cde:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4ce0:	ae e4       	ldi	r26, 0x4E	; 78
    4ce2:	b0 e0       	ldi	r27, 0x00	; 0
    4ce4:	ee e4       	ldi	r30, 0x4E	; 78
    4ce6:	f0 e0       	ldi	r31, 0x00	; 0
    4ce8:	80 81       	ld	r24, Z
    4cea:	8d 7f       	andi	r24, 0xFD	; 253
    4cec:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4cee:	ae e4       	ldi	r26, 0x4E	; 78
    4cf0:	b0 e0       	ldi	r27, 0x00	; 0
    4cf2:	ee e4       	ldi	r30, 0x4E	; 78
    4cf4:	f0 e0       	ldi	r31, 0x00	; 0
    4cf6:	80 81       	ld	r24, Z
    4cf8:	84 60       	ori	r24, 0x04	; 4
    4cfa:	8c 93       	st	X, r24
    4cfc:	8f c1       	rjmp	.+798    	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4cfe:	ae e4       	ldi	r26, 0x4E	; 78
    4d00:	b0 e0       	ldi	r27, 0x00	; 0
    4d02:	ee e4       	ldi	r30, 0x4E	; 78
    4d04:	f0 e0       	ldi	r31, 0x00	; 0
    4d06:	80 81       	ld	r24, Z
    4d08:	8e 7f       	andi	r24, 0xFE	; 254
    4d0a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4d0c:	ae e4       	ldi	r26, 0x4E	; 78
    4d0e:	b0 e0       	ldi	r27, 0x00	; 0
    4d10:	ee e4       	ldi	r30, 0x4E	; 78
    4d12:	f0 e0       	ldi	r31, 0x00	; 0
    4d14:	80 81       	ld	r24, Z
    4d16:	82 60       	ori	r24, 0x02	; 2
    4d18:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4d1a:	ae e4       	ldi	r26, 0x4E	; 78
    4d1c:	b0 e0       	ldi	r27, 0x00	; 0
    4d1e:	ee e4       	ldi	r30, 0x4E	; 78
    4d20:	f0 e0       	ldi	r31, 0x00	; 0
    4d22:	80 81       	ld	r24, Z
    4d24:	84 60       	ori	r24, 0x04	; 4
    4d26:	8c 93       	st	X, r24
    4d28:	79 c1       	rjmp	.+754    	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4d2a:	ae e4       	ldi	r26, 0x4E	; 78
    4d2c:	b0 e0       	ldi	r27, 0x00	; 0
    4d2e:	ee e4       	ldi	r30, 0x4E	; 78
    4d30:	f0 e0       	ldi	r31, 0x00	; 0
    4d32:	80 81       	ld	r24, Z
    4d34:	81 60       	ori	r24, 0x01	; 1
    4d36:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4d38:	ae e4       	ldi	r26, 0x4E	; 78
    4d3a:	b0 e0       	ldi	r27, 0x00	; 0
    4d3c:	ee e4       	ldi	r30, 0x4E	; 78
    4d3e:	f0 e0       	ldi	r31, 0x00	; 0
    4d40:	80 81       	ld	r24, Z
    4d42:	82 60       	ori	r24, 0x02	; 2
    4d44:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4d46:	ae e4       	ldi	r26, 0x4E	; 78
    4d48:	b0 e0       	ldi	r27, 0x00	; 0
    4d4a:	ee e4       	ldi	r30, 0x4E	; 78
    4d4c:	f0 e0       	ldi	r31, 0x00	; 0
    4d4e:	80 81       	ld	r24, Z
    4d50:	84 60       	ori	r24, 0x04	; 4
    4d52:	8c 93       	st	X, r24
    4d54:	63 c1       	rjmp	.+710    	; 0x501c <Spt_Init+0xbba>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4d56:	19 82       	std	Y+1, r1	; 0x01
    4d58:	61 c1       	rjmp	.+706    	; 0x501c <Spt_Init+0xbba>
        }
        break;

         case SPT_CHANNEL_TIMER2:
		 /*Waveform Generation Mode*/
		 if (config->mode == SPT_MODE_FAST_PWM)
    4d5a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d5c:	fb 81       	ldd	r31, Y+3	; 0x03
    4d5e:	81 81       	ldd	r24, Z+1	; 0x01
    4d60:	88 23       	and	r24, r24
    4d62:	79 f4       	brne	.+30     	; 0x4d82 <Spt_Init+0x920>
		 {
			 SET_BIT(TCCR2,TCCR2_WGM20);
    4d64:	a5 e4       	ldi	r26, 0x45	; 69
    4d66:	b0 e0       	ldi	r27, 0x00	; 0
    4d68:	e5 e4       	ldi	r30, 0x45	; 69
    4d6a:	f0 e0       	ldi	r31, 0x00	; 0
    4d6c:	80 81       	ld	r24, Z
    4d6e:	80 64       	ori	r24, 0x40	; 64
    4d70:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_WGM21);
    4d72:	a5 e4       	ldi	r26, 0x45	; 69
    4d74:	b0 e0       	ldi	r27, 0x00	; 0
    4d76:	e5 e4       	ldi	r30, 0x45	; 69
    4d78:	f0 e0       	ldi	r31, 0x00	; 0
    4d7a:	80 81       	ld	r24, Z
    4d7c:	88 60       	ori	r24, 0x08	; 8
    4d7e:	8c 93       	st	X, r24
    4d80:	01 c0       	rjmp	.+2      	; 0x4d84 <Spt_Init+0x922>
//			 // TODO
//			 // TODO
//		 }
		 else
		 {
			 returnValue = SPT_ERROR;
    4d82:	19 82       	std	Y+1, r1	; 0x01
		 }

		 /*Compare Match Output Mode*/
		 switch (config->output)
    4d84:	ea 81       	ldd	r30, Y+2	; 0x02
    4d86:	fb 81       	ldd	r31, Y+3	; 0x03
    4d88:	82 81       	ldd	r24, Z+2	; 0x02
    4d8a:	28 2f       	mov	r18, r24
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	3f 83       	std	Y+7, r19	; 0x07
    4d90:	2e 83       	std	Y+6, r18	; 0x06
    4d92:	8e 81       	ldd	r24, Y+6	; 0x06
    4d94:	9f 81       	ldd	r25, Y+7	; 0x07
    4d96:	81 30       	cpi	r24, 0x01	; 1
    4d98:	91 05       	cpc	r25, r1
    4d9a:	21 f1       	breq	.+72     	; 0x4de4 <Spt_Init+0x982>
    4d9c:	2e 81       	ldd	r18, Y+6	; 0x06
    4d9e:	3f 81       	ldd	r19, Y+7	; 0x07
    4da0:	22 30       	cpi	r18, 0x02	; 2
    4da2:	31 05       	cpc	r19, r1
    4da4:	2c f4       	brge	.+10     	; 0x4db0 <Spt_Init+0x94e>
    4da6:	8e 81       	ldd	r24, Y+6	; 0x06
    4da8:	9f 81       	ldd	r25, Y+7	; 0x07
    4daa:	00 97       	sbiw	r24, 0x00	; 0
    4dac:	61 f0       	breq	.+24     	; 0x4dc6 <Spt_Init+0x964>
    4dae:	47 c0       	rjmp	.+142    	; 0x4e3e <Spt_Init+0x9dc>
    4db0:	2e 81       	ldd	r18, Y+6	; 0x06
    4db2:	3f 81       	ldd	r19, Y+7	; 0x07
    4db4:	22 30       	cpi	r18, 0x02	; 2
    4db6:	31 05       	cpc	r19, r1
    4db8:	21 f1       	breq	.+72     	; 0x4e02 <Spt_Init+0x9a0>
    4dba:	8e 81       	ldd	r24, Y+6	; 0x06
    4dbc:	9f 81       	ldd	r25, Y+7	; 0x07
    4dbe:	83 30       	cpi	r24, 0x03	; 3
    4dc0:	91 05       	cpc	r25, r1
    4dc2:	71 f1       	breq	.+92     	; 0x4e20 <Spt_Init+0x9be>
    4dc4:	3c c0       	rjmp	.+120    	; 0x4e3e <Spt_Init+0x9dc>
		 {
		 case SPT_OUTPUT_NORMAL:
			 CLR_BIT(TCCR2,TCCR2_COM20);
    4dc6:	a5 e4       	ldi	r26, 0x45	; 69
    4dc8:	b0 e0       	ldi	r27, 0x00	; 0
    4dca:	e5 e4       	ldi	r30, 0x45	; 69
    4dcc:	f0 e0       	ldi	r31, 0x00	; 0
    4dce:	80 81       	ld	r24, Z
    4dd0:	8f 7e       	andi	r24, 0xEF	; 239
    4dd2:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_COM21);
    4dd4:	a5 e4       	ldi	r26, 0x45	; 69
    4dd6:	b0 e0       	ldi	r27, 0x00	; 0
    4dd8:	e5 e4       	ldi	r30, 0x45	; 69
    4dda:	f0 e0       	ldi	r31, 0x00	; 0
    4ddc:	80 81       	ld	r24, Z
    4dde:	8f 7d       	andi	r24, 0xDF	; 223
    4de0:	8c 93       	st	X, r24
    4de2:	2e c0       	rjmp	.+92     	; 0x4e40 <Spt_Init+0x9de>
			 // TODO
			 break;
		 case SPT_OUTPUT_TOGGLE:
			 SET_BIT(TCCR2,TCCR2_COM20);
    4de4:	a5 e4       	ldi	r26, 0x45	; 69
    4de6:	b0 e0       	ldi	r27, 0x00	; 0
    4de8:	e5 e4       	ldi	r30, 0x45	; 69
    4dea:	f0 e0       	ldi	r31, 0x00	; 0
    4dec:	80 81       	ld	r24, Z
    4dee:	80 61       	ori	r24, 0x10	; 16
    4df0:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_COM21);
    4df2:	a5 e4       	ldi	r26, 0x45	; 69
    4df4:	b0 e0       	ldi	r27, 0x00	; 0
    4df6:	e5 e4       	ldi	r30, 0x45	; 69
    4df8:	f0 e0       	ldi	r31, 0x00	; 0
    4dfa:	80 81       	ld	r24, Z
    4dfc:	8f 7d       	andi	r24, 0xDF	; 223
    4dfe:	8c 93       	st	X, r24
    4e00:	1f c0       	rjmp	.+62     	; 0x4e40 <Spt_Init+0x9de>
			 // TODO
			 break;
		 case SPT_OUTPUT_SET:
			 SET_BIT(TCCR2,TCCR2_COM20);
    4e02:	a5 e4       	ldi	r26, 0x45	; 69
    4e04:	b0 e0       	ldi	r27, 0x00	; 0
    4e06:	e5 e4       	ldi	r30, 0x45	; 69
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	80 81       	ld	r24, Z
    4e0c:	80 61       	ori	r24, 0x10	; 16
    4e0e:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_COM21);
    4e10:	a5 e4       	ldi	r26, 0x45	; 69
    4e12:	b0 e0       	ldi	r27, 0x00	; 0
    4e14:	e5 e4       	ldi	r30, 0x45	; 69
    4e16:	f0 e0       	ldi	r31, 0x00	; 0
    4e18:	80 81       	ld	r24, Z
    4e1a:	80 62       	ori	r24, 0x20	; 32
    4e1c:	8c 93       	st	X, r24
    4e1e:	10 c0       	rjmp	.+32     	; 0x4e40 <Spt_Init+0x9de>
			 // TODO
			 break;
		 case SPT_OUTPUT_CLEAR:
			 CLR_BIT(TCCR2,TCCR2_COM20);
    4e20:	a5 e4       	ldi	r26, 0x45	; 69
    4e22:	b0 e0       	ldi	r27, 0x00	; 0
    4e24:	e5 e4       	ldi	r30, 0x45	; 69
    4e26:	f0 e0       	ldi	r31, 0x00	; 0
    4e28:	80 81       	ld	r24, Z
    4e2a:	8f 7e       	andi	r24, 0xEF	; 239
    4e2c:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_COM21);
    4e2e:	a5 e4       	ldi	r26, 0x45	; 69
    4e30:	b0 e0       	ldi	r27, 0x00	; 0
    4e32:	e5 e4       	ldi	r30, 0x45	; 69
    4e34:	f0 e0       	ldi	r31, 0x00	; 0
    4e36:	80 81       	ld	r24, Z
    4e38:	80 62       	ori	r24, 0x20	; 32
    4e3a:	8c 93       	st	X, r24
    4e3c:	01 c0       	rjmp	.+2      	; 0x4e40 <Spt_Init+0x9de>
			 // TODO
			 break;
		 default:
			 returnValue = SPT_ERROR;
    4e3e:	19 82       	std	Y+1, r1	; 0x01
			 break;
		 }

		 /*Clock Select*/
		 switch (config->prescaler)
    4e40:	ea 81       	ldd	r30, Y+2	; 0x02
    4e42:	fb 81       	ldd	r31, Y+3	; 0x03
    4e44:	83 81       	ldd	r24, Z+3	; 0x03
    4e46:	28 2f       	mov	r18, r24
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	3d 83       	std	Y+5, r19	; 0x05
    4e4c:	2c 83       	std	Y+4, r18	; 0x04
    4e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e50:	9d 81       	ldd	r25, Y+5	; 0x05
    4e52:	83 30       	cpi	r24, 0x03	; 3
    4e54:	91 05       	cpc	r25, r1
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <Spt_Init+0x9f8>
    4e58:	70 c0       	rjmp	.+224    	; 0x4f3a <Spt_Init+0xad8>
    4e5a:	2c 81       	ldd	r18, Y+4	; 0x04
    4e5c:	3d 81       	ldd	r19, Y+5	; 0x05
    4e5e:	24 30       	cpi	r18, 0x04	; 4
    4e60:	31 05       	cpc	r19, r1
    4e62:	84 f4       	brge	.+32     	; 0x4e84 <Spt_Init+0xa22>
    4e64:	8c 81       	ldd	r24, Y+4	; 0x04
    4e66:	9d 81       	ldd	r25, Y+5	; 0x05
    4e68:	81 30       	cpi	r24, 0x01	; 1
    4e6a:	91 05       	cpc	r25, r1
    4e6c:	d1 f1       	breq	.+116    	; 0x4ee2 <Spt_Init+0xa80>
    4e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    4e70:	3d 81       	ldd	r19, Y+5	; 0x05
    4e72:	22 30       	cpi	r18, 0x02	; 2
    4e74:	31 05       	cpc	r19, r1
    4e76:	0c f0       	brlt	.+2      	; 0x4e7a <Spt_Init+0xa18>
    4e78:	4a c0       	rjmp	.+148    	; 0x4f0e <Spt_Init+0xaac>
    4e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e7e:	00 97       	sbiw	r24, 0x00	; 0
    4e80:	d1 f0       	breq	.+52     	; 0x4eb6 <Spt_Init+0xa54>
    4e82:	c9 c0       	rjmp	.+402    	; 0x5016 <Spt_Init+0xbb4>
    4e84:	2c 81       	ldd	r18, Y+4	; 0x04
    4e86:	3d 81       	ldd	r19, Y+5	; 0x05
    4e88:	25 30       	cpi	r18, 0x05	; 5
    4e8a:	31 05       	cpc	r19, r1
    4e8c:	09 f4       	brne	.+2      	; 0x4e90 <Spt_Init+0xa2e>
    4e8e:	81 c0       	rjmp	.+258    	; 0x4f92 <Spt_Init+0xb30>
    4e90:	8c 81       	ldd	r24, Y+4	; 0x04
    4e92:	9d 81       	ldd	r25, Y+5	; 0x05
    4e94:	85 30       	cpi	r24, 0x05	; 5
    4e96:	91 05       	cpc	r25, r1
    4e98:	0c f4       	brge	.+2      	; 0x4e9c <Spt_Init+0xa3a>
    4e9a:	65 c0       	rjmp	.+202    	; 0x4f66 <Spt_Init+0xb04>
    4e9c:	2c 81       	ldd	r18, Y+4	; 0x04
    4e9e:	3d 81       	ldd	r19, Y+5	; 0x05
    4ea0:	26 30       	cpi	r18, 0x06	; 6
    4ea2:	31 05       	cpc	r19, r1
    4ea4:	09 f4       	brne	.+2      	; 0x4ea8 <Spt_Init+0xa46>
    4ea6:	8b c0       	rjmp	.+278    	; 0x4fbe <Spt_Init+0xb5c>
    4ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    4eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    4eac:	87 30       	cpi	r24, 0x07	; 7
    4eae:	91 05       	cpc	r25, r1
    4eb0:	09 f4       	brne	.+2      	; 0x4eb4 <Spt_Init+0xa52>
    4eb2:	9b c0       	rjmp	.+310    	; 0x4fea <Spt_Init+0xb88>
    4eb4:	b0 c0       	rjmp	.+352    	; 0x5016 <Spt_Init+0xbb4>
		 {
		 case SPT_PRESCALER_0:
			 CLR_BIT(TCCR2,TCCR2_CS20);
    4eb6:	a5 e4       	ldi	r26, 0x45	; 69
    4eb8:	b0 e0       	ldi	r27, 0x00	; 0
    4eba:	e5 e4       	ldi	r30, 0x45	; 69
    4ebc:	f0 e0       	ldi	r31, 0x00	; 0
    4ebe:	80 81       	ld	r24, Z
    4ec0:	8e 7f       	andi	r24, 0xFE	; 254
    4ec2:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS21);
    4ec4:	a5 e4       	ldi	r26, 0x45	; 69
    4ec6:	b0 e0       	ldi	r27, 0x00	; 0
    4ec8:	e5 e4       	ldi	r30, 0x45	; 69
    4eca:	f0 e0       	ldi	r31, 0x00	; 0
    4ecc:	80 81       	ld	r24, Z
    4ece:	8d 7f       	andi	r24, 0xFD	; 253
    4ed0:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS22);
    4ed2:	a5 e4       	ldi	r26, 0x45	; 69
    4ed4:	b0 e0       	ldi	r27, 0x00	; 0
    4ed6:	e5 e4       	ldi	r30, 0x45	; 69
    4ed8:	f0 e0       	ldi	r31, 0x00	; 0
    4eda:	80 81       	ld	r24, Z
    4edc:	8b 7f       	andi	r24, 0xFB	; 251
    4ede:	8c 93       	st	X, r24
    4ee0:	9d c0       	rjmp	.+314    	; 0x501c <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_1:
			 SET_BIT(TCCR2,TCCR2_CS20);
    4ee2:	a5 e4       	ldi	r26, 0x45	; 69
    4ee4:	b0 e0       	ldi	r27, 0x00	; 0
    4ee6:	e5 e4       	ldi	r30, 0x45	; 69
    4ee8:	f0 e0       	ldi	r31, 0x00	; 0
    4eea:	80 81       	ld	r24, Z
    4eec:	81 60       	ori	r24, 0x01	; 1
    4eee:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS21);
    4ef0:	a5 e4       	ldi	r26, 0x45	; 69
    4ef2:	b0 e0       	ldi	r27, 0x00	; 0
    4ef4:	e5 e4       	ldi	r30, 0x45	; 69
    4ef6:	f0 e0       	ldi	r31, 0x00	; 0
    4ef8:	80 81       	ld	r24, Z
    4efa:	8d 7f       	andi	r24, 0xFD	; 253
    4efc:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS22);
    4efe:	a5 e4       	ldi	r26, 0x45	; 69
    4f00:	b0 e0       	ldi	r27, 0x00	; 0
    4f02:	e5 e4       	ldi	r30, 0x45	; 69
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	80 81       	ld	r24, Z
    4f08:	8b 7f       	andi	r24, 0xFB	; 251
    4f0a:	8c 93       	st	X, r24
    4f0c:	87 c0       	rjmp	.+270    	; 0x501c <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_8:
			 CLR_BIT(TCCR2,TCCR2_CS20);
    4f0e:	a5 e4       	ldi	r26, 0x45	; 69
    4f10:	b0 e0       	ldi	r27, 0x00	; 0
    4f12:	e5 e4       	ldi	r30, 0x45	; 69
    4f14:	f0 e0       	ldi	r31, 0x00	; 0
    4f16:	80 81       	ld	r24, Z
    4f18:	8e 7f       	andi	r24, 0xFE	; 254
    4f1a:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS21);
    4f1c:	a5 e4       	ldi	r26, 0x45	; 69
    4f1e:	b0 e0       	ldi	r27, 0x00	; 0
    4f20:	e5 e4       	ldi	r30, 0x45	; 69
    4f22:	f0 e0       	ldi	r31, 0x00	; 0
    4f24:	80 81       	ld	r24, Z
    4f26:	82 60       	ori	r24, 0x02	; 2
    4f28:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS22);
    4f2a:	a5 e4       	ldi	r26, 0x45	; 69
    4f2c:	b0 e0       	ldi	r27, 0x00	; 0
    4f2e:	e5 e4       	ldi	r30, 0x45	; 69
    4f30:	f0 e0       	ldi	r31, 0x00	; 0
    4f32:	80 81       	ld	r24, Z
    4f34:	8b 7f       	andi	r24, 0xFB	; 251
    4f36:	8c 93       	st	X, r24
    4f38:	71 c0       	rjmp	.+226    	; 0x501c <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_32:
			 SET_BIT(TCCR2,TCCR2_CS20);
    4f3a:	a5 e4       	ldi	r26, 0x45	; 69
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	e5 e4       	ldi	r30, 0x45	; 69
    4f40:	f0 e0       	ldi	r31, 0x00	; 0
    4f42:	80 81       	ld	r24, Z
    4f44:	81 60       	ori	r24, 0x01	; 1
    4f46:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS21);
    4f48:	a5 e4       	ldi	r26, 0x45	; 69
    4f4a:	b0 e0       	ldi	r27, 0x00	; 0
    4f4c:	e5 e4       	ldi	r30, 0x45	; 69
    4f4e:	f0 e0       	ldi	r31, 0x00	; 0
    4f50:	80 81       	ld	r24, Z
    4f52:	82 60       	ori	r24, 0x02	; 2
    4f54:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS22);
    4f56:	a5 e4       	ldi	r26, 0x45	; 69
    4f58:	b0 e0       	ldi	r27, 0x00	; 0
    4f5a:	e5 e4       	ldi	r30, 0x45	; 69
    4f5c:	f0 e0       	ldi	r31, 0x00	; 0
    4f5e:	80 81       	ld	r24, Z
    4f60:	8b 7f       	andi	r24, 0xFB	; 251
    4f62:	8c 93       	st	X, r24
    4f64:	5b c0       	rjmp	.+182    	; 0x501c <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_64:
			 CLR_BIT(TCCR2,TCCR2_CS20);
    4f66:	a5 e4       	ldi	r26, 0x45	; 69
    4f68:	b0 e0       	ldi	r27, 0x00	; 0
    4f6a:	e5 e4       	ldi	r30, 0x45	; 69
    4f6c:	f0 e0       	ldi	r31, 0x00	; 0
    4f6e:	80 81       	ld	r24, Z
    4f70:	8e 7f       	andi	r24, 0xFE	; 254
    4f72:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS21);
    4f74:	a5 e4       	ldi	r26, 0x45	; 69
    4f76:	b0 e0       	ldi	r27, 0x00	; 0
    4f78:	e5 e4       	ldi	r30, 0x45	; 69
    4f7a:	f0 e0       	ldi	r31, 0x00	; 0
    4f7c:	80 81       	ld	r24, Z
    4f7e:	8d 7f       	andi	r24, 0xFD	; 253
    4f80:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS22);
    4f82:	a5 e4       	ldi	r26, 0x45	; 69
    4f84:	b0 e0       	ldi	r27, 0x00	; 0
    4f86:	e5 e4       	ldi	r30, 0x45	; 69
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	80 81       	ld	r24, Z
    4f8c:	84 60       	ori	r24, 0x04	; 4
    4f8e:	8c 93       	st	X, r24
    4f90:	45 c0       	rjmp	.+138    	; 0x501c <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_128:
			 SET_BIT(TCCR2,TCCR2_CS20);
    4f92:	a5 e4       	ldi	r26, 0x45	; 69
    4f94:	b0 e0       	ldi	r27, 0x00	; 0
    4f96:	e5 e4       	ldi	r30, 0x45	; 69
    4f98:	f0 e0       	ldi	r31, 0x00	; 0
    4f9a:	80 81       	ld	r24, Z
    4f9c:	81 60       	ori	r24, 0x01	; 1
    4f9e:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS21);
    4fa0:	a5 e4       	ldi	r26, 0x45	; 69
    4fa2:	b0 e0       	ldi	r27, 0x00	; 0
    4fa4:	e5 e4       	ldi	r30, 0x45	; 69
    4fa6:	f0 e0       	ldi	r31, 0x00	; 0
    4fa8:	80 81       	ld	r24, Z
    4faa:	8d 7f       	andi	r24, 0xFD	; 253
    4fac:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS22);
    4fae:	a5 e4       	ldi	r26, 0x45	; 69
    4fb0:	b0 e0       	ldi	r27, 0x00	; 0
    4fb2:	e5 e4       	ldi	r30, 0x45	; 69
    4fb4:	f0 e0       	ldi	r31, 0x00	; 0
    4fb6:	80 81       	ld	r24, Z
    4fb8:	84 60       	ori	r24, 0x04	; 4
    4fba:	8c 93       	st	X, r24
    4fbc:	2f c0       	rjmp	.+94     	; 0x501c <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_256:
			 CLR_BIT(TCCR2,TCCR2_CS20);
    4fbe:	a5 e4       	ldi	r26, 0x45	; 69
    4fc0:	b0 e0       	ldi	r27, 0x00	; 0
    4fc2:	e5 e4       	ldi	r30, 0x45	; 69
    4fc4:	f0 e0       	ldi	r31, 0x00	; 0
    4fc6:	80 81       	ld	r24, Z
    4fc8:	8e 7f       	andi	r24, 0xFE	; 254
    4fca:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS21);
    4fcc:	a5 e4       	ldi	r26, 0x45	; 69
    4fce:	b0 e0       	ldi	r27, 0x00	; 0
    4fd0:	e5 e4       	ldi	r30, 0x45	; 69
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	80 81       	ld	r24, Z
    4fd6:	82 60       	ori	r24, 0x02	; 2
    4fd8:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS22);
    4fda:	a5 e4       	ldi	r26, 0x45	; 69
    4fdc:	b0 e0       	ldi	r27, 0x00	; 0
    4fde:	e5 e4       	ldi	r30, 0x45	; 69
    4fe0:	f0 e0       	ldi	r31, 0x00	; 0
    4fe2:	80 81       	ld	r24, Z
    4fe4:	84 60       	ori	r24, 0x04	; 4
    4fe6:	8c 93       	st	X, r24
    4fe8:	19 c0       	rjmp	.+50     	; 0x501c <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_1024:
			 SET_BIT(TCCR2,TCCR2_CS20);
    4fea:	a5 e4       	ldi	r26, 0x45	; 69
    4fec:	b0 e0       	ldi	r27, 0x00	; 0
    4fee:	e5 e4       	ldi	r30, 0x45	; 69
    4ff0:	f0 e0       	ldi	r31, 0x00	; 0
    4ff2:	80 81       	ld	r24, Z
    4ff4:	81 60       	ori	r24, 0x01	; 1
    4ff6:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS21);
    4ff8:	a5 e4       	ldi	r26, 0x45	; 69
    4ffa:	b0 e0       	ldi	r27, 0x00	; 0
    4ffc:	e5 e4       	ldi	r30, 0x45	; 69
    4ffe:	f0 e0       	ldi	r31, 0x00	; 0
    5000:	80 81       	ld	r24, Z
    5002:	82 60       	ori	r24, 0x02	; 2
    5004:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS22);
    5006:	a5 e4       	ldi	r26, 0x45	; 69
    5008:	b0 e0       	ldi	r27, 0x00	; 0
    500a:	e5 e4       	ldi	r30, 0x45	; 69
    500c:	f0 e0       	ldi	r31, 0x00	; 0
    500e:	80 81       	ld	r24, Z
    5010:	84 60       	ori	r24, 0x04	; 4
    5012:	8c 93       	st	X, r24
    5014:	03 c0       	rjmp	.+6      	; 0x501c <Spt_Init+0xbba>
			 // TODO
			 break;
		 default:
			 returnValue = SPT_ERROR;
    5016:	19 82       	std	Y+1, r1	; 0x01
    5018:	01 c0       	rjmp	.+2      	; 0x501c <Spt_Init+0xbba>
			 break;
		 }
		 break;

        default:
            returnValue = SPT_ERROR;
    501a:	19 82       	std	Y+1, r1	; 0x01
        }
        return returnValue;
    501c:	89 81       	ldd	r24, Y+1	; 0x01
}
    501e:	65 96       	adiw	r28, 0x15	; 21
    5020:	0f b6       	in	r0, 0x3f	; 63
    5022:	f8 94       	cli
    5024:	de bf       	out	0x3e, r29	; 62
    5026:	0f be       	out	0x3f, r0	; 63
    5028:	cd bf       	out	0x3d, r28	; 61
    502a:	cf 91       	pop	r28
    502c:	df 91       	pop	r29
    502e:	08 95       	ret

00005030 <Spt_Set_ICR1>:

void Spt_Set_ICR1(u16 value) {
    5030:	df 93       	push	r29
    5032:	cf 93       	push	r28
    5034:	00 d0       	rcall	.+0      	; 0x5036 <Spt_Set_ICR1+0x6>
    5036:	cd b7       	in	r28, 0x3d	; 61
    5038:	de b7       	in	r29, 0x3e	; 62
    503a:	9a 83       	std	Y+2, r25	; 0x02
    503c:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = value;
    503e:	e6 e4       	ldi	r30, 0x46	; 70
    5040:	f0 e0       	ldi	r31, 0x00	; 0
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	9a 81       	ldd	r25, Y+2	; 0x02
    5046:	91 83       	std	Z+1, r25	; 0x01
    5048:	80 83       	st	Z, r24
}
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	cf 91       	pop	r28
    5050:	df 91       	pop	r29
    5052:	08 95       	ret

00005054 <Get_OCR_Value>:

u16 Get_OCR_Value (u8 angle) {
    5054:	df 93       	push	r29
    5056:	cf 93       	push	r28
    5058:	0f 92       	push	r0
    505a:	cd b7       	in	r28, 0x3d	; 61
    505c:	de b7       	in	r29, 0x3e	; 62
    505e:	89 83       	std	Y+1, r24	; 0x01
    return ((angle*1000)/180)+1000;
    5060:	89 81       	ldd	r24, Y+1	; 0x01
    5062:	28 2f       	mov	r18, r24
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	88 ee       	ldi	r24, 0xE8	; 232
    5068:	93 e0       	ldi	r25, 0x03	; 3
    506a:	ac 01       	movw	r20, r24
    506c:	24 9f       	mul	r18, r20
    506e:	c0 01       	movw	r24, r0
    5070:	25 9f       	mul	r18, r21
    5072:	90 0d       	add	r25, r0
    5074:	34 9f       	mul	r19, r20
    5076:	90 0d       	add	r25, r0
    5078:	11 24       	eor	r1, r1
    507a:	24 eb       	ldi	r18, 0xB4	; 180
    507c:	30 e0       	ldi	r19, 0x00	; 0
    507e:	b9 01       	movw	r22, r18
    5080:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5084:	cb 01       	movw	r24, r22
    5086:	88 51       	subi	r24, 0x18	; 24
    5088:	9c 4f       	sbci	r25, 0xFC	; 252
}
    508a:	0f 90       	pop	r0
    508c:	cf 91       	pop	r28
    508e:	df 91       	pop	r29
    5090:	08 95       	ret

00005092 <Spt_StartTimer>:

Spt_ReturnType Spt_StartTimer(Spt_ChannelType channel, u16 value)
{
    5092:	df 93       	push	r29
    5094:	cf 93       	push	r28
    5096:	00 d0       	rcall	.+0      	; 0x5098 <Spt_StartTimer+0x6>
    5098:	00 d0       	rcall	.+0      	; 0x509a <Spt_StartTimer+0x8>
    509a:	00 d0       	rcall	.+0      	; 0x509c <Spt_StartTimer+0xa>
    509c:	cd b7       	in	r28, 0x3d	; 61
    509e:	de b7       	in	r29, 0x3e	; 62
    50a0:	8a 83       	std	Y+2, r24	; 0x02
    50a2:	7c 83       	std	Y+4, r23	; 0x04
    50a4:	6b 83       	std	Y+3, r22	; 0x03
    Spt_ReturnType returnValue = SPT_OK;
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    50aa:	8a 81       	ldd	r24, Y+2	; 0x02
    50ac:	28 2f       	mov	r18, r24
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	3e 83       	std	Y+6, r19	; 0x06
    50b2:	2d 83       	std	Y+5, r18	; 0x05
    50b4:	8d 81       	ldd	r24, Y+5	; 0x05
    50b6:	9e 81       	ldd	r25, Y+6	; 0x06
    50b8:	81 30       	cpi	r24, 0x01	; 1
    50ba:	91 05       	cpc	r25, r1
    50bc:	11 f1       	breq	.+68     	; 0x5102 <Spt_StartTimer+0x70>
    50be:	2d 81       	ldd	r18, Y+5	; 0x05
    50c0:	3e 81       	ldd	r19, Y+6	; 0x06
    50c2:	22 30       	cpi	r18, 0x02	; 2
    50c4:	31 05       	cpc	r19, r1
    50c6:	2c f4       	brge	.+10     	; 0x50d2 <Spt_StartTimer+0x40>
    50c8:	8d 81       	ldd	r24, Y+5	; 0x05
    50ca:	9e 81       	ldd	r25, Y+6	; 0x06
    50cc:	00 97       	sbiw	r24, 0x00	; 0
    50ce:	61 f0       	breq	.+24     	; 0x50e8 <Spt_StartTimer+0x56>
    50d0:	32 c0       	rjmp	.+100    	; 0x5136 <Spt_StartTimer+0xa4>
    50d2:	2d 81       	ldd	r18, Y+5	; 0x05
    50d4:	3e 81       	ldd	r19, Y+6	; 0x06
    50d6:	22 30       	cpi	r18, 0x02	; 2
    50d8:	31 05       	cpc	r19, r1
    50da:	d1 f0       	breq	.+52     	; 0x5110 <Spt_StartTimer+0x7e>
    50dc:	8d 81       	ldd	r24, Y+5	; 0x05
    50de:	9e 81       	ldd	r25, Y+6	; 0x06
    50e0:	83 30       	cpi	r24, 0x03	; 3
    50e2:	91 05       	cpc	r25, r1
    50e4:	e1 f0       	breq	.+56     	; 0x511e <Spt_StartTimer+0x8c>
    50e6:	27 c0       	rjmp	.+78     	; 0x5136 <Spt_StartTimer+0xa4>
    {
    case SPT_CHANNEL_TIMER0:
        if (value < 256)
    50e8:	8b 81       	ldd	r24, Y+3	; 0x03
    50ea:	9c 81       	ldd	r25, Y+4	; 0x04
    50ec:	8f 3f       	cpi	r24, 0xFF	; 255
    50ee:	91 05       	cpc	r25, r1
    50f0:	09 f0       	breq	.+2      	; 0x50f4 <Spt_StartTimer+0x62>
    50f2:	28 f4       	brcc	.+10     	; 0x50fe <Spt_StartTimer+0x6c>
        {
            OCR0 = value;
    50f4:	ec e5       	ldi	r30, 0x5C	; 92
    50f6:	f0 e0       	ldi	r31, 0x00	; 0
    50f8:	8b 81       	ldd	r24, Y+3	; 0x03
    50fa:	80 83       	st	Z, r24
    50fc:	1c c0       	rjmp	.+56     	; 0x5136 <Spt_StartTimer+0xa4>
        }
        else
        {
            returnValue = SPT_ERROR;
    50fe:	19 82       	std	Y+1, r1	; 0x01
    5100:	1a c0       	rjmp	.+52     	; 0x5136 <Spt_StartTimer+0xa4>
        }
        break;
    case SPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    5102:	ea e4       	ldi	r30, 0x4A	; 74
    5104:	f0 e0       	ldi	r31, 0x00	; 0
    5106:	8b 81       	ldd	r24, Y+3	; 0x03
    5108:	9c 81       	ldd	r25, Y+4	; 0x04
    510a:	91 83       	std	Z+1, r25	; 0x01
    510c:	80 83       	st	Z, r24
    510e:	13 c0       	rjmp	.+38     	; 0x5136 <Spt_StartTimer+0xa4>
        // TODO
        break;
    case SPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    5110:	e8 e4       	ldi	r30, 0x48	; 72
    5112:	f0 e0       	ldi	r31, 0x00	; 0
    5114:	8b 81       	ldd	r24, Y+3	; 0x03
    5116:	9c 81       	ldd	r25, Y+4	; 0x04
    5118:	91 83       	std	Z+1, r25	; 0x01
    511a:	80 83       	st	Z, r24
    511c:	0c c0       	rjmp	.+24     	; 0x5136 <Spt_StartTimer+0xa4>
            returnValue = SPT_ERROR;
        }
        // TODO
        break;
    case SPT_CHANNEL_TIMER2:
		if (value < 256)
    511e:	8b 81       	ldd	r24, Y+3	; 0x03
    5120:	9c 81       	ldd	r25, Y+4	; 0x04
    5122:	8f 3f       	cpi	r24, 0xFF	; 255
    5124:	91 05       	cpc	r25, r1
    5126:	09 f0       	breq	.+2      	; 0x512a <Spt_StartTimer+0x98>
    5128:	28 f4       	brcc	.+10     	; 0x5134 <Spt_StartTimer+0xa2>
		{
			OCR2 = value;
    512a:	e3 e4       	ldi	r30, 0x43	; 67
    512c:	f0 e0       	ldi	r31, 0x00	; 0
    512e:	8b 81       	ldd	r24, Y+3	; 0x03
    5130:	80 83       	st	Z, r24
    5132:	01 c0       	rjmp	.+2      	; 0x5136 <Spt_StartTimer+0xa4>
		}
		else
		{
			returnValue = SPT_ERROR;
    5134:	19 82       	std	Y+1, r1	; 0x01
		break;

    default:
        break;
    }
    return returnValue;
    5136:	89 81       	ldd	r24, Y+1	; 0x01
}
    5138:	26 96       	adiw	r28, 0x06	; 6
    513a:	0f b6       	in	r0, 0x3f	; 63
    513c:	f8 94       	cli
    513e:	de bf       	out	0x3e, r29	; 62
    5140:	0f be       	out	0x3f, r0	; 63
    5142:	cd bf       	out	0x3d, r28	; 61
    5144:	cf 91       	pop	r28
    5146:	df 91       	pop	r29
    5148:	08 95       	ret

0000514a <UART_Init>:
#include "UART.h"
#include "Registers.h"
#include "DIO.h"

void UART_Init(USART_Mode_Select mode,Parity_Mode pmode,Stop_Bit_Select sbit,Character_Size csize,Baud_Rate_Setting brate)
{
    514a:	0f 93       	push	r16
    514c:	df 93       	push	r29
    514e:	cf 93       	push	r28
    5150:	cd b7       	in	r28, 0x3d	; 61
    5152:	de b7       	in	r29, 0x3e	; 62
    5154:	2b 97       	sbiw	r28, 0x0b	; 11
    5156:	0f b6       	in	r0, 0x3f	; 63
    5158:	f8 94       	cli
    515a:	de bf       	out	0x3e, r29	; 62
    515c:	0f be       	out	0x3f, r0	; 63
    515e:	cd bf       	out	0x3d, r28	; 61
    5160:	89 83       	std	Y+1, r24	; 0x01
    5162:	6a 83       	std	Y+2, r22	; 0x02
    5164:	4b 83       	std	Y+3, r20	; 0x03
    5166:	2c 83       	std	Y+4, r18	; 0x04
    5168:	0d 83       	std	Y+5, r16	; 0x05
    SET_BIT(UCSRC, UCSRC_URSEL); // 3shan tekhali uart to play
    516a:	a0 e4       	ldi	r26, 0x40	; 64
    516c:	b0 e0       	ldi	r27, 0x00	; 0
    516e:	e0 e4       	ldi	r30, 0x40	; 64
    5170:	f0 e0       	ldi	r31, 0x00	; 0
    5172:	80 81       	ld	r24, Z
    5174:	80 68       	ori	r24, 0x80	; 128
    5176:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTD, DIO_PIN0, DIO_INPUT_FLOATING);
    5178:	83 e0       	ldi	r24, 0x03	; 3
    517a:	60 e0       	ldi	r22, 0x00	; 0
    517c:	40 e0       	ldi	r20, 0x00	; 0
    517e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
	DIO_SetPinMode(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);
    5182:	83 e0       	ldi	r24, 0x03	; 3
    5184:	61 e0       	ldi	r22, 0x01	; 1
    5186:	42 e0       	ldi	r20, 0x02	; 2
    5188:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>


    if(mode == Asynchronous)
    518c:	89 81       	ldd	r24, Y+1	; 0x01
    518e:	88 23       	and	r24, r24
    5190:	41 f4       	brne	.+16     	; 0x51a2 <UART_Init+0x58>
    {
        CLR_BIT(UCSRC,UCSRC_UMSEL);
    5192:	a0 e4       	ldi	r26, 0x40	; 64
    5194:	b0 e0       	ldi	r27, 0x00	; 0
    5196:	e0 e4       	ldi	r30, 0x40	; 64
    5198:	f0 e0       	ldi	r31, 0x00	; 0
    519a:	80 81       	ld	r24, Z
    519c:	8f 7b       	andi	r24, 0xBF	; 191
    519e:	8c 93       	st	X, r24
    51a0:	0a c0       	rjmp	.+20     	; 0x51b6 <UART_Init+0x6c>
    }else if(mode == Synchronous)
    51a2:	89 81       	ldd	r24, Y+1	; 0x01
    51a4:	81 30       	cpi	r24, 0x01	; 1
    51a6:	39 f4       	brne	.+14     	; 0x51b6 <UART_Init+0x6c>
    {
        SET_BIT(UCSRC,UCSRC_UMSEL);
    51a8:	a0 e4       	ldi	r26, 0x40	; 64
    51aa:	b0 e0       	ldi	r27, 0x00	; 0
    51ac:	e0 e4       	ldi	r30, 0x40	; 64
    51ae:	f0 e0       	ldi	r31, 0x00	; 0
    51b0:	80 81       	ld	r24, Z
    51b2:	80 64       	ori	r24, 0x40	; 64
    51b4:	8c 93       	st	X, r24

    }

    switch (pmode)
    51b6:	8a 81       	ldd	r24, Y+2	; 0x02
    51b8:	28 2f       	mov	r18, r24
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	3b 87       	std	Y+11, r19	; 0x0b
    51be:	2a 87       	std	Y+10, r18	; 0x0a
    51c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    51c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    51c4:	81 30       	cpi	r24, 0x01	; 1
    51c6:	91 05       	cpc	r25, r1
    51c8:	c1 f0       	breq	.+48     	; 0x51fa <UART_Init+0xb0>
    51ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    51cc:	3b 85       	ldd	r19, Y+11	; 0x0b
    51ce:	22 30       	cpi	r18, 0x02	; 2
    51d0:	31 05       	cpc	r19, r1
    51d2:	11 f1       	breq	.+68     	; 0x5218 <UART_Init+0xce>
    51d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    51d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    51d8:	00 97       	sbiw	r24, 0x00	; 0
    51da:	61 f5       	brne	.+88     	; 0x5234 <UART_Init+0xea>
    {
    case Disabled_parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    51dc:	a0 e4       	ldi	r26, 0x40	; 64
    51de:	b0 e0       	ldi	r27, 0x00	; 0
    51e0:	e0 e4       	ldi	r30, 0x40	; 64
    51e2:	f0 e0       	ldi	r31, 0x00	; 0
    51e4:	80 81       	ld	r24, Z
    51e6:	8f 7e       	andi	r24, 0xEF	; 239
    51e8:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UPM1);
    51ea:	a0 e4       	ldi	r26, 0x40	; 64
    51ec:	b0 e0       	ldi	r27, 0x00	; 0
    51ee:	e0 e4       	ldi	r30, 0x40	; 64
    51f0:	f0 e0       	ldi	r31, 0x00	; 0
    51f2:	80 81       	ld	r24, Z
    51f4:	8f 7d       	andi	r24, 0xDF	; 223
    51f6:	8c 93       	st	X, r24
    51f8:	1d c0       	rjmp	.+58     	; 0x5234 <UART_Init+0xea>
        /* code */
        break;
    case Even_Parity:
        CLR_BIT(UCSRC,UCSRC_UPM0);
    51fa:	a0 e4       	ldi	r26, 0x40	; 64
    51fc:	b0 e0       	ldi	r27, 0x00	; 0
    51fe:	e0 e4       	ldi	r30, 0x40	; 64
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	80 81       	ld	r24, Z
    5204:	8f 7e       	andi	r24, 0xEF	; 239
    5206:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    5208:	a0 e4       	ldi	r26, 0x40	; 64
    520a:	b0 e0       	ldi	r27, 0x00	; 0
    520c:	e0 e4       	ldi	r30, 0x40	; 64
    520e:	f0 e0       	ldi	r31, 0x00	; 0
    5210:	80 81       	ld	r24, Z
    5212:	80 62       	ori	r24, 0x20	; 32
    5214:	8c 93       	st	X, r24
    5216:	0e c0       	rjmp	.+28     	; 0x5234 <UART_Init+0xea>
        /* code */
        break;
    case Odd_Parity:
        SET_BIT(UCSRC,UCSRC_UPM0);
    5218:	a0 e4       	ldi	r26, 0x40	; 64
    521a:	b0 e0       	ldi	r27, 0x00	; 0
    521c:	e0 e4       	ldi	r30, 0x40	; 64
    521e:	f0 e0       	ldi	r31, 0x00	; 0
    5220:	80 81       	ld	r24, Z
    5222:	80 61       	ori	r24, 0x10	; 16
    5224:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UPM1);
    5226:	a0 e4       	ldi	r26, 0x40	; 64
    5228:	b0 e0       	ldi	r27, 0x00	; 0
    522a:	e0 e4       	ldi	r30, 0x40	; 64
    522c:	f0 e0       	ldi	r31, 0x00	; 0
    522e:	80 81       	ld	r24, Z
    5230:	80 62       	ori	r24, 0x20	; 32
    5232:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    if(sbit==one_Stop_bit)
    5234:	8b 81       	ldd	r24, Y+3	; 0x03
    5236:	88 23       	and	r24, r24
    5238:	41 f4       	brne	.+16     	; 0x524a <UART_Init+0x100>
    {
        CLR_BIT(UCSRC,UCSRC_USBS);
    523a:	a0 e4       	ldi	r26, 0x40	; 64
    523c:	b0 e0       	ldi	r27, 0x00	; 0
    523e:	e0 e4       	ldi	r30, 0x40	; 64
    5240:	f0 e0       	ldi	r31, 0x00	; 0
    5242:	80 81       	ld	r24, Z
    5244:	87 7f       	andi	r24, 0xF7	; 247
    5246:	8c 93       	st	X, r24
    5248:	0a c0       	rjmp	.+20     	; 0x525e <UART_Init+0x114>
    }else if( sbit==two_Stop_bit)
    524a:	8b 81       	ldd	r24, Y+3	; 0x03
    524c:	81 30       	cpi	r24, 0x01	; 1
    524e:	39 f4       	brne	.+14     	; 0x525e <UART_Init+0x114>
    {
        SET_BIT(UCSRC,UCSRC_USBS);
    5250:	a0 e4       	ldi	r26, 0x40	; 64
    5252:	b0 e0       	ldi	r27, 0x00	; 0
    5254:	e0 e4       	ldi	r30, 0x40	; 64
    5256:	f0 e0       	ldi	r31, 0x00	; 0
    5258:	80 81       	ld	r24, Z
    525a:	88 60       	ori	r24, 0x08	; 8
    525c:	8c 93       	st	X, r24
    }
    switch (csize)
    525e:	8c 81       	ldd	r24, Y+4	; 0x04
    5260:	28 2f       	mov	r18, r24
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	39 87       	std	Y+9, r19	; 0x09
    5266:	28 87       	std	Y+8, r18	; 0x08
    5268:	88 85       	ldd	r24, Y+8	; 0x08
    526a:	99 85       	ldd	r25, Y+9	; 0x09
    526c:	82 30       	cpi	r24, 0x02	; 2
    526e:	91 05       	cpc	r25, r1
    5270:	09 f4       	brne	.+2      	; 0x5274 <UART_Init+0x12a>
    5272:	48 c0       	rjmp	.+144    	; 0x5304 <UART_Init+0x1ba>
    5274:	28 85       	ldd	r18, Y+8	; 0x08
    5276:	39 85       	ldd	r19, Y+9	; 0x09
    5278:	23 30       	cpi	r18, 0x03	; 3
    527a:	31 05       	cpc	r19, r1
    527c:	54 f4       	brge	.+20     	; 0x5292 <UART_Init+0x148>
    527e:	88 85       	ldd	r24, Y+8	; 0x08
    5280:	99 85       	ldd	r25, Y+9	; 0x09
    5282:	00 97       	sbiw	r24, 0x00	; 0
    5284:	99 f0       	breq	.+38     	; 0x52ac <UART_Init+0x162>
    5286:	28 85       	ldd	r18, Y+8	; 0x08
    5288:	39 85       	ldd	r19, Y+9	; 0x09
    528a:	21 30       	cpi	r18, 0x01	; 1
    528c:	31 05       	cpc	r19, r1
    528e:	21 f1       	breq	.+72     	; 0x52d8 <UART_Init+0x18e>
    5290:	7a c0       	rjmp	.+244    	; 0x5386 <UART_Init+0x23c>
    5292:	88 85       	ldd	r24, Y+8	; 0x08
    5294:	99 85       	ldd	r25, Y+9	; 0x09
    5296:	83 30       	cpi	r24, 0x03	; 3
    5298:	91 05       	cpc	r25, r1
    529a:	09 f4       	brne	.+2      	; 0x529e <UART_Init+0x154>
    529c:	49 c0       	rjmp	.+146    	; 0x5330 <UART_Init+0x1e6>
    529e:	28 85       	ldd	r18, Y+8	; 0x08
    52a0:	39 85       	ldd	r19, Y+9	; 0x09
    52a2:	24 30       	cpi	r18, 0x04	; 4
    52a4:	31 05       	cpc	r19, r1
    52a6:	09 f4       	brne	.+2      	; 0x52aa <UART_Init+0x160>
    52a8:	59 c0       	rjmp	.+178    	; 0x535c <UART_Init+0x212>
    52aa:	6d c0       	rjmp	.+218    	; 0x5386 <UART_Init+0x23c>
    {
    case _5_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    52ac:	a0 e4       	ldi	r26, 0x40	; 64
    52ae:	b0 e0       	ldi	r27, 0x00	; 0
    52b0:	e0 e4       	ldi	r30, 0x40	; 64
    52b2:	f0 e0       	ldi	r31, 0x00	; 0
    52b4:	80 81       	ld	r24, Z
    52b6:	8d 7f       	andi	r24, 0xFD	; 253
    52b8:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    52ba:	a0 e4       	ldi	r26, 0x40	; 64
    52bc:	b0 e0       	ldi	r27, 0x00	; 0
    52be:	e0 e4       	ldi	r30, 0x40	; 64
    52c0:	f0 e0       	ldi	r31, 0x00	; 0
    52c2:	80 81       	ld	r24, Z
    52c4:	8b 7f       	andi	r24, 0xFB	; 251
    52c6:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    52c8:	a0 e4       	ldi	r26, 0x40	; 64
    52ca:	b0 e0       	ldi	r27, 0x00	; 0
    52cc:	e0 e4       	ldi	r30, 0x40	; 64
    52ce:	f0 e0       	ldi	r31, 0x00	; 0
    52d0:	80 81       	ld	r24, Z
    52d2:	8b 7f       	andi	r24, 0xFB	; 251
    52d4:	8c 93       	st	X, r24
    52d6:	57 c0       	rjmp	.+174    	; 0x5386 <UART_Init+0x23c>
        /* code */
        break;
    case _6_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    52d8:	a0 e4       	ldi	r26, 0x40	; 64
    52da:	b0 e0       	ldi	r27, 0x00	; 0
    52dc:	e0 e4       	ldi	r30, 0x40	; 64
    52de:	f0 e0       	ldi	r31, 0x00	; 0
    52e0:	80 81       	ld	r24, Z
    52e2:	8d 7f       	andi	r24, 0xFD	; 253
    52e4:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRC_UCSZ1);
    52e6:	a0 e4       	ldi	r26, 0x40	; 64
    52e8:	b0 e0       	ldi	r27, 0x00	; 0
    52ea:	e0 e4       	ldi	r30, 0x40	; 64
    52ec:	f0 e0       	ldi	r31, 0x00	; 0
    52ee:	80 81       	ld	r24, Z
    52f0:	8b 7f       	andi	r24, 0xFB	; 251
    52f2:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    52f4:	a0 e4       	ldi	r26, 0x40	; 64
    52f6:	b0 e0       	ldi	r27, 0x00	; 0
    52f8:	e0 e4       	ldi	r30, 0x40	; 64
    52fa:	f0 e0       	ldi	r31, 0x00	; 0
    52fc:	80 81       	ld	r24, Z
    52fe:	8b 7f       	andi	r24, 0xFB	; 251
    5300:	8c 93       	st	X, r24
    5302:	41 c0       	rjmp	.+130    	; 0x5386 <UART_Init+0x23c>
        /* code */
        break;
    case _7_bit:
        CLR_BIT(UCSRC,UCSRC_UCSZ0);
    5304:	a0 e4       	ldi	r26, 0x40	; 64
    5306:	b0 e0       	ldi	r27, 0x00	; 0
    5308:	e0 e4       	ldi	r30, 0x40	; 64
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	80 81       	ld	r24, Z
    530e:	8d 7f       	andi	r24, 0xFD	; 253
    5310:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    5312:	a0 e4       	ldi	r26, 0x40	; 64
    5314:	b0 e0       	ldi	r27, 0x00	; 0
    5316:	e0 e4       	ldi	r30, 0x40	; 64
    5318:	f0 e0       	ldi	r31, 0x00	; 0
    531a:	80 81       	ld	r24, Z
    531c:	84 60       	ori	r24, 0x04	; 4
    531e:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    5320:	a0 e4       	ldi	r26, 0x40	; 64
    5322:	b0 e0       	ldi	r27, 0x00	; 0
    5324:	e0 e4       	ldi	r30, 0x40	; 64
    5326:	f0 e0       	ldi	r31, 0x00	; 0
    5328:	80 81       	ld	r24, Z
    532a:	8b 7f       	andi	r24, 0xFB	; 251
    532c:	8c 93       	st	X, r24
    532e:	2b c0       	rjmp	.+86     	; 0x5386 <UART_Init+0x23c>
        /* code */
        break;
    case _8_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    5330:	a0 e4       	ldi	r26, 0x40	; 64
    5332:	b0 e0       	ldi	r27, 0x00	; 0
    5334:	e0 e4       	ldi	r30, 0x40	; 64
    5336:	f0 e0       	ldi	r31, 0x00	; 0
    5338:	80 81       	ld	r24, Z
    533a:	82 60       	ori	r24, 0x02	; 2
    533c:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    533e:	a0 e4       	ldi	r26, 0x40	; 64
    5340:	b0 e0       	ldi	r27, 0x00	; 0
    5342:	e0 e4       	ldi	r30, 0x40	; 64
    5344:	f0 e0       	ldi	r31, 0x00	; 0
    5346:	80 81       	ld	r24, Z
    5348:	84 60       	ori	r24, 0x04	; 4
    534a:	8c 93       	st	X, r24
        CLR_BIT(UCSRC,UCSRB_UCSZ2);
    534c:	a0 e4       	ldi	r26, 0x40	; 64
    534e:	b0 e0       	ldi	r27, 0x00	; 0
    5350:	e0 e4       	ldi	r30, 0x40	; 64
    5352:	f0 e0       	ldi	r31, 0x00	; 0
    5354:	80 81       	ld	r24, Z
    5356:	8b 7f       	andi	r24, 0xFB	; 251
    5358:	8c 93       	st	X, r24
    535a:	15 c0       	rjmp	.+42     	; 0x5386 <UART_Init+0x23c>
        /* code */
        break;
    case _9_bit:
        SET_BIT(UCSRC,UCSRC_UCSZ0);
    535c:	a0 e4       	ldi	r26, 0x40	; 64
    535e:	b0 e0       	ldi	r27, 0x00	; 0
    5360:	e0 e4       	ldi	r30, 0x40	; 64
    5362:	f0 e0       	ldi	r31, 0x00	; 0
    5364:	80 81       	ld	r24, Z
    5366:	82 60       	ori	r24, 0x02	; 2
    5368:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRC_UCSZ1);
    536a:	a0 e4       	ldi	r26, 0x40	; 64
    536c:	b0 e0       	ldi	r27, 0x00	; 0
    536e:	e0 e4       	ldi	r30, 0x40	; 64
    5370:	f0 e0       	ldi	r31, 0x00	; 0
    5372:	80 81       	ld	r24, Z
    5374:	84 60       	ori	r24, 0x04	; 4
    5376:	8c 93       	st	X, r24
        SET_BIT(UCSRC,UCSRB_UCSZ2);
    5378:	a0 e4       	ldi	r26, 0x40	; 64
    537a:	b0 e0       	ldi	r27, 0x00	; 0
    537c:	e0 e4       	ldi	r30, 0x40	; 64
    537e:	f0 e0       	ldi	r31, 0x00	; 0
    5380:	80 81       	ld	r24, Z
    5382:	84 60       	ori	r24, 0x04	; 4
    5384:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
    switch (brate)
    5386:	8d 81       	ldd	r24, Y+5	; 0x05
    5388:	28 2f       	mov	r18, r24
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	3f 83       	std	Y+7, r19	; 0x07
    538e:	2e 83       	std	Y+6, r18	; 0x06
    5390:	8e 81       	ldd	r24, Y+6	; 0x06
    5392:	9f 81       	ldd	r25, Y+7	; 0x07
    5394:	81 30       	cpi	r24, 0x01	; 1
    5396:	91 05       	cpc	r25, r1
    5398:	31 f0       	breq	.+12     	; 0x53a6 <UART_Init+0x25c>
    539a:	2e 81       	ldd	r18, Y+6	; 0x06
    539c:	3f 81       	ldd	r19, Y+7	; 0x07
    539e:	22 30       	cpi	r18, 0x02	; 2
    53a0:	31 05       	cpc	r19, r1
    53a2:	31 f0       	breq	.+12     	; 0x53b0 <UART_Init+0x266>
    53a4:	09 c0       	rjmp	.+18     	; 0x53b8 <UART_Init+0x26e>
    case _2400:
//        UBRRL=416;
        /* code */
        break;
    case _4800:
        UBRRL=207;
    53a6:	e9 e2       	ldi	r30, 0x29	; 41
    53a8:	f0 e0       	ldi	r31, 0x00	; 0
    53aa:	8f ec       	ldi	r24, 0xCF	; 207
    53ac:	80 83       	st	Z, r24
    53ae:	04 c0       	rjmp	.+8      	; 0x53b8 <UART_Init+0x26e>
        /* code */
        break;
    case _9600:
        UBRRL=103;
    53b0:	e9 e2       	ldi	r30, 0x29	; 41
    53b2:	f0 e0       	ldi	r31, 0x00	; 0
    53b4:	87 e6       	ldi	r24, 0x67	; 103
    53b6:	80 83       	st	Z, r24
        break;
    
    default:
        break;
    }
    SET_BIT(UCSRB,UCSRB_RXEN);
    53b8:	aa e2       	ldi	r26, 0x2A	; 42
    53ba:	b0 e0       	ldi	r27, 0x00	; 0
    53bc:	ea e2       	ldi	r30, 0x2A	; 42
    53be:	f0 e0       	ldi	r31, 0x00	; 0
    53c0:	80 81       	ld	r24, Z
    53c2:	80 61       	ori	r24, 0x10	; 16
    53c4:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    53c6:	aa e2       	ldi	r26, 0x2A	; 42
    53c8:	b0 e0       	ldi	r27, 0x00	; 0
    53ca:	ea e2       	ldi	r30, 0x2A	; 42
    53cc:	f0 e0       	ldi	r31, 0x00	; 0
    53ce:	80 81       	ld	r24, Z
    53d0:	88 60       	ori	r24, 0x08	; 8
    53d2:	8c 93       	st	X, r24
}
    53d4:	2b 96       	adiw	r28, 0x0b	; 11
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	de bf       	out	0x3e, r29	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	cd bf       	out	0x3d, r28	; 61
    53e0:	cf 91       	pop	r28
    53e2:	df 91       	pop	r29
    53e4:	0f 91       	pop	r16
    53e6:	08 95       	ret

000053e8 <UART_Send_Data>:


void UART_Send_Data(u8 data){
    53e8:	df 93       	push	r29
    53ea:	cf 93       	push	r28
    53ec:	0f 92       	push	r0
    53ee:	cd b7       	in	r28, 0x3d	; 61
    53f0:	de b7       	in	r29, 0x3e	; 62
    53f2:	89 83       	std	Y+1, r24	; 0x01
    
    UDR=data;
    53f4:	ec e2       	ldi	r30, 0x2C	; 44
    53f6:	f0 e0       	ldi	r31, 0x00	; 0
    53f8:	89 81       	ldd	r24, Y+1	; 0x01
    53fa:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC)==0);
    53fc:	eb e2       	ldi	r30, 0x2B	; 43
    53fe:	f0 e0       	ldi	r31, 0x00	; 0
    5400:	80 81       	ld	r24, Z
    5402:	82 95       	swap	r24
    5404:	86 95       	lsr	r24
    5406:	86 95       	lsr	r24
    5408:	83 70       	andi	r24, 0x03	; 3
    540a:	88 2f       	mov	r24, r24
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	81 70       	andi	r24, 0x01	; 1
    5410:	90 70       	andi	r25, 0x00	; 0
    5412:	00 97       	sbiw	r24, 0x00	; 0
    5414:	99 f3       	breq	.-26     	; 0x53fc <UART_Send_Data+0x14>
}
    5416:	0f 90       	pop	r0
    5418:	cf 91       	pop	r28
    541a:	df 91       	pop	r29
    541c:	08 95       	ret

0000541e <Recieve_Data>:

u8 Recieve_Data(){
    541e:	df 93       	push	r29
    5420:	cf 93       	push	r28
    5422:	cd b7       	in	r28, 0x3d	; 61
    5424:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RCX)==0);
    5426:	eb e2       	ldi	r30, 0x2B	; 43
    5428:	f0 e0       	ldi	r31, 0x00	; 0
    542a:	80 81       	ld	r24, Z
    542c:	88 23       	and	r24, r24
    542e:	dc f7       	brge	.-10     	; 0x5426 <Recieve_Data+0x8>
    return UDR;
    5430:	ec e2       	ldi	r30, 0x2C	; 44
    5432:	f0 e0       	ldi	r31, 0x00	; 0
    5434:	80 81       	ld	r24, Z
}
    5436:	cf 91       	pop	r28
    5438:	df 91       	pop	r29
    543a:	08 95       	ret

0000543c <WDT_Enable>:
    543c:	df 93       	push	r29
    543e:	cf 93       	push	r28
    5440:	cd b7       	in	r28, 0x3d	; 61
    5442:	de b7       	in	r29, 0x3e	; 62
    5444:	a1 e4       	ldi	r26, 0x41	; 65
    5446:	b0 e0       	ldi	r27, 0x00	; 0
    5448:	e1 e4       	ldi	r30, 0x41	; 65
    544a:	f0 e0       	ldi	r31, 0x00	; 0
    544c:	80 81       	ld	r24, Z
    544e:	88 60       	ori	r24, 0x08	; 8
    5450:	8c 93       	st	X, r24
    5452:	cf 91       	pop	r28
    5454:	df 91       	pop	r29
    5456:	08 95       	ret

00005458 <WDT_Disable>:
    5458:	df 93       	push	r29
    545a:	cf 93       	push	r28
    545c:	cd b7       	in	r28, 0x3d	; 61
    545e:	de b7       	in	r29, 0x3e	; 62
    5460:	e1 e4       	ldi	r30, 0x41	; 65
    5462:	f0 e0       	ldi	r31, 0x00	; 0
    5464:	88 e1       	ldi	r24, 0x18	; 24
    5466:	80 83       	st	Z, r24
    5468:	cf 91       	pop	r28
    546a:	df 91       	pop	r29
    546c:	08 95       	ret

0000546e <WDT_SleepTime>:
    546e:	df 93       	push	r29
    5470:	cf 93       	push	r28
    5472:	cd b7       	in	r28, 0x3d	; 61
    5474:	de b7       	in	r29, 0x3e	; 62
    5476:	a1 e4       	ldi	r26, 0x41	; 65
    5478:	b0 e0       	ldi	r27, 0x00	; 0
    547a:	e1 e4       	ldi	r30, 0x41	; 65
    547c:	f0 e0       	ldi	r31, 0x00	; 0
    547e:	80 81       	ld	r24, Z
    5480:	81 60       	ori	r24, 0x01	; 1
    5482:	8c 93       	st	X, r24
    5484:	a1 e4       	ldi	r26, 0x41	; 65
    5486:	b0 e0       	ldi	r27, 0x00	; 0
    5488:	e1 e4       	ldi	r30, 0x41	; 65
    548a:	f0 e0       	ldi	r31, 0x00	; 0
    548c:	80 81       	ld	r24, Z
    548e:	82 60       	ori	r24, 0x02	; 2
    5490:	8c 93       	st	X, r24
    5492:	a1 e4       	ldi	r26, 0x41	; 65
    5494:	b0 e0       	ldi	r27, 0x00	; 0
    5496:	e1 e4       	ldi	r30, 0x41	; 65
    5498:	f0 e0       	ldi	r31, 0x00	; 0
    549a:	80 81       	ld	r24, Z
    549c:	84 60       	ori	r24, 0x04	; 4
    549e:	8c 93       	st	X, r24
    54a0:	cf 91       	pop	r28
    54a2:	df 91       	pop	r29
    54a4:	08 95       	ret

000054a6 <TimerHandler>:
void Recieve_UART_data();

void Print_ON_LCD();

void TimerHandler(void)
{
    54a6:	df 93       	push	r29
    54a8:	cf 93       	push	r28
    54aa:	cd b7       	in	r28, 0x3d	; 61
    54ac:	de b7       	in	r29, 0x3e	; 62
    counter++;
    54ae:	80 91 88 01 	lds	r24, 0x0188
    54b2:	90 91 89 01 	lds	r25, 0x0189
    54b6:	01 96       	adiw	r24, 0x01	; 1
    54b8:	90 93 89 01 	sts	0x0189, r25
    54bc:	80 93 88 01 	sts	0x0188, r24
    counter2++;
    54c0:	80 91 c0 01 	lds	r24, 0x01C0
    54c4:	8f 5f       	subi	r24, 0xFF	; 255
    54c6:	80 93 c0 01 	sts	0x01C0, r24
    counter3++;
    54ca:	80 91 90 01 	lds	r24, 0x0190
    54ce:	90 91 91 01 	lds	r25, 0x0191
    54d2:	01 96       	adiw	r24, 0x01	; 1
    54d4:	90 93 91 01 	sts	0x0191, r25
    54d8:	80 93 90 01 	sts	0x0190, r24
}
    54dc:	cf 91       	pop	r28
    54de:	df 91       	pop	r29
    54e0:	08 95       	ret

000054e2 <Adc_Handler>:

u16 result = 0;
void Adc_Handler(u16 res)
{
    54e2:	df 93       	push	r29
    54e4:	cf 93       	push	r28
    54e6:	00 d0       	rcall	.+0      	; 0x54e8 <Adc_Handler+0x6>
    54e8:	cd b7       	in	r28, 0x3d	; 61
    54ea:	de b7       	in	r29, 0x3e	; 62
    54ec:	9a 83       	std	Y+2, r25	; 0x02
    54ee:	89 83       	std	Y+1, r24	; 0x01
    result = res;
    54f0:	89 81       	ldd	r24, Y+1	; 0x01
    54f2:	9a 81       	ldd	r25, Y+2	; 0x02
    54f4:	90 93 95 01 	sts	0x0195, r25
    54f8:	80 93 94 01 	sts	0x0194, r24
}
    54fc:	0f 90       	pop	r0
    54fe:	0f 90       	pop	r0
    5500:	cf 91       	pop	r28
    5502:	df 91       	pop	r29
    5504:	08 95       	ret

00005506 <INT0_Handler>:
int arr[10]; ////////////////////////// [0]-> fhh  [1]->fMM
void INT0_Handler(void)
{
    5506:	df 93       	push	r29
    5508:	cf 93       	push	r28
    550a:	cd b7       	in	r28, 0x3d	; 61
    550c:	de b7       	in	r29, 0x3e	; 62
    Recieve_UART_data();
    550e:	0e 94 9d 31 	call	0x633a	; 0x633a <Recieve_UART_data>
}
    5512:	cf 91       	pop	r28
    5514:	df 91       	pop	r29
    5516:	08 95       	ret

00005518 <main>:

int main(void)
{   /************************************************/
    5518:	0f 93       	push	r16
    551a:	df 93       	push	r29
    551c:	cf 93       	push	r28
    551e:	cd b7       	in	r28, 0x3d	; 61
    5520:	de b7       	in	r29, 0x3e	; 62
    5522:	2f 97       	sbiw	r28, 0x0f	; 15
    5524:	0f b6       	in	r0, 0x3f	; 63
    5526:	f8 94       	cli
    5528:	de bf       	out	0x3e, r29	; 62
    552a:	0f be       	out	0x3f, r0	; 63
    552c:	cd bf       	out	0x3d, r28	; 61
    DIO_SetPinMode(DIO_PORTC,DIO_PIN0,DIO_OUTPUT);
    552e:	82 e0       	ldi	r24, 0x02	; 2
    5530:	60 e0       	ldi	r22, 0x00	; 0
    5532:	42 e0       	ldi	r20, 0x02	; 2
    5534:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTC,DIO_PIN1,DIO_OUTPUT);
    5538:	82 e0       	ldi	r24, 0x02	; 2
    553a:	61 e0       	ldi	r22, 0x01	; 1
    553c:	42 e0       	ldi	r20, 0x02	; 2
    553e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    /************************************************/
    DIO_SetPinMode(DIO_PORTA, DIO_PIN1, DIO_OUTPUT);
    5542:	80 e0       	ldi	r24, 0x00	; 0
    5544:	61 e0       	ldi	r22, 0x01	; 1
    5546:	42 e0       	ldi	r20, 0x02	; 2
    5548:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA, DIO_PIN2, DIO_OUTPUT);
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	62 e0       	ldi	r22, 0x02	; 2
    5550:	42 e0       	ldi	r20, 0x02	; 2
    5552:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA, DIO_PIN3, DIO_OUTPUT);
    5556:	80 e0       	ldi	r24, 0x00	; 0
    5558:	63 e0       	ldi	r22, 0x03	; 3
    555a:	42 e0       	ldi	r20, 0x02	; 2
    555c:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    5560:	80 e0       	ldi	r24, 0x00	; 0
    5562:	64 e0       	ldi	r22, 0x04	; 4
    5564:	42 e0       	ldi	r20, 0x02	; 2
    5566:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	65 e0       	ldi	r22, 0x05	; 5
    556e:	42 e0       	ldi	r20, 0x02	; 2
    5570:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    5574:	80 e0       	ldi	r24, 0x00	; 0
    5576:	66 e0       	ldi	r22, 0x06	; 6
    5578:	42 e0       	ldi	r20, 0x02	; 2
    557a:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA, DIO_PIN0, DIO_INPUT_FLOATING);
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	60 e0       	ldi	r22, 0x00	; 0
    5582:	40 e0       	ldi	r20, 0x00	; 0
    5584:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTD, DIO_PIN7, DIO_OUTPUT); // OCR2
    5588:	83 e0       	ldi	r24, 0x03	; 3
    558a:	67 e0       	ldi	r22, 0x07	; 7
    558c:	42 e0       	ldi	r20, 0x02	; 2
    558e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTD, DIO_PIN3, DIO_INPUT_FLOATING);
    5592:	83 e0       	ldi	r24, 0x03	; 3
    5594:	63 e0       	ldi	r22, 0x03	; 3
    5596:	40 e0       	ldi	r20, 0x00	; 0
    5598:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    Adc_Init();
    559c:	0e 94 4a 07 	call	0xe94	; 0xe94 <Adc_Init>
    SSD_Init();
    55a0:	0e 94 1d 20 	call	0x403a	; 0x403a <SSD_Init>
    LCD_Init();
    55a4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <LCD_Init>
    /*********************************************************************/
    UART_Init(Asynchronous, Odd_Parity, one_Stop_bit, _8_bit, _9600);
    55a8:	80 e0       	ldi	r24, 0x00	; 0
    55aa:	62 e0       	ldi	r22, 0x02	; 2
    55ac:	40 e0       	ldi	r20, 0x00	; 0
    55ae:	23 e0       	ldi	r18, 0x03	; 3
    55b0:	02 e0       	ldi	r16, 0x02	; 2
    55b2:	0e 94 a5 28 	call	0x514a	; 0x514a <UART_Init>
    /**************************************************************************************/
    //_delay_ms(800);
    Gpt_ConfigType config = {GPT_CHANNEL_TIMER0, GPT_MODE_CTC, GPT_OUTPUT_NORMAL, GPT_PRESCALER_1024};
    55b6:	1e 82       	std	Y+6, r1	; 0x06
    55b8:	81 e0       	ldi	r24, 0x01	; 1
    55ba:	8f 83       	std	Y+7, r24	; 0x07
    55bc:	18 86       	std	Y+8, r1	; 0x08
    55be:	87 e0       	ldi	r24, 0x07	; 7
    55c0:	89 87       	std	Y+9, r24	; 0x09
    Gpt_Init(&config);
    55c2:	ce 01       	movw	r24, r28
    55c4:	06 96       	adiw	r24, 0x06	; 6
    55c6:	0e 94 de 10 	call	0x21bc	; 0x21bc <Gpt_Init>
    /**********************************************************************/
    Spt_ConfigType config2 = {SPT_CHANNEL_TIMER2, SPT_MODE_FAST_PWM, SPT_OUTPUT_CLEAR, SPT_PRESCALER_1024};
    55ca:	83 e0       	ldi	r24, 0x03	; 3
    55cc:	8a 87       	std	Y+10, r24	; 0x0a
    55ce:	1b 86       	std	Y+11, r1	; 0x0b
    55d0:	83 e0       	ldi	r24, 0x03	; 3
    55d2:	8c 87       	std	Y+12, r24	; 0x0c
    55d4:	87 e0       	ldi	r24, 0x07	; 7
    55d6:	8d 87       	std	Y+13, r24	; 0x0d
    Spt_Init(&config2);
    55d8:	ce 01       	movw	r24, r28
    55da:	0a 96       	adiw	r24, 0x0a	; 10
    55dc:	0e 94 31 22 	call	0x4462	; 0x4462 <Spt_Init>
    u16 fast = 0;
    55e0:	1d 82       	std	Y+5, r1	; 0x05
    55e2:	1c 82       	std	Y+4, r1	; 0x04
    /********************************************************************/
    u8 flag_print=0;
    55e4:	1b 82       	std	Y+3, r1	; 0x03
    Gpt_StartTimer(GPT_CHANNEL_TIMER0, 250);
    55e6:	80 e0       	ldi	r24, 0x00	; 0
    55e8:	6a ef       	ldi	r22, 0xFA	; 250
    55ea:	70 e0       	ldi	r23, 0x00	; 0
    55ec:	0e 94 38 17 	call	0x2e70	; 0x2e70 <Gpt_StartTimer>
    Gpt_EnableNotification(GPT_CHANNEL_TIMER0, GPT_MODE_CTC, TimerHandler);
    55f0:	23 e5       	ldi	r18, 0x53	; 83
    55f2:	3a e2       	ldi	r19, 0x2A	; 42
    55f4:	80 e0       	ldi	r24, 0x00	; 0
    55f6:	61 e0       	ldi	r22, 0x01	; 1
    55f8:	a9 01       	movw	r20, r18
    55fa:	0e 94 9f 18 	call	0x313e	; 0x313e <Gpt_EnableNotification>
    Adc_SetCallback(Adc_Handler);
    55fe:	81 e7       	ldi	r24, 0x71	; 113
    5600:	9a e2       	ldi	r25, 0x2A	; 42
    5602:	0e 94 09 08 	call	0x1012	; 0x1012 <Adc_SetCallback>
    ExtInterrupt_Init();
    5606:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <ExtInterrupt_Init>
    ExtInterrupt_SetINT0Callback(INT0_Handler);
    560a:	83 e8       	ldi	r24, 0x83	; 131
    560c:	9a e2       	ldi	r25, 0x2A	; 42
    560e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <ExtInterrupt_SetINT0Callback>
    GlobalInterrupt_Enable();
    5612:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <GlobalInterrupt_Enable>
    
    while (1) {
        if (arr[0]==0 && arr[1]==0 && arr[2]==0 & arr[3]==0) {
    5616:	80 91 ac 01 	lds	r24, 0x01AC
    561a:	90 91 ad 01 	lds	r25, 0x01AD
    561e:	00 97       	sbiw	r24, 0x00	; 0
    5620:	e9 f4       	brne	.+58     	; 0x565c <main+0x144>
    5622:	80 91 ae 01 	lds	r24, 0x01AE
    5626:	90 91 af 01 	lds	r25, 0x01AF
    562a:	00 97       	sbiw	r24, 0x00	; 0
    562c:	b9 f4       	brne	.+46     	; 0x565c <main+0x144>
    562e:	80 91 b0 01 	lds	r24, 0x01B0
    5632:	90 91 b1 01 	lds	r25, 0x01B1
    5636:	1f 86       	std	Y+15, r1	; 0x0f
    5638:	00 97       	sbiw	r24, 0x00	; 0
    563a:	11 f4       	brne	.+4      	; 0x5640 <main+0x128>
    563c:	21 e0       	ldi	r18, 0x01	; 1
    563e:	2f 87       	std	Y+15, r18	; 0x0f
    5640:	80 91 b2 01 	lds	r24, 0x01B2
    5644:	90 91 b3 01 	lds	r25, 0x01B3
    5648:	1e 86       	std	Y+14, r1	; 0x0e
    564a:	00 97       	sbiw	r24, 0x00	; 0
    564c:	11 f4       	brne	.+4      	; 0x5652 <main+0x13a>
    564e:	81 e0       	ldi	r24, 0x01	; 1
    5650:	8e 87       	std	Y+14, r24	; 0x0e
    5652:	8f 85       	ldd	r24, Y+15	; 0x0f
    5654:	9e 85       	ldd	r25, Y+14	; 0x0e
    5656:	89 23       	and	r24, r25
    5658:	88 23       	and	r24, r24
    565a:	e9 f6       	brne	.-70     	; 0x5616 <main+0xfe>
            continue;
        }
        else {
            i=0;
    565c:	10 92 8a 01 	sts	0x018A, r1
            k=0;
    5660:	10 92 8b 01 	sts	0x018B, r1
    }

    while (1)
    {
        /************************************/
        if(p==6 && Counterflag == 0 )
    5664:	80 91 8e 01 	lds	r24, 0x018E
    5668:	86 30       	cpi	r24, 0x06	; 6
    566a:	49 f4       	brne	.+18     	; 0x567e <main+0x166>
    566c:	80 91 92 01 	lds	r24, 0x0192
    5670:	88 23       	and	r24, r24
    5672:	29 f4       	brne	.+10     	; 0x567e <main+0x166>
        {
            Counterflag=1;
    5674:	81 e0       	ldi	r24, 0x01	; 1
    5676:	80 93 92 01 	sts	0x0192, r24
            counter2=0;
    567a:	10 92 c0 01 	sts	0x01C0, r1
        }
        if(Counterflag == 1)
    567e:	80 91 92 01 	lds	r24, 0x0192
    5682:	81 30       	cpi	r24, 0x01	; 1
    5684:	e9 f4       	brne	.+58     	; 0x56c0 <main+0x1a8>
        {
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    5686:	82 e0       	ldi	r24, 0x02	; 2
    5688:	60 e0       	ldi	r22, 0x00	; 0
    568a:	41 e0       	ldi	r20, 0x01	; 1
    568c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
    5690:	82 e0       	ldi	r24, 0x02	; 2
    5692:	61 e0       	ldi	r22, 0x01	; 1
    5694:	40 e0       	ldi	r20, 0x00	; 0
    5696:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
            if(counter2 == 62)
    569a:	80 91 c0 01 	lds	r24, 0x01C0
    569e:	8e 33       	cpi	r24, 0x3E	; 62
    56a0:	79 f4       	brne	.+30     	; 0x56c0 <main+0x1a8>
            {
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    56a2:	82 e0       	ldi	r24, 0x02	; 2
    56a4:	60 e0       	ldi	r22, 0x00	; 0
    56a6:	40 e0       	ldi	r20, 0x00	; 0
    56a8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
    56ac:	82 e0       	ldi	r24, 0x02	; 2
    56ae:	61 e0       	ldi	r22, 0x01	; 1
    56b0:	40 e0       	ldi	r20, 0x00	; 0
    56b2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
            Counterflag=2;
    56b6:	82 e0       	ldi	r24, 0x02	; 2
    56b8:	80 93 92 01 	sts	0x0192, r24
            Counterflag2=0;
    56bc:	10 92 93 01 	sts	0x0193, r1
            }
        }

        if(p==7 && q==1 && Counterflag2==0 )
    56c0:	80 91 8e 01 	lds	r24, 0x018E
    56c4:	87 30       	cpi	r24, 0x07	; 7
    56c6:	69 f4       	brne	.+26     	; 0x56e2 <main+0x1ca>
    56c8:	80 91 8f 01 	lds	r24, 0x018F
    56cc:	81 30       	cpi	r24, 0x01	; 1
    56ce:	49 f4       	brne	.+18     	; 0x56e2 <main+0x1ca>
    56d0:	80 91 93 01 	lds	r24, 0x0193
    56d4:	88 23       	and	r24, r24
    56d6:	29 f4       	brne	.+10     	; 0x56e2 <main+0x1ca>
        {
            Counterflag2=1;
    56d8:	81 e0       	ldi	r24, 0x01	; 1
    56da:	80 93 93 01 	sts	0x0193, r24
            counter2=0;
    56de:	10 92 c0 01 	sts	0x01C0, r1
        }
        if(Counterflag2==1)
    56e2:	80 91 93 01 	lds	r24, 0x0193
    56e6:	81 30       	cpi	r24, 0x01	; 1
    56e8:	e9 f4       	brne	.+58     	; 0x5724 <main+0x20c>
        {
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_HIGH);
    56ea:	82 e0       	ldi	r24, 0x02	; 2
    56ec:	61 e0       	ldi	r22, 0x01	; 1
    56ee:	41 e0       	ldi	r20, 0x01	; 1
    56f0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    56f4:	82 e0       	ldi	r24, 0x02	; 2
    56f6:	60 e0       	ldi	r22, 0x00	; 0
    56f8:	40 e0       	ldi	r20, 0x00	; 0
    56fa:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
            if(counter2 == 62)
    56fe:	80 91 c0 01 	lds	r24, 0x01C0
    5702:	8e 33       	cpi	r24, 0x3E	; 62
    5704:	79 f4       	brne	.+30     	; 0x5724 <main+0x20c>
            {
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_LOW);
    5706:	82 e0       	ldi	r24, 0x02	; 2
    5708:	60 e0       	ldi	r22, 0x00	; 0
    570a:	40 e0       	ldi	r20, 0x00	; 0
    570c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
            DIO_SetPinLevel(DIO_PORTC,DIO_PIN1,DIO_LOW);
    5710:	82 e0       	ldi	r24, 0x02	; 2
    5712:	61 e0       	ldi	r22, 0x01	; 1
    5714:	40 e0       	ldi	r20, 0x00	; 0
    5716:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
            Counterflag2=2;
    571a:	82 e0       	ldi	r24, 0x02	; 2
    571c:	80 93 93 01 	sts	0x0193, r24
            Counterflag=0;
    5720:	10 92 92 01 	sts	0x0192, r1
            }
        }

        
        /************************************/
        if (counter == 31)
    5724:	80 91 88 01 	lds	r24, 0x0188
    5728:	90 91 89 01 	lds	r25, 0x0189
    572c:	8f 31       	cpi	r24, 0x1F	; 31
    572e:	91 05       	cpc	r25, r1
    5730:	49 f4       	brne	.+18     	; 0x5744 <main+0x22c>
        {
            counter = 0;
    5732:	10 92 89 01 	sts	0x0189, r1
    5736:	10 92 88 01 	sts	0x0188, r1
            i++;
    573a:	80 91 8a 01 	lds	r24, 0x018A
    573e:	8f 5f       	subi	r24, 0xFF	; 255
    5740:	80 93 8a 01 	sts	0x018A, r24
        }
        Timer_Clock();
    5744:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <Timer_Clock>
        Spt_StartTimer(SPT_CHANNEL_TIMER2, fast);
    5748:	2c 81       	ldd	r18, Y+4	; 0x04
    574a:	3d 81       	ldd	r19, Y+5	; 0x05
    574c:	83 e0       	ldi	r24, 0x03	; 3
    574e:	b9 01       	movw	r22, r18
    5750:	0e 94 49 28 	call	0x5092	; 0x5092 <Spt_StartTimer>
        u16 temperature = (result * (5000.0 / 1024)) / 10;
    5754:	80 91 94 01 	lds	r24, 0x0194
    5758:	90 91 95 01 	lds	r25, 0x0195
    575c:	cc 01       	movw	r24, r24
    575e:	a0 e0       	ldi	r26, 0x00	; 0
    5760:	b0 e0       	ldi	r27, 0x00	; 0
    5762:	bc 01       	movw	r22, r24
    5764:	cd 01       	movw	r24, r26
    5766:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    576a:	dc 01       	movw	r26, r24
    576c:	cb 01       	movw	r24, r22
    576e:	bc 01       	movw	r22, r24
    5770:	cd 01       	movw	r24, r26
    5772:	20 e0       	ldi	r18, 0x00	; 0
    5774:	30 e4       	ldi	r19, 0x40	; 64
    5776:	4c e9       	ldi	r20, 0x9C	; 156
    5778:	50 e4       	ldi	r21, 0x40	; 64
    577a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    577e:	dc 01       	movw	r26, r24
    5780:	cb 01       	movw	r24, r22
    5782:	bc 01       	movw	r22, r24
    5784:	cd 01       	movw	r24, r26
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	40 e2       	ldi	r20, 0x20	; 32
    578c:	51 e4       	ldi	r21, 0x41	; 65
    578e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	bc 01       	movw	r22, r24
    5798:	cd 01       	movw	r24, r26
    579a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    579e:	dc 01       	movw	r26, r24
    57a0:	cb 01       	movw	r24, r22
    57a2:	9a 83       	std	Y+2, r25	; 0x02
    57a4:	89 83       	std	Y+1, r24	; 0x01
        if (temperature >= 40)
    57a6:	89 81       	ldd	r24, Y+1	; 0x01
    57a8:	9a 81       	ldd	r25, Y+2	; 0x02
    57aa:	88 32       	cpi	r24, 0x28	; 40
    57ac:	91 05       	cpc	r25, r1
    57ae:	28 f0       	brcs	.+10     	; 0x57ba <main+0x2a2>
        {
            fast = 250;
    57b0:	8a ef       	ldi	r24, 0xFA	; 250
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	9d 83       	std	Y+5, r25	; 0x05
    57b6:	8c 83       	std	Y+4, r24	; 0x04
    57b8:	20 c0       	rjmp	.+64     	; 0x57fa <main+0x2e2>
        }
        else if ((temperature >= 30) && (temperature < 40))
    57ba:	89 81       	ldd	r24, Y+1	; 0x01
    57bc:	9a 81       	ldd	r25, Y+2	; 0x02
    57be:	8e 31       	cpi	r24, 0x1E	; 30
    57c0:	91 05       	cpc	r25, r1
    57c2:	50 f0       	brcs	.+20     	; 0x57d8 <main+0x2c0>
    57c4:	89 81       	ldd	r24, Y+1	; 0x01
    57c6:	9a 81       	ldd	r25, Y+2	; 0x02
    57c8:	88 32       	cpi	r24, 0x28	; 40
    57ca:	91 05       	cpc	r25, r1
    57cc:	28 f4       	brcc	.+10     	; 0x57d8 <main+0x2c0>
        {
            fast = 160;
    57ce:	80 ea       	ldi	r24, 0xA0	; 160
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	9d 83       	std	Y+5, r25	; 0x05
    57d4:	8c 83       	std	Y+4, r24	; 0x04
    57d6:	11 c0       	rjmp	.+34     	; 0x57fa <main+0x2e2>
        }
        else if ((temperature >= 20) && (temperature < 30))
    57d8:	89 81       	ldd	r24, Y+1	; 0x01
    57da:	9a 81       	ldd	r25, Y+2	; 0x02
    57dc:	84 31       	cpi	r24, 0x14	; 20
    57de:	91 05       	cpc	r25, r1
    57e0:	50 f0       	brcs	.+20     	; 0x57f6 <main+0x2de>
    57e2:	89 81       	ldd	r24, Y+1	; 0x01
    57e4:	9a 81       	ldd	r25, Y+2	; 0x02
    57e6:	8e 31       	cpi	r24, 0x1E	; 30
    57e8:	91 05       	cpc	r25, r1
    57ea:	28 f4       	brcc	.+10     	; 0x57f6 <main+0x2de>
        {
            fast = 90;
    57ec:	8a e5       	ldi	r24, 0x5A	; 90
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	9d 83       	std	Y+5, r25	; 0x05
    57f2:	8c 83       	std	Y+4, r24	; 0x04
    57f4:	02 c0       	rjmp	.+4      	; 0x57fa <main+0x2e2>
        }
        else
        {
            fast = 0;
    57f6:	1d 82       	std	Y+5, r1	; 0x05
    57f8:	1c 82       	std	Y+4, r1	; 0x04
        }

        if ((flag_print==1)) {
    57fa:	8b 81       	ldd	r24, Y+3	; 0x03
    57fc:	81 30       	cpi	r24, 0x01	; 1
    57fe:	91 f4       	brne	.+36     	; 0x5824 <main+0x30c>
            if (counter3 >= 1860) {
    5800:	80 91 90 01 	lds	r24, 0x0190
    5804:	90 91 91 01 	lds	r25, 0x0191
    5808:	27 e0       	ldi	r18, 0x07	; 7
    580a:	84 34       	cpi	r24, 0x44	; 68
    580c:	92 07       	cpc	r25, r18
    580e:	40 f0       	brcs	.+16     	; 0x5820 <main+0x308>
                LCD_Clear();
    5810:	0e 94 a6 1c 	call	0x394c	; 0x394c <LCD_Clear>
                flag_print=0;
    5814:	1b 82       	std	Y+3, r1	; 0x03
                counter3=0;
    5816:	10 92 91 01 	sts	0x0191, r1
    581a:	10 92 90 01 	sts	0x0190, r1
    581e:	22 cf       	rjmp	.-444    	; 0x5664 <main+0x14c>
                continue;
            }
			Print_ON_LCD();
    5820:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <Print_ON_LCD>
        }

        Adc_StartConversion(ADC_SINGLE_ADC0);
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	0e 94 89 07 	call	0xf12	; 0xf12 <Adc_StartConversion>
        if ((i==0) && (k==0) && (!flag_print) && (m == arr[1] % 10) && (n == arr[1]/10) && (p == arr[0]%10) && (q == arr[0]/10))
    582a:	80 91 8a 01 	lds	r24, 0x018A
    582e:	88 23       	and	r24, r24
    5830:	09 f0       	breq	.+2      	; 0x5834 <main+0x31c>
    5832:	59 c0       	rjmp	.+178    	; 0x58e6 <main+0x3ce>
    5834:	80 91 8b 01 	lds	r24, 0x018B
    5838:	88 23       	and	r24, r24
    583a:	09 f0       	breq	.+2      	; 0x583e <main+0x326>
    583c:	54 c0       	rjmp	.+168    	; 0x58e6 <main+0x3ce>
    583e:	8b 81       	ldd	r24, Y+3	; 0x03
    5840:	88 23       	and	r24, r24
    5842:	09 f0       	breq	.+2      	; 0x5846 <main+0x32e>
    5844:	50 c0       	rjmp	.+160    	; 0x58e6 <main+0x3ce>
    5846:	80 91 8c 01 	lds	r24, 0x018C
    584a:	e8 2f       	mov	r30, r24
    584c:	f0 e0       	ldi	r31, 0x00	; 0
    584e:	80 91 ae 01 	lds	r24, 0x01AE
    5852:	90 91 af 01 	lds	r25, 0x01AF
    5856:	2a e0       	ldi	r18, 0x0A	; 10
    5858:	30 e0       	ldi	r19, 0x00	; 0
    585a:	b9 01       	movw	r22, r18
    585c:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5860:	e8 17       	cp	r30, r24
    5862:	f9 07       	cpc	r31, r25
    5864:	09 f0       	breq	.+2      	; 0x5868 <main+0x350>
    5866:	3f c0       	rjmp	.+126    	; 0x58e6 <main+0x3ce>
    5868:	80 91 8d 01 	lds	r24, 0x018D
    586c:	e8 2f       	mov	r30, r24
    586e:	f0 e0       	ldi	r31, 0x00	; 0
    5870:	80 91 ae 01 	lds	r24, 0x01AE
    5874:	90 91 af 01 	lds	r25, 0x01AF
    5878:	2a e0       	ldi	r18, 0x0A	; 10
    587a:	30 e0       	ldi	r19, 0x00	; 0
    587c:	b9 01       	movw	r22, r18
    587e:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5882:	cb 01       	movw	r24, r22
    5884:	e8 17       	cp	r30, r24
    5886:	f9 07       	cpc	r31, r25
    5888:	71 f5       	brne	.+92     	; 0x58e6 <main+0x3ce>
    588a:	80 91 8e 01 	lds	r24, 0x018E
    588e:	e8 2f       	mov	r30, r24
    5890:	f0 e0       	ldi	r31, 0x00	; 0
    5892:	80 91 ac 01 	lds	r24, 0x01AC
    5896:	90 91 ad 01 	lds	r25, 0x01AD
    589a:	2a e0       	ldi	r18, 0x0A	; 10
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	b9 01       	movw	r22, r18
    58a0:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    58a4:	e8 17       	cp	r30, r24
    58a6:	f9 07       	cpc	r31, r25
    58a8:	f1 f4       	brne	.+60     	; 0x58e6 <main+0x3ce>
    58aa:	80 91 8f 01 	lds	r24, 0x018F
    58ae:	e8 2f       	mov	r30, r24
    58b0:	f0 e0       	ldi	r31, 0x00	; 0
    58b2:	80 91 ac 01 	lds	r24, 0x01AC
    58b6:	90 91 ad 01 	lds	r25, 0x01AD
    58ba:	2a e0       	ldi	r18, 0x0A	; 10
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	b9 01       	movw	r22, r18
    58c0:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    58c4:	cb 01       	movw	r24, r22
    58c6:	e8 17       	cp	r30, r24
    58c8:	f9 07       	cpc	r31, r25
    58ca:	69 f4       	brne	.+26     	; 0x58e6 <main+0x3ce>
		{
            Prayer="Fajr";
    58cc:	82 e6       	ldi	r24, 0x62	; 98
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	90 93 86 01 	sts	0x0186, r25
    58d4:	80 93 85 01 	sts	0x0185, r24
            flag_print=1;
    58d8:	81 e0       	ldi	r24, 0x01	; 1
    58da:	8b 83       	std	Y+3, r24	; 0x03
            counter3=0;
    58dc:	10 92 91 01 	sts	0x0191, r1
    58e0:	10 92 90 01 	sts	0x0190, r1
    58e4:	bf ce       	rjmp	.-642    	; 0x5664 <main+0x14c>
		}
		else if ((m == arr[3] % 10) && (n == arr[3]/10) && (p == arr[2]%10) && (q == arr[2]/10) && (k==0) && (i==0) && (!flag_print))
    58e6:	80 91 8c 01 	lds	r24, 0x018C
    58ea:	e8 2f       	mov	r30, r24
    58ec:	f0 e0       	ldi	r31, 0x00	; 0
    58ee:	80 91 b2 01 	lds	r24, 0x01B2
    58f2:	90 91 b3 01 	lds	r25, 0x01B3
    58f6:	2a e0       	ldi	r18, 0x0A	; 10
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	b9 01       	movw	r22, r18
    58fc:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5900:	e8 17       	cp	r30, r24
    5902:	f9 07       	cpc	r31, r25
    5904:	09 f0       	breq	.+2      	; 0x5908 <main+0x3f0>
    5906:	4a c0       	rjmp	.+148    	; 0x599c <main+0x484>
    5908:	80 91 8d 01 	lds	r24, 0x018D
    590c:	e8 2f       	mov	r30, r24
    590e:	f0 e0       	ldi	r31, 0x00	; 0
    5910:	80 91 b2 01 	lds	r24, 0x01B2
    5914:	90 91 b3 01 	lds	r25, 0x01B3
    5918:	2a e0       	ldi	r18, 0x0A	; 10
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	b9 01       	movw	r22, r18
    591e:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5922:	cb 01       	movw	r24, r22
    5924:	e8 17       	cp	r30, r24
    5926:	f9 07       	cpc	r31, r25
    5928:	c9 f5       	brne	.+114    	; 0x599c <main+0x484>
    592a:	80 91 8e 01 	lds	r24, 0x018E
    592e:	e8 2f       	mov	r30, r24
    5930:	f0 e0       	ldi	r31, 0x00	; 0
    5932:	80 91 b0 01 	lds	r24, 0x01B0
    5936:	90 91 b1 01 	lds	r25, 0x01B1
    593a:	2a e0       	ldi	r18, 0x0A	; 10
    593c:	30 e0       	ldi	r19, 0x00	; 0
    593e:	b9 01       	movw	r22, r18
    5940:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5944:	e8 17       	cp	r30, r24
    5946:	f9 07       	cpc	r31, r25
    5948:	49 f5       	brne	.+82     	; 0x599c <main+0x484>
    594a:	80 91 8f 01 	lds	r24, 0x018F
    594e:	e8 2f       	mov	r30, r24
    5950:	f0 e0       	ldi	r31, 0x00	; 0
    5952:	80 91 b0 01 	lds	r24, 0x01B0
    5956:	90 91 b1 01 	lds	r25, 0x01B1
    595a:	2a e0       	ldi	r18, 0x0A	; 10
    595c:	30 e0       	ldi	r19, 0x00	; 0
    595e:	b9 01       	movw	r22, r18
    5960:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5964:	cb 01       	movw	r24, r22
    5966:	e8 17       	cp	r30, r24
    5968:	f9 07       	cpc	r31, r25
    596a:	c1 f4       	brne	.+48     	; 0x599c <main+0x484>
    596c:	80 91 8b 01 	lds	r24, 0x018B
    5970:	88 23       	and	r24, r24
    5972:	a1 f4       	brne	.+40     	; 0x599c <main+0x484>
    5974:	80 91 8a 01 	lds	r24, 0x018A
    5978:	88 23       	and	r24, r24
    597a:	81 f4       	brne	.+32     	; 0x599c <main+0x484>
    597c:	8b 81       	ldd	r24, Y+3	; 0x03
    597e:	88 23       	and	r24, r24
    5980:	69 f4       	brne	.+26     	; 0x599c <main+0x484>
		{
			Prayer="Duhr";
    5982:	87 e6       	ldi	r24, 0x67	; 103
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	90 93 86 01 	sts	0x0186, r25
    598a:	80 93 85 01 	sts	0x0185, r24
            flag_print=1;
    598e:	81 e0       	ldi	r24, 0x01	; 1
    5990:	8b 83       	std	Y+3, r24	; 0x03
            counter3=0;
    5992:	10 92 91 01 	sts	0x0191, r1
    5996:	10 92 90 01 	sts	0x0190, r1
    599a:	64 ce       	rjmp	.-824    	; 0x5664 <main+0x14c>
		}
		else if ((m == arr[5] % 10) && (n == arr[5]/10) && (p == arr[4]%10) && (q == arr[4]/10) && (k==0) && (i==0) && (!flag_print))
    599c:	80 91 8c 01 	lds	r24, 0x018C
    59a0:	e8 2f       	mov	r30, r24
    59a2:	f0 e0       	ldi	r31, 0x00	; 0
    59a4:	80 91 b6 01 	lds	r24, 0x01B6
    59a8:	90 91 b7 01 	lds	r25, 0x01B7
    59ac:	2a e0       	ldi	r18, 0x0A	; 10
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	b9 01       	movw	r22, r18
    59b2:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    59b6:	e8 17       	cp	r30, r24
    59b8:	f9 07       	cpc	r31, r25
    59ba:	09 f0       	breq	.+2      	; 0x59be <main+0x4a6>
    59bc:	4a c0       	rjmp	.+148    	; 0x5a52 <main+0x53a>
    59be:	80 91 8d 01 	lds	r24, 0x018D
    59c2:	e8 2f       	mov	r30, r24
    59c4:	f0 e0       	ldi	r31, 0x00	; 0
    59c6:	80 91 b6 01 	lds	r24, 0x01B6
    59ca:	90 91 b7 01 	lds	r25, 0x01B7
    59ce:	2a e0       	ldi	r18, 0x0A	; 10
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	b9 01       	movw	r22, r18
    59d4:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    59d8:	cb 01       	movw	r24, r22
    59da:	e8 17       	cp	r30, r24
    59dc:	f9 07       	cpc	r31, r25
    59de:	c9 f5       	brne	.+114    	; 0x5a52 <main+0x53a>
    59e0:	80 91 8e 01 	lds	r24, 0x018E
    59e4:	e8 2f       	mov	r30, r24
    59e6:	f0 e0       	ldi	r31, 0x00	; 0
    59e8:	80 91 b4 01 	lds	r24, 0x01B4
    59ec:	90 91 b5 01 	lds	r25, 0x01B5
    59f0:	2a e0       	ldi	r18, 0x0A	; 10
    59f2:	30 e0       	ldi	r19, 0x00	; 0
    59f4:	b9 01       	movw	r22, r18
    59f6:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    59fa:	e8 17       	cp	r30, r24
    59fc:	f9 07       	cpc	r31, r25
    59fe:	49 f5       	brne	.+82     	; 0x5a52 <main+0x53a>
    5a00:	80 91 8f 01 	lds	r24, 0x018F
    5a04:	e8 2f       	mov	r30, r24
    5a06:	f0 e0       	ldi	r31, 0x00	; 0
    5a08:	80 91 b4 01 	lds	r24, 0x01B4
    5a0c:	90 91 b5 01 	lds	r25, 0x01B5
    5a10:	2a e0       	ldi	r18, 0x0A	; 10
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	b9 01       	movw	r22, r18
    5a16:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5a1a:	cb 01       	movw	r24, r22
    5a1c:	e8 17       	cp	r30, r24
    5a1e:	f9 07       	cpc	r31, r25
    5a20:	c1 f4       	brne	.+48     	; 0x5a52 <main+0x53a>
    5a22:	80 91 8b 01 	lds	r24, 0x018B
    5a26:	88 23       	and	r24, r24
    5a28:	a1 f4       	brne	.+40     	; 0x5a52 <main+0x53a>
    5a2a:	80 91 8a 01 	lds	r24, 0x018A
    5a2e:	88 23       	and	r24, r24
    5a30:	81 f4       	brne	.+32     	; 0x5a52 <main+0x53a>
    5a32:	8b 81       	ldd	r24, Y+3	; 0x03
    5a34:	88 23       	and	r24, r24
    5a36:	69 f4       	brne	.+26     	; 0x5a52 <main+0x53a>
		{
			Prayer="Asr";
    5a38:	8c e6       	ldi	r24, 0x6C	; 108
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	90 93 86 01 	sts	0x0186, r25
    5a40:	80 93 85 01 	sts	0x0185, r24
            flag_print=1;
    5a44:	81 e0       	ldi	r24, 0x01	; 1
    5a46:	8b 83       	std	Y+3, r24	; 0x03
            counter3=0;
    5a48:	10 92 91 01 	sts	0x0191, r1
    5a4c:	10 92 90 01 	sts	0x0190, r1
    5a50:	09 ce       	rjmp	.-1006   	; 0x5664 <main+0x14c>
		}
		else if ((m == arr[7] % 10) && (n == arr[7]/10) && (p == arr[6]%10) && (q == arr[6]/10) && (k==0) && (i==0) && (!flag_print))
    5a52:	80 91 8c 01 	lds	r24, 0x018C
    5a56:	e8 2f       	mov	r30, r24
    5a58:	f0 e0       	ldi	r31, 0x00	; 0
    5a5a:	80 91 ba 01 	lds	r24, 0x01BA
    5a5e:	90 91 bb 01 	lds	r25, 0x01BB
    5a62:	2a e0       	ldi	r18, 0x0A	; 10
    5a64:	30 e0       	ldi	r19, 0x00	; 0
    5a66:	b9 01       	movw	r22, r18
    5a68:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5a6c:	e8 17       	cp	r30, r24
    5a6e:	f9 07       	cpc	r31, r25
    5a70:	09 f0       	breq	.+2      	; 0x5a74 <main+0x55c>
    5a72:	4a c0       	rjmp	.+148    	; 0x5b08 <main+0x5f0>
    5a74:	80 91 8d 01 	lds	r24, 0x018D
    5a78:	e8 2f       	mov	r30, r24
    5a7a:	f0 e0       	ldi	r31, 0x00	; 0
    5a7c:	80 91 ba 01 	lds	r24, 0x01BA
    5a80:	90 91 bb 01 	lds	r25, 0x01BB
    5a84:	2a e0       	ldi	r18, 0x0A	; 10
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	b9 01       	movw	r22, r18
    5a8a:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5a8e:	cb 01       	movw	r24, r22
    5a90:	e8 17       	cp	r30, r24
    5a92:	f9 07       	cpc	r31, r25
    5a94:	c9 f5       	brne	.+114    	; 0x5b08 <main+0x5f0>
    5a96:	80 91 8e 01 	lds	r24, 0x018E
    5a9a:	e8 2f       	mov	r30, r24
    5a9c:	f0 e0       	ldi	r31, 0x00	; 0
    5a9e:	80 91 b8 01 	lds	r24, 0x01B8
    5aa2:	90 91 b9 01 	lds	r25, 0x01B9
    5aa6:	2a e0       	ldi	r18, 0x0A	; 10
    5aa8:	30 e0       	ldi	r19, 0x00	; 0
    5aaa:	b9 01       	movw	r22, r18
    5aac:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5ab0:	e8 17       	cp	r30, r24
    5ab2:	f9 07       	cpc	r31, r25
    5ab4:	49 f5       	brne	.+82     	; 0x5b08 <main+0x5f0>
    5ab6:	80 91 8f 01 	lds	r24, 0x018F
    5aba:	e8 2f       	mov	r30, r24
    5abc:	f0 e0       	ldi	r31, 0x00	; 0
    5abe:	80 91 b8 01 	lds	r24, 0x01B8
    5ac2:	90 91 b9 01 	lds	r25, 0x01B9
    5ac6:	2a e0       	ldi	r18, 0x0A	; 10
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	b9 01       	movw	r22, r18
    5acc:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5ad0:	cb 01       	movw	r24, r22
    5ad2:	e8 17       	cp	r30, r24
    5ad4:	f9 07       	cpc	r31, r25
    5ad6:	c1 f4       	brne	.+48     	; 0x5b08 <main+0x5f0>
    5ad8:	80 91 8b 01 	lds	r24, 0x018B
    5adc:	88 23       	and	r24, r24
    5ade:	a1 f4       	brne	.+40     	; 0x5b08 <main+0x5f0>
    5ae0:	80 91 8a 01 	lds	r24, 0x018A
    5ae4:	88 23       	and	r24, r24
    5ae6:	81 f4       	brne	.+32     	; 0x5b08 <main+0x5f0>
    5ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    5aea:	88 23       	and	r24, r24
    5aec:	69 f4       	brne	.+26     	; 0x5b08 <main+0x5f0>
		{
			Prayer="Maghrib";
    5aee:	80 e7       	ldi	r24, 0x70	; 112
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	90 93 86 01 	sts	0x0186, r25
    5af6:	80 93 85 01 	sts	0x0185, r24
            flag_print=1;
    5afa:	81 e0       	ldi	r24, 0x01	; 1
    5afc:	8b 83       	std	Y+3, r24	; 0x03
            counter3=0;
    5afe:	10 92 91 01 	sts	0x0191, r1
    5b02:	10 92 90 01 	sts	0x0190, r1
    5b06:	ae cd       	rjmp	.-1188   	; 0x5664 <main+0x14c>
		}
		else if ((m == arr[9] % 10) && (n == arr[9]/10) && (p == arr[8]%10) && (q == arr[8]/10) && (k==0) && (i==0) && (!flag_print))
    5b08:	80 91 8c 01 	lds	r24, 0x018C
    5b0c:	e8 2f       	mov	r30, r24
    5b0e:	f0 e0       	ldi	r31, 0x00	; 0
    5b10:	80 91 be 01 	lds	r24, 0x01BE
    5b14:	90 91 bf 01 	lds	r25, 0x01BF
    5b18:	2a e0       	ldi	r18, 0x0A	; 10
    5b1a:	30 e0       	ldi	r19, 0x00	; 0
    5b1c:	b9 01       	movw	r22, r18
    5b1e:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5b22:	e8 17       	cp	r30, r24
    5b24:	f9 07       	cpc	r31, r25
    5b26:	09 f0       	breq	.+2      	; 0x5b2a <main+0x612>
    5b28:	9d cd       	rjmp	.-1222   	; 0x5664 <main+0x14c>
    5b2a:	80 91 8d 01 	lds	r24, 0x018D
    5b2e:	e8 2f       	mov	r30, r24
    5b30:	f0 e0       	ldi	r31, 0x00	; 0
    5b32:	80 91 be 01 	lds	r24, 0x01BE
    5b36:	90 91 bf 01 	lds	r25, 0x01BF
    5b3a:	2a e0       	ldi	r18, 0x0A	; 10
    5b3c:	30 e0       	ldi	r19, 0x00	; 0
    5b3e:	b9 01       	movw	r22, r18
    5b40:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5b44:	cb 01       	movw	r24, r22
    5b46:	e8 17       	cp	r30, r24
    5b48:	f9 07       	cpc	r31, r25
    5b4a:	09 f0       	breq	.+2      	; 0x5b4e <main+0x636>
    5b4c:	8b cd       	rjmp	.-1258   	; 0x5664 <main+0x14c>
    5b4e:	80 91 8e 01 	lds	r24, 0x018E
    5b52:	e8 2f       	mov	r30, r24
    5b54:	f0 e0       	ldi	r31, 0x00	; 0
    5b56:	80 91 bc 01 	lds	r24, 0x01BC
    5b5a:	90 91 bd 01 	lds	r25, 0x01BD
    5b5e:	2a e0       	ldi	r18, 0x0A	; 10
    5b60:	30 e0       	ldi	r19, 0x00	; 0
    5b62:	b9 01       	movw	r22, r18
    5b64:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5b68:	e8 17       	cp	r30, r24
    5b6a:	f9 07       	cpc	r31, r25
    5b6c:	09 f0       	breq	.+2      	; 0x5b70 <main+0x658>
    5b6e:	7a cd       	rjmp	.-1292   	; 0x5664 <main+0x14c>
    5b70:	80 91 8f 01 	lds	r24, 0x018F
    5b74:	e8 2f       	mov	r30, r24
    5b76:	f0 e0       	ldi	r31, 0x00	; 0
    5b78:	80 91 bc 01 	lds	r24, 0x01BC
    5b7c:	90 91 bd 01 	lds	r25, 0x01BD
    5b80:	2a e0       	ldi	r18, 0x0A	; 10
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	b9 01       	movw	r22, r18
    5b86:	0e 94 b5 32 	call	0x656a	; 0x656a <__divmodhi4>
    5b8a:	cb 01       	movw	r24, r22
    5b8c:	e8 17       	cp	r30, r24
    5b8e:	f9 07       	cpc	r31, r25
    5b90:	09 f0       	breq	.+2      	; 0x5b94 <main+0x67c>
    5b92:	68 cd       	rjmp	.-1328   	; 0x5664 <main+0x14c>
    5b94:	80 91 8b 01 	lds	r24, 0x018B
    5b98:	88 23       	and	r24, r24
    5b9a:	09 f0       	breq	.+2      	; 0x5b9e <main+0x686>
    5b9c:	63 cd       	rjmp	.-1338   	; 0x5664 <main+0x14c>
    5b9e:	80 91 8a 01 	lds	r24, 0x018A
    5ba2:	88 23       	and	r24, r24
    5ba4:	09 f0       	breq	.+2      	; 0x5ba8 <main+0x690>
    5ba6:	5e cd       	rjmp	.-1348   	; 0x5664 <main+0x14c>
    5ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    5baa:	88 23       	and	r24, r24
    5bac:	09 f0       	breq	.+2      	; 0x5bb0 <main+0x698>
    5bae:	5a cd       	rjmp	.-1356   	; 0x5664 <main+0x14c>
		{
			Prayer="Isha";
    5bb0:	88 e7       	ldi	r24, 0x78	; 120
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	90 93 86 01 	sts	0x0186, r25
    5bb8:	80 93 85 01 	sts	0x0185, r24
            flag_print=1;
    5bbc:	81 e0       	ldi	r24, 0x01	; 1
    5bbe:	8b 83       	std	Y+3, r24	; 0x03
            counter3=0;
    5bc0:	10 92 91 01 	sts	0x0191, r1
    5bc4:	10 92 90 01 	sts	0x0190, r1
    5bc8:	4d cd       	rjmp	.-1382   	; 0x5664 <main+0x14c>

00005bca <Timer_Clock>:
		}
    }
}

void Timer_Clock()
{
    5bca:	0f 93       	push	r16
    5bcc:	1f 93       	push	r17
    5bce:	df 93       	push	r29
    5bd0:	cf 93       	push	r28
    5bd2:	cd b7       	in	r28, 0x3d	; 61
    5bd4:	de b7       	in	r29, 0x3e	; 62
    5bd6:	c4 55       	subi	r28, 0x54	; 84
    5bd8:	d0 40       	sbci	r29, 0x00	; 0
    5bda:	0f b6       	in	r0, 0x3f	; 63
    5bdc:	f8 94       	cli
    5bde:	de bf       	out	0x3e, r29	; 62
    5be0:	0f be       	out	0x3f, r0	; 63
    5be2:	cd bf       	out	0x3d, r28	; 61
    if (i == 10)
    5be4:	80 91 8a 01 	lds	r24, 0x018A
    5be8:	8a 30       	cpi	r24, 0x0A	; 10
    5bea:	39 f4       	brne	.+14     	; 0x5bfa <Timer_Clock+0x30>
    {
        k++;
    5bec:	80 91 8b 01 	lds	r24, 0x018B
    5bf0:	8f 5f       	subi	r24, 0xFF	; 255
    5bf2:	80 93 8b 01 	sts	0x018B, r24
        i = 0;
    5bf6:	10 92 8a 01 	sts	0x018A, r1
    }
    if ((k == 6))
    5bfa:	80 91 8b 01 	lds	r24, 0x018B
    5bfe:	86 30       	cpi	r24, 0x06	; 6
    5c00:	39 f4       	brne	.+14     	; 0x5c10 <Timer_Clock+0x46>
    {
        m++;
    5c02:	80 91 8c 01 	lds	r24, 0x018C
    5c06:	8f 5f       	subi	r24, 0xFF	; 255
    5c08:	80 93 8c 01 	sts	0x018C, r24
        k = 0;
    5c0c:	10 92 8b 01 	sts	0x018B, r1
    }
    if ((m == 10))
    5c10:	80 91 8c 01 	lds	r24, 0x018C
    5c14:	8a 30       	cpi	r24, 0x0A	; 10
    5c16:	39 f4       	brne	.+14     	; 0x5c26 <Timer_Clock+0x5c>
    {
        n++;
    5c18:	80 91 8d 01 	lds	r24, 0x018D
    5c1c:	8f 5f       	subi	r24, 0xFF	; 255
    5c1e:	80 93 8d 01 	sts	0x018D, r24
        m = 0;
    5c22:	10 92 8c 01 	sts	0x018C, r1
    }
    if ((n == 6))
    5c26:	80 91 8d 01 	lds	r24, 0x018D
    5c2a:	86 30       	cpi	r24, 0x06	; 6
    5c2c:	39 f4       	brne	.+14     	; 0x5c3c <Timer_Clock+0x72>
    {
        p++;
    5c2e:	80 91 8e 01 	lds	r24, 0x018E
    5c32:	8f 5f       	subi	r24, 0xFF	; 255
    5c34:	80 93 8e 01 	sts	0x018E, r24
        n = 0;
    5c38:	10 92 8d 01 	sts	0x018D, r1
    }
    if ((p == 10))
    5c3c:	80 91 8e 01 	lds	r24, 0x018E
    5c40:	8a 30       	cpi	r24, 0x0A	; 10
    5c42:	39 f4       	brne	.+14     	; 0x5c52 <Timer_Clock+0x88>
    {
        q++;
    5c44:	80 91 8f 01 	lds	r24, 0x018F
    5c48:	8f 5f       	subi	r24, 0xFF	; 255
    5c4a:	80 93 8f 01 	sts	0x018F, r24
        p = 0;
    5c4e:	10 92 8e 01 	sts	0x018E, r1
    }
    if ((q == 2) && (p == 4))
    5c52:	80 91 8f 01 	lds	r24, 0x018F
    5c56:	82 30       	cpi	r24, 0x02	; 2
    5c58:	81 f4       	brne	.+32     	; 0x5c7a <Timer_Clock+0xb0>
    5c5a:	80 91 8e 01 	lds	r24, 0x018E
    5c5e:	84 30       	cpi	r24, 0x04	; 4
    5c60:	61 f4       	brne	.+24     	; 0x5c7a <Timer_Clock+0xb0>
    {
        i = 0;
    5c62:	10 92 8a 01 	sts	0x018A, r1
        k = 0;
    5c66:	10 92 8b 01 	sts	0x018B, r1
        m = 0;
    5c6a:	10 92 8c 01 	sts	0x018C, r1
        n = 0;
    5c6e:	10 92 8d 01 	sts	0x018D, r1
        p = 0;
    5c72:	10 92 8e 01 	sts	0x018E, r1
        q = 0;
    5c76:	10 92 8f 01 	sts	0x018F, r1
    }
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN6, DIO_HIGH);
    5c7a:	80 e0       	ldi	r24, 0x00	; 0
    5c7c:	66 e0       	ldi	r22, 0x06	; 6
    5c7e:	41 e0       	ldi	r20, 0x01	; 1
    5c80:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(i);
    5c84:	80 91 8a 01 	lds	r24, 0x018A
    5c88:	0e 94 47 20 	call	0x408e	; 0x408e <SSD_Write>
    5c8c:	fe 01       	movw	r30, r28
    5c8e:	ef 5a       	subi	r30, 0xAF	; 175
    5c90:	ff 4f       	sbci	r31, 0xFF	; 255
    5c92:	80 e0       	ldi	r24, 0x00	; 0
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	a0 e8       	ldi	r26, 0x80	; 128
    5c98:	bf e3       	ldi	r27, 0x3F	; 63
    5c9a:	80 83       	st	Z, r24
    5c9c:	91 83       	std	Z+1, r25	; 0x01
    5c9e:	a2 83       	std	Z+2, r26	; 0x02
    5ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ca2:	8e 01       	movw	r16, r28
    5ca4:	03 5b       	subi	r16, 0xB3	; 179
    5ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ca8:	fe 01       	movw	r30, r28
    5caa:	ef 5a       	subi	r30, 0xAF	; 175
    5cac:	ff 4f       	sbci	r31, 0xFF	; 255
    5cae:	60 81       	ld	r22, Z
    5cb0:	71 81       	ldd	r23, Z+1	; 0x01
    5cb2:	82 81       	ldd	r24, Z+2	; 0x02
    5cb4:	93 81       	ldd	r25, Z+3	; 0x03
    5cb6:	20 e0       	ldi	r18, 0x00	; 0
    5cb8:	30 e0       	ldi	r19, 0x00	; 0
    5cba:	4a ef       	ldi	r20, 0xFA	; 250
    5cbc:	54 e4       	ldi	r21, 0x44	; 68
    5cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	cb 01       	movw	r24, r22
    5cc6:	f8 01       	movw	r30, r16
    5cc8:	80 83       	st	Z, r24
    5cca:	91 83       	std	Z+1, r25	; 0x01
    5ccc:	a2 83       	std	Z+2, r26	; 0x02
    5cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cd0:	fe 01       	movw	r30, r28
    5cd2:	e3 5b       	subi	r30, 0xB3	; 179
    5cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd6:	60 81       	ld	r22, Z
    5cd8:	71 81       	ldd	r23, Z+1	; 0x01
    5cda:	82 81       	ldd	r24, Z+2	; 0x02
    5cdc:	93 81       	ldd	r25, Z+3	; 0x03
    5cde:	20 e0       	ldi	r18, 0x00	; 0
    5ce0:	30 e0       	ldi	r19, 0x00	; 0
    5ce2:	40 e8       	ldi	r20, 0x80	; 128
    5ce4:	5f e3       	ldi	r21, 0x3F	; 63
    5ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cea:	88 23       	and	r24, r24
    5cec:	44 f4       	brge	.+16     	; 0x5cfe <Timer_Clock+0x134>
		__ticks = 1;
    5cee:	fe 01       	movw	r30, r28
    5cf0:	e5 5b       	subi	r30, 0xB5	; 181
    5cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf4:	81 e0       	ldi	r24, 0x01	; 1
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	91 83       	std	Z+1, r25	; 0x01
    5cfa:	80 83       	st	Z, r24
    5cfc:	64 c0       	rjmp	.+200    	; 0x5dc6 <Timer_Clock+0x1fc>
	else if (__tmp > 65535)
    5cfe:	fe 01       	movw	r30, r28
    5d00:	e3 5b       	subi	r30, 0xB3	; 179
    5d02:	ff 4f       	sbci	r31, 0xFF	; 255
    5d04:	60 81       	ld	r22, Z
    5d06:	71 81       	ldd	r23, Z+1	; 0x01
    5d08:	82 81       	ldd	r24, Z+2	; 0x02
    5d0a:	93 81       	ldd	r25, Z+3	; 0x03
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	3f ef       	ldi	r19, 0xFF	; 255
    5d10:	4f e7       	ldi	r20, 0x7F	; 127
    5d12:	57 e4       	ldi	r21, 0x47	; 71
    5d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d18:	18 16       	cp	r1, r24
    5d1a:	0c f0       	brlt	.+2      	; 0x5d1e <Timer_Clock+0x154>
    5d1c:	43 c0       	rjmp	.+134    	; 0x5da4 <Timer_Clock+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d1e:	fe 01       	movw	r30, r28
    5d20:	ef 5a       	subi	r30, 0xAF	; 175
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	60 81       	ld	r22, Z
    5d26:	71 81       	ldd	r23, Z+1	; 0x01
    5d28:	82 81       	ldd	r24, Z+2	; 0x02
    5d2a:	93 81       	ldd	r25, Z+3	; 0x03
    5d2c:	20 e0       	ldi	r18, 0x00	; 0
    5d2e:	30 e0       	ldi	r19, 0x00	; 0
    5d30:	40 e2       	ldi	r20, 0x20	; 32
    5d32:	51 e4       	ldi	r21, 0x41	; 65
    5d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d38:	dc 01       	movw	r26, r24
    5d3a:	cb 01       	movw	r24, r22
    5d3c:	8e 01       	movw	r16, r28
    5d3e:	05 5b       	subi	r16, 0xB5	; 181
    5d40:	1f 4f       	sbci	r17, 0xFF	; 255
    5d42:	bc 01       	movw	r22, r24
    5d44:	cd 01       	movw	r24, r26
    5d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d4a:	dc 01       	movw	r26, r24
    5d4c:	cb 01       	movw	r24, r22
    5d4e:	f8 01       	movw	r30, r16
    5d50:	91 83       	std	Z+1, r25	; 0x01
    5d52:	80 83       	st	Z, r24
    5d54:	1f c0       	rjmp	.+62     	; 0x5d94 <Timer_Clock+0x1ca>
    5d56:	fe 01       	movw	r30, r28
    5d58:	e7 5b       	subi	r30, 0xB7	; 183
    5d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5c:	88 ec       	ldi	r24, 0xC8	; 200
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	91 83       	std	Z+1, r25	; 0x01
    5d62:	80 83       	st	Z, r24
    5d64:	fe 01       	movw	r30, r28
    5d66:	e7 5b       	subi	r30, 0xB7	; 183
    5d68:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6a:	80 81       	ld	r24, Z
    5d6c:	91 81       	ldd	r25, Z+1	; 0x01
    5d6e:	01 97       	sbiw	r24, 0x01	; 1
    5d70:	f1 f7       	brne	.-4      	; 0x5d6e <Timer_Clock+0x1a4>
    5d72:	fe 01       	movw	r30, r28
    5d74:	e7 5b       	subi	r30, 0xB7	; 183
    5d76:	ff 4f       	sbci	r31, 0xFF	; 255
    5d78:	91 83       	std	Z+1, r25	; 0x01
    5d7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d7c:	de 01       	movw	r26, r28
    5d7e:	a5 5b       	subi	r26, 0xB5	; 181
    5d80:	bf 4f       	sbci	r27, 0xFF	; 255
    5d82:	fe 01       	movw	r30, r28
    5d84:	e5 5b       	subi	r30, 0xB5	; 181
    5d86:	ff 4f       	sbci	r31, 0xFF	; 255
    5d88:	80 81       	ld	r24, Z
    5d8a:	91 81       	ldd	r25, Z+1	; 0x01
    5d8c:	01 97       	sbiw	r24, 0x01	; 1
    5d8e:	11 96       	adiw	r26, 0x01	; 1
    5d90:	9c 93       	st	X, r25
    5d92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d94:	fe 01       	movw	r30, r28
    5d96:	e5 5b       	subi	r30, 0xB5	; 181
    5d98:	ff 4f       	sbci	r31, 0xFF	; 255
    5d9a:	80 81       	ld	r24, Z
    5d9c:	91 81       	ldd	r25, Z+1	; 0x01
    5d9e:	00 97       	sbiw	r24, 0x00	; 0
    5da0:	d1 f6       	brne	.-76     	; 0x5d56 <Timer_Clock+0x18c>
    5da2:	27 c0       	rjmp	.+78     	; 0x5df2 <Timer_Clock+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5da4:	8e 01       	movw	r16, r28
    5da6:	05 5b       	subi	r16, 0xB5	; 181
    5da8:	1f 4f       	sbci	r17, 0xFF	; 255
    5daa:	fe 01       	movw	r30, r28
    5dac:	e3 5b       	subi	r30, 0xB3	; 179
    5dae:	ff 4f       	sbci	r31, 0xFF	; 255
    5db0:	60 81       	ld	r22, Z
    5db2:	71 81       	ldd	r23, Z+1	; 0x01
    5db4:	82 81       	ldd	r24, Z+2	; 0x02
    5db6:	93 81       	ldd	r25, Z+3	; 0x03
    5db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dbc:	dc 01       	movw	r26, r24
    5dbe:	cb 01       	movw	r24, r22
    5dc0:	f8 01       	movw	r30, r16
    5dc2:	91 83       	std	Z+1, r25	; 0x01
    5dc4:	80 83       	st	Z, r24
    5dc6:	de 01       	movw	r26, r28
    5dc8:	a9 5b       	subi	r26, 0xB9	; 185
    5dca:	bf 4f       	sbci	r27, 0xFF	; 255
    5dcc:	fe 01       	movw	r30, r28
    5dce:	e5 5b       	subi	r30, 0xB5	; 181
    5dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd2:	80 81       	ld	r24, Z
    5dd4:	91 81       	ldd	r25, Z+1	; 0x01
    5dd6:	8d 93       	st	X+, r24
    5dd8:	9c 93       	st	X, r25
    5dda:	fe 01       	movw	r30, r28
    5ddc:	e9 5b       	subi	r30, 0xB9	; 185
    5dde:	ff 4f       	sbci	r31, 0xFF	; 255
    5de0:	80 81       	ld	r24, Z
    5de2:	91 81       	ldd	r25, Z+1	; 0x01
    5de4:	01 97       	sbiw	r24, 0x01	; 1
    5de6:	f1 f7       	brne	.-4      	; 0x5de4 <Timer_Clock+0x21a>
    5de8:	fe 01       	movw	r30, r28
    5dea:	e9 5b       	subi	r30, 0xB9	; 185
    5dec:	ff 4f       	sbci	r31, 0xFF	; 255
    5dee:	91 83       	std	Z+1, r25	; 0x01
    5df0:	80 83       	st	Z, r24
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN6, DIO_LOW);
    5df2:	80 e0       	ldi	r24, 0x00	; 0
    5df4:	66 e0       	ldi	r22, 0x06	; 6
    5df6:	40 e0       	ldi	r20, 0x00	; 0
    5df8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN5, DIO_HIGH);
    5dfc:	80 e0       	ldi	r24, 0x00	; 0
    5dfe:	65 e0       	ldi	r22, 0x05	; 5
    5e00:	41 e0       	ldi	r20, 0x01	; 1
    5e02:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(k);
    5e06:	80 91 8b 01 	lds	r24, 0x018B
    5e0a:	0e 94 47 20 	call	0x408e	; 0x408e <SSD_Write>
    5e0e:	fe 01       	movw	r30, r28
    5e10:	ed 5b       	subi	r30, 0xBD	; 189
    5e12:	ff 4f       	sbci	r31, 0xFF	; 255
    5e14:	80 e0       	ldi	r24, 0x00	; 0
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	a0 e8       	ldi	r26, 0x80	; 128
    5e1a:	bf e3       	ldi	r27, 0x3F	; 63
    5e1c:	80 83       	st	Z, r24
    5e1e:	91 83       	std	Z+1, r25	; 0x01
    5e20:	a2 83       	std	Z+2, r26	; 0x02
    5e22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e24:	8e 01       	movw	r16, r28
    5e26:	01 5c       	subi	r16, 0xC1	; 193
    5e28:	1f 4f       	sbci	r17, 0xFF	; 255
    5e2a:	fe 01       	movw	r30, r28
    5e2c:	ed 5b       	subi	r30, 0xBD	; 189
    5e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e30:	60 81       	ld	r22, Z
    5e32:	71 81       	ldd	r23, Z+1	; 0x01
    5e34:	82 81       	ldd	r24, Z+2	; 0x02
    5e36:	93 81       	ldd	r25, Z+3	; 0x03
    5e38:	20 e0       	ldi	r18, 0x00	; 0
    5e3a:	30 e0       	ldi	r19, 0x00	; 0
    5e3c:	4a ef       	ldi	r20, 0xFA	; 250
    5e3e:	54 e4       	ldi	r21, 0x44	; 68
    5e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	f8 01       	movw	r30, r16
    5e4a:	80 83       	st	Z, r24
    5e4c:	91 83       	std	Z+1, r25	; 0x01
    5e4e:	a2 83       	std	Z+2, r26	; 0x02
    5e50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e52:	fe 01       	movw	r30, r28
    5e54:	ff 96       	adiw	r30, 0x3f	; 63
    5e56:	60 81       	ld	r22, Z
    5e58:	71 81       	ldd	r23, Z+1	; 0x01
    5e5a:	82 81       	ldd	r24, Z+2	; 0x02
    5e5c:	93 81       	ldd	r25, Z+3	; 0x03
    5e5e:	20 e0       	ldi	r18, 0x00	; 0
    5e60:	30 e0       	ldi	r19, 0x00	; 0
    5e62:	40 e8       	ldi	r20, 0x80	; 128
    5e64:	5f e3       	ldi	r21, 0x3F	; 63
    5e66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e6a:	88 23       	and	r24, r24
    5e6c:	2c f4       	brge	.+10     	; 0x5e78 <Timer_Clock+0x2ae>
		__ticks = 1;
    5e6e:	81 e0       	ldi	r24, 0x01	; 1
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	9e af       	std	Y+62, r25	; 0x3e
    5e74:	8d af       	std	Y+61, r24	; 0x3d
    5e76:	46 c0       	rjmp	.+140    	; 0x5f04 <Timer_Clock+0x33a>
	else if (__tmp > 65535)
    5e78:	fe 01       	movw	r30, r28
    5e7a:	ff 96       	adiw	r30, 0x3f	; 63
    5e7c:	60 81       	ld	r22, Z
    5e7e:	71 81       	ldd	r23, Z+1	; 0x01
    5e80:	82 81       	ldd	r24, Z+2	; 0x02
    5e82:	93 81       	ldd	r25, Z+3	; 0x03
    5e84:	20 e0       	ldi	r18, 0x00	; 0
    5e86:	3f ef       	ldi	r19, 0xFF	; 255
    5e88:	4f e7       	ldi	r20, 0x7F	; 127
    5e8a:	57 e4       	ldi	r21, 0x47	; 71
    5e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e90:	18 16       	cp	r1, r24
    5e92:	64 f5       	brge	.+88     	; 0x5eec <Timer_Clock+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e94:	fe 01       	movw	r30, r28
    5e96:	ed 5b       	subi	r30, 0xBD	; 189
    5e98:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9a:	60 81       	ld	r22, Z
    5e9c:	71 81       	ldd	r23, Z+1	; 0x01
    5e9e:	82 81       	ldd	r24, Z+2	; 0x02
    5ea0:	93 81       	ldd	r25, Z+3	; 0x03
    5ea2:	20 e0       	ldi	r18, 0x00	; 0
    5ea4:	30 e0       	ldi	r19, 0x00	; 0
    5ea6:	40 e2       	ldi	r20, 0x20	; 32
    5ea8:	51 e4       	ldi	r21, 0x41	; 65
    5eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eae:	dc 01       	movw	r26, r24
    5eb0:	cb 01       	movw	r24, r22
    5eb2:	bc 01       	movw	r22, r24
    5eb4:	cd 01       	movw	r24, r26
    5eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eba:	dc 01       	movw	r26, r24
    5ebc:	cb 01       	movw	r24, r22
    5ebe:	9e af       	std	Y+62, r25	; 0x3e
    5ec0:	8d af       	std	Y+61, r24	; 0x3d
    5ec2:	0f c0       	rjmp	.+30     	; 0x5ee2 <Timer_Clock+0x318>
    5ec4:	88 ec       	ldi	r24, 0xC8	; 200
    5ec6:	90 e0       	ldi	r25, 0x00	; 0
    5ec8:	9c af       	std	Y+60, r25	; 0x3c
    5eca:	8b af       	std	Y+59, r24	; 0x3b
    5ecc:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ece:	9c ad       	ldd	r25, Y+60	; 0x3c
    5ed0:	01 97       	sbiw	r24, 0x01	; 1
    5ed2:	f1 f7       	brne	.-4      	; 0x5ed0 <Timer_Clock+0x306>
    5ed4:	9c af       	std	Y+60, r25	; 0x3c
    5ed6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ed8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5eda:	9e ad       	ldd	r25, Y+62	; 0x3e
    5edc:	01 97       	sbiw	r24, 0x01	; 1
    5ede:	9e af       	std	Y+62, r25	; 0x3e
    5ee0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ee2:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ee4:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ee6:	00 97       	sbiw	r24, 0x00	; 0
    5ee8:	69 f7       	brne	.-38     	; 0x5ec4 <Timer_Clock+0x2fa>
    5eea:	16 c0       	rjmp	.+44     	; 0x5f18 <Timer_Clock+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5eec:	fe 01       	movw	r30, r28
    5eee:	ff 96       	adiw	r30, 0x3f	; 63
    5ef0:	60 81       	ld	r22, Z
    5ef2:	71 81       	ldd	r23, Z+1	; 0x01
    5ef4:	82 81       	ldd	r24, Z+2	; 0x02
    5ef6:	93 81       	ldd	r25, Z+3	; 0x03
    5ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5efc:	dc 01       	movw	r26, r24
    5efe:	cb 01       	movw	r24, r22
    5f00:	9e af       	std	Y+62, r25	; 0x3e
    5f02:	8d af       	std	Y+61, r24	; 0x3d
    5f04:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f06:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f08:	9a af       	std	Y+58, r25	; 0x3a
    5f0a:	89 af       	std	Y+57, r24	; 0x39
    5f0c:	89 ad       	ldd	r24, Y+57	; 0x39
    5f0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5f10:	01 97       	sbiw	r24, 0x01	; 1
    5f12:	f1 f7       	brne	.-4      	; 0x5f10 <Timer_Clock+0x346>
    5f14:	9a af       	std	Y+58, r25	; 0x3a
    5f16:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN5, DIO_LOW);
    5f18:	80 e0       	ldi	r24, 0x00	; 0
    5f1a:	65 e0       	ldi	r22, 0x05	; 5
    5f1c:	40 e0       	ldi	r20, 0x00	; 0
    5f1e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN4, DIO_HIGH);
    5f22:	80 e0       	ldi	r24, 0x00	; 0
    5f24:	64 e0       	ldi	r22, 0x04	; 4
    5f26:	41 e0       	ldi	r20, 0x01	; 1
    5f28:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(m);
    5f2c:	80 91 8c 01 	lds	r24, 0x018C
    5f30:	0e 94 47 20 	call	0x408e	; 0x408e <SSD_Write>
    5f34:	80 e0       	ldi	r24, 0x00	; 0
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	a0 e8       	ldi	r26, 0x80	; 128
    5f3a:	bf e3       	ldi	r27, 0x3F	; 63
    5f3c:	8d ab       	std	Y+53, r24	; 0x35
    5f3e:	9e ab       	std	Y+54, r25	; 0x36
    5f40:	af ab       	std	Y+55, r26	; 0x37
    5f42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f44:	6d a9       	ldd	r22, Y+53	; 0x35
    5f46:	7e a9       	ldd	r23, Y+54	; 0x36
    5f48:	8f a9       	ldd	r24, Y+55	; 0x37
    5f4a:	98 ad       	ldd	r25, Y+56	; 0x38
    5f4c:	20 e0       	ldi	r18, 0x00	; 0
    5f4e:	30 e0       	ldi	r19, 0x00	; 0
    5f50:	4a ef       	ldi	r20, 0xFA	; 250
    5f52:	54 e4       	ldi	r21, 0x44	; 68
    5f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f58:	dc 01       	movw	r26, r24
    5f5a:	cb 01       	movw	r24, r22
    5f5c:	89 ab       	std	Y+49, r24	; 0x31
    5f5e:	9a ab       	std	Y+50, r25	; 0x32
    5f60:	ab ab       	std	Y+51, r26	; 0x33
    5f62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5f64:	69 a9       	ldd	r22, Y+49	; 0x31
    5f66:	7a a9       	ldd	r23, Y+50	; 0x32
    5f68:	8b a9       	ldd	r24, Y+51	; 0x33
    5f6a:	9c a9       	ldd	r25, Y+52	; 0x34
    5f6c:	20 e0       	ldi	r18, 0x00	; 0
    5f6e:	30 e0       	ldi	r19, 0x00	; 0
    5f70:	40 e8       	ldi	r20, 0x80	; 128
    5f72:	5f e3       	ldi	r21, 0x3F	; 63
    5f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f78:	88 23       	and	r24, r24
    5f7a:	2c f4       	brge	.+10     	; 0x5f86 <Timer_Clock+0x3bc>
		__ticks = 1;
    5f7c:	81 e0       	ldi	r24, 0x01	; 1
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	98 ab       	std	Y+48, r25	; 0x30
    5f82:	8f a7       	std	Y+47, r24	; 0x2f
    5f84:	3f c0       	rjmp	.+126    	; 0x6004 <Timer_Clock+0x43a>
	else if (__tmp > 65535)
    5f86:	69 a9       	ldd	r22, Y+49	; 0x31
    5f88:	7a a9       	ldd	r23, Y+50	; 0x32
    5f8a:	8b a9       	ldd	r24, Y+51	; 0x33
    5f8c:	9c a9       	ldd	r25, Y+52	; 0x34
    5f8e:	20 e0       	ldi	r18, 0x00	; 0
    5f90:	3f ef       	ldi	r19, 0xFF	; 255
    5f92:	4f e7       	ldi	r20, 0x7F	; 127
    5f94:	57 e4       	ldi	r21, 0x47	; 71
    5f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f9a:	18 16       	cp	r1, r24
    5f9c:	4c f5       	brge	.+82     	; 0x5ff0 <Timer_Clock+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f9e:	6d a9       	ldd	r22, Y+53	; 0x35
    5fa0:	7e a9       	ldd	r23, Y+54	; 0x36
    5fa2:	8f a9       	ldd	r24, Y+55	; 0x37
    5fa4:	98 ad       	ldd	r25, Y+56	; 0x38
    5fa6:	20 e0       	ldi	r18, 0x00	; 0
    5fa8:	30 e0       	ldi	r19, 0x00	; 0
    5faa:	40 e2       	ldi	r20, 0x20	; 32
    5fac:	51 e4       	ldi	r21, 0x41	; 65
    5fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fb2:	dc 01       	movw	r26, r24
    5fb4:	cb 01       	movw	r24, r22
    5fb6:	bc 01       	movw	r22, r24
    5fb8:	cd 01       	movw	r24, r26
    5fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fbe:	dc 01       	movw	r26, r24
    5fc0:	cb 01       	movw	r24, r22
    5fc2:	98 ab       	std	Y+48, r25	; 0x30
    5fc4:	8f a7       	std	Y+47, r24	; 0x2f
    5fc6:	0f c0       	rjmp	.+30     	; 0x5fe6 <Timer_Clock+0x41c>
    5fc8:	88 ec       	ldi	r24, 0xC8	; 200
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	9e a7       	std	Y+46, r25	; 0x2e
    5fce:	8d a7       	std	Y+45, r24	; 0x2d
    5fd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    5fd2:	9e a5       	ldd	r25, Y+46	; 0x2e
    5fd4:	01 97       	sbiw	r24, 0x01	; 1
    5fd6:	f1 f7       	brne	.-4      	; 0x5fd4 <Timer_Clock+0x40a>
    5fd8:	9e a7       	std	Y+46, r25	; 0x2e
    5fda:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fde:	98 a9       	ldd	r25, Y+48	; 0x30
    5fe0:	01 97       	sbiw	r24, 0x01	; 1
    5fe2:	98 ab       	std	Y+48, r25	; 0x30
    5fe4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fe8:	98 a9       	ldd	r25, Y+48	; 0x30
    5fea:	00 97       	sbiw	r24, 0x00	; 0
    5fec:	69 f7       	brne	.-38     	; 0x5fc8 <Timer_Clock+0x3fe>
    5fee:	14 c0       	rjmp	.+40     	; 0x6018 <Timer_Clock+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ff0:	69 a9       	ldd	r22, Y+49	; 0x31
    5ff2:	7a a9       	ldd	r23, Y+50	; 0x32
    5ff4:	8b a9       	ldd	r24, Y+51	; 0x33
    5ff6:	9c a9       	ldd	r25, Y+52	; 0x34
    5ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ffc:	dc 01       	movw	r26, r24
    5ffe:	cb 01       	movw	r24, r22
    6000:	98 ab       	std	Y+48, r25	; 0x30
    6002:	8f a7       	std	Y+47, r24	; 0x2f
    6004:	8f a5       	ldd	r24, Y+47	; 0x2f
    6006:	98 a9       	ldd	r25, Y+48	; 0x30
    6008:	9c a7       	std	Y+44, r25	; 0x2c
    600a:	8b a7       	std	Y+43, r24	; 0x2b
    600c:	8b a5       	ldd	r24, Y+43	; 0x2b
    600e:	9c a5       	ldd	r25, Y+44	; 0x2c
    6010:	01 97       	sbiw	r24, 0x01	; 1
    6012:	f1 f7       	brne	.-4      	; 0x6010 <Timer_Clock+0x446>
    6014:	9c a7       	std	Y+44, r25	; 0x2c
    6016:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN4, DIO_LOW);
    6018:	80 e0       	ldi	r24, 0x00	; 0
    601a:	64 e0       	ldi	r22, 0x04	; 4
    601c:	40 e0       	ldi	r20, 0x00	; 0
    601e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	63 e0       	ldi	r22, 0x03	; 3
    6026:	41 e0       	ldi	r20, 0x01	; 1
    6028:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(n);
    602c:	80 91 8d 01 	lds	r24, 0x018D
    6030:	0e 94 47 20 	call	0x408e	; 0x408e <SSD_Write>
    6034:	80 e0       	ldi	r24, 0x00	; 0
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	a0 e8       	ldi	r26, 0x80	; 128
    603a:	bf e3       	ldi	r27, 0x3F	; 63
    603c:	8f a3       	std	Y+39, r24	; 0x27
    603e:	98 a7       	std	Y+40, r25	; 0x28
    6040:	a9 a7       	std	Y+41, r26	; 0x29
    6042:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6044:	6f a1       	ldd	r22, Y+39	; 0x27
    6046:	78 a5       	ldd	r23, Y+40	; 0x28
    6048:	89 a5       	ldd	r24, Y+41	; 0x29
    604a:	9a a5       	ldd	r25, Y+42	; 0x2a
    604c:	20 e0       	ldi	r18, 0x00	; 0
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	4a ef       	ldi	r20, 0xFA	; 250
    6052:	54 e4       	ldi	r21, 0x44	; 68
    6054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6058:	dc 01       	movw	r26, r24
    605a:	cb 01       	movw	r24, r22
    605c:	8b a3       	std	Y+35, r24	; 0x23
    605e:	9c a3       	std	Y+36, r25	; 0x24
    6060:	ad a3       	std	Y+37, r26	; 0x25
    6062:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6064:	6b a1       	ldd	r22, Y+35	; 0x23
    6066:	7c a1       	ldd	r23, Y+36	; 0x24
    6068:	8d a1       	ldd	r24, Y+37	; 0x25
    606a:	9e a1       	ldd	r25, Y+38	; 0x26
    606c:	20 e0       	ldi	r18, 0x00	; 0
    606e:	30 e0       	ldi	r19, 0x00	; 0
    6070:	40 e8       	ldi	r20, 0x80	; 128
    6072:	5f e3       	ldi	r21, 0x3F	; 63
    6074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6078:	88 23       	and	r24, r24
    607a:	2c f4       	brge	.+10     	; 0x6086 <Timer_Clock+0x4bc>
		__ticks = 1;
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	9a a3       	std	Y+34, r25	; 0x22
    6082:	89 a3       	std	Y+33, r24	; 0x21
    6084:	3f c0       	rjmp	.+126    	; 0x6104 <Timer_Clock+0x53a>
	else if (__tmp > 65535)
    6086:	6b a1       	ldd	r22, Y+35	; 0x23
    6088:	7c a1       	ldd	r23, Y+36	; 0x24
    608a:	8d a1       	ldd	r24, Y+37	; 0x25
    608c:	9e a1       	ldd	r25, Y+38	; 0x26
    608e:	20 e0       	ldi	r18, 0x00	; 0
    6090:	3f ef       	ldi	r19, 0xFF	; 255
    6092:	4f e7       	ldi	r20, 0x7F	; 127
    6094:	57 e4       	ldi	r21, 0x47	; 71
    6096:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    609a:	18 16       	cp	r1, r24
    609c:	4c f5       	brge	.+82     	; 0x60f0 <Timer_Clock+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    609e:	6f a1       	ldd	r22, Y+39	; 0x27
    60a0:	78 a5       	ldd	r23, Y+40	; 0x28
    60a2:	89 a5       	ldd	r24, Y+41	; 0x29
    60a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    60a6:	20 e0       	ldi	r18, 0x00	; 0
    60a8:	30 e0       	ldi	r19, 0x00	; 0
    60aa:	40 e2       	ldi	r20, 0x20	; 32
    60ac:	51 e4       	ldi	r21, 0x41	; 65
    60ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60b2:	dc 01       	movw	r26, r24
    60b4:	cb 01       	movw	r24, r22
    60b6:	bc 01       	movw	r22, r24
    60b8:	cd 01       	movw	r24, r26
    60ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60be:	dc 01       	movw	r26, r24
    60c0:	cb 01       	movw	r24, r22
    60c2:	9a a3       	std	Y+34, r25	; 0x22
    60c4:	89 a3       	std	Y+33, r24	; 0x21
    60c6:	0f c0       	rjmp	.+30     	; 0x60e6 <Timer_Clock+0x51c>
    60c8:	88 ec       	ldi	r24, 0xC8	; 200
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	98 a3       	std	Y+32, r25	; 0x20
    60ce:	8f 8f       	std	Y+31, r24	; 0x1f
    60d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60d2:	98 a1       	ldd	r25, Y+32	; 0x20
    60d4:	01 97       	sbiw	r24, 0x01	; 1
    60d6:	f1 f7       	brne	.-4      	; 0x60d4 <Timer_Clock+0x50a>
    60d8:	98 a3       	std	Y+32, r25	; 0x20
    60da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60dc:	89 a1       	ldd	r24, Y+33	; 0x21
    60de:	9a a1       	ldd	r25, Y+34	; 0x22
    60e0:	01 97       	sbiw	r24, 0x01	; 1
    60e2:	9a a3       	std	Y+34, r25	; 0x22
    60e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60e6:	89 a1       	ldd	r24, Y+33	; 0x21
    60e8:	9a a1       	ldd	r25, Y+34	; 0x22
    60ea:	00 97       	sbiw	r24, 0x00	; 0
    60ec:	69 f7       	brne	.-38     	; 0x60c8 <Timer_Clock+0x4fe>
    60ee:	14 c0       	rjmp	.+40     	; 0x6118 <Timer_Clock+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60f0:	6b a1       	ldd	r22, Y+35	; 0x23
    60f2:	7c a1       	ldd	r23, Y+36	; 0x24
    60f4:	8d a1       	ldd	r24, Y+37	; 0x25
    60f6:	9e a1       	ldd	r25, Y+38	; 0x26
    60f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60fc:	dc 01       	movw	r26, r24
    60fe:	cb 01       	movw	r24, r22
    6100:	9a a3       	std	Y+34, r25	; 0x22
    6102:	89 a3       	std	Y+33, r24	; 0x21
    6104:	89 a1       	ldd	r24, Y+33	; 0x21
    6106:	9a a1       	ldd	r25, Y+34	; 0x22
    6108:	9e 8f       	std	Y+30, r25	; 0x1e
    610a:	8d 8f       	std	Y+29, r24	; 0x1d
    610c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    610e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6110:	01 97       	sbiw	r24, 0x01	; 1
    6112:	f1 f7       	brne	.-4      	; 0x6110 <Timer_Clock+0x546>
    6114:	9e 8f       	std	Y+30, r25	; 0x1e
    6116:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    6118:	80 e0       	ldi	r24, 0x00	; 0
    611a:	63 e0       	ldi	r22, 0x03	; 3
    611c:	40 e0       	ldi	r20, 0x00	; 0
    611e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN2, DIO_HIGH);
    6122:	80 e0       	ldi	r24, 0x00	; 0
    6124:	62 e0       	ldi	r22, 0x02	; 2
    6126:	41 e0       	ldi	r20, 0x01	; 1
    6128:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(p);
    612c:	80 91 8e 01 	lds	r24, 0x018E
    6130:	0e 94 47 20 	call	0x408e	; 0x408e <SSD_Write>
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	a0 e8       	ldi	r26, 0x80	; 128
    613a:	bf e3       	ldi	r27, 0x3F	; 63
    613c:	89 8f       	std	Y+25, r24	; 0x19
    613e:	9a 8f       	std	Y+26, r25	; 0x1a
    6140:	ab 8f       	std	Y+27, r26	; 0x1b
    6142:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6144:	69 8d       	ldd	r22, Y+25	; 0x19
    6146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    614a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    614c:	20 e0       	ldi	r18, 0x00	; 0
    614e:	30 e0       	ldi	r19, 0x00	; 0
    6150:	4a ef       	ldi	r20, 0xFA	; 250
    6152:	54 e4       	ldi	r21, 0x44	; 68
    6154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6158:	dc 01       	movw	r26, r24
    615a:	cb 01       	movw	r24, r22
    615c:	8d 8b       	std	Y+21, r24	; 0x15
    615e:	9e 8b       	std	Y+22, r25	; 0x16
    6160:	af 8b       	std	Y+23, r26	; 0x17
    6162:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6164:	6d 89       	ldd	r22, Y+21	; 0x15
    6166:	7e 89       	ldd	r23, Y+22	; 0x16
    6168:	8f 89       	ldd	r24, Y+23	; 0x17
    616a:	98 8d       	ldd	r25, Y+24	; 0x18
    616c:	20 e0       	ldi	r18, 0x00	; 0
    616e:	30 e0       	ldi	r19, 0x00	; 0
    6170:	40 e8       	ldi	r20, 0x80	; 128
    6172:	5f e3       	ldi	r21, 0x3F	; 63
    6174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6178:	88 23       	and	r24, r24
    617a:	2c f4       	brge	.+10     	; 0x6186 <Timer_Clock+0x5bc>
		__ticks = 1;
    617c:	81 e0       	ldi	r24, 0x01	; 1
    617e:	90 e0       	ldi	r25, 0x00	; 0
    6180:	9c 8b       	std	Y+20, r25	; 0x14
    6182:	8b 8b       	std	Y+19, r24	; 0x13
    6184:	3f c0       	rjmp	.+126    	; 0x6204 <Timer_Clock+0x63a>
	else if (__tmp > 65535)
    6186:	6d 89       	ldd	r22, Y+21	; 0x15
    6188:	7e 89       	ldd	r23, Y+22	; 0x16
    618a:	8f 89       	ldd	r24, Y+23	; 0x17
    618c:	98 8d       	ldd	r25, Y+24	; 0x18
    618e:	20 e0       	ldi	r18, 0x00	; 0
    6190:	3f ef       	ldi	r19, 0xFF	; 255
    6192:	4f e7       	ldi	r20, 0x7F	; 127
    6194:	57 e4       	ldi	r21, 0x47	; 71
    6196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    619a:	18 16       	cp	r1, r24
    619c:	4c f5       	brge	.+82     	; 0x61f0 <Timer_Clock+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    619e:	69 8d       	ldd	r22, Y+25	; 0x19
    61a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    61a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    61a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    61a6:	20 e0       	ldi	r18, 0x00	; 0
    61a8:	30 e0       	ldi	r19, 0x00	; 0
    61aa:	40 e2       	ldi	r20, 0x20	; 32
    61ac:	51 e4       	ldi	r21, 0x41	; 65
    61ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61b2:	dc 01       	movw	r26, r24
    61b4:	cb 01       	movw	r24, r22
    61b6:	bc 01       	movw	r22, r24
    61b8:	cd 01       	movw	r24, r26
    61ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61be:	dc 01       	movw	r26, r24
    61c0:	cb 01       	movw	r24, r22
    61c2:	9c 8b       	std	Y+20, r25	; 0x14
    61c4:	8b 8b       	std	Y+19, r24	; 0x13
    61c6:	0f c0       	rjmp	.+30     	; 0x61e6 <Timer_Clock+0x61c>
    61c8:	88 ec       	ldi	r24, 0xC8	; 200
    61ca:	90 e0       	ldi	r25, 0x00	; 0
    61cc:	9a 8b       	std	Y+18, r25	; 0x12
    61ce:	89 8b       	std	Y+17, r24	; 0x11
    61d0:	89 89       	ldd	r24, Y+17	; 0x11
    61d2:	9a 89       	ldd	r25, Y+18	; 0x12
    61d4:	01 97       	sbiw	r24, 0x01	; 1
    61d6:	f1 f7       	brne	.-4      	; 0x61d4 <Timer_Clock+0x60a>
    61d8:	9a 8b       	std	Y+18, r25	; 0x12
    61da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61dc:	8b 89       	ldd	r24, Y+19	; 0x13
    61de:	9c 89       	ldd	r25, Y+20	; 0x14
    61e0:	01 97       	sbiw	r24, 0x01	; 1
    61e2:	9c 8b       	std	Y+20, r25	; 0x14
    61e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61e6:	8b 89       	ldd	r24, Y+19	; 0x13
    61e8:	9c 89       	ldd	r25, Y+20	; 0x14
    61ea:	00 97       	sbiw	r24, 0x00	; 0
    61ec:	69 f7       	brne	.-38     	; 0x61c8 <Timer_Clock+0x5fe>
    61ee:	14 c0       	rjmp	.+40     	; 0x6218 <Timer_Clock+0x64e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61f0:	6d 89       	ldd	r22, Y+21	; 0x15
    61f2:	7e 89       	ldd	r23, Y+22	; 0x16
    61f4:	8f 89       	ldd	r24, Y+23	; 0x17
    61f6:	98 8d       	ldd	r25, Y+24	; 0x18
    61f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61fc:	dc 01       	movw	r26, r24
    61fe:	cb 01       	movw	r24, r22
    6200:	9c 8b       	std	Y+20, r25	; 0x14
    6202:	8b 8b       	std	Y+19, r24	; 0x13
    6204:	8b 89       	ldd	r24, Y+19	; 0x13
    6206:	9c 89       	ldd	r25, Y+20	; 0x14
    6208:	98 8b       	std	Y+16, r25	; 0x10
    620a:	8f 87       	std	Y+15, r24	; 0x0f
    620c:	8f 85       	ldd	r24, Y+15	; 0x0f
    620e:	98 89       	ldd	r25, Y+16	; 0x10
    6210:	01 97       	sbiw	r24, 0x01	; 1
    6212:	f1 f7       	brne	.-4      	; 0x6210 <Timer_Clock+0x646>
    6214:	98 8b       	std	Y+16, r25	; 0x10
    6216:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN2, DIO_LOW);
    6218:	80 e0       	ldi	r24, 0x00	; 0
    621a:	62 e0       	ldi	r22, 0x02	; 2
    621c:	40 e0       	ldi	r20, 0x00	; 0
    621e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN1, DIO_HIGH);
    6222:	80 e0       	ldi	r24, 0x00	; 0
    6224:	61 e0       	ldi	r22, 0x01	; 1
    6226:	41 e0       	ldi	r20, 0x01	; 1
    6228:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(q);
    622c:	80 91 8f 01 	lds	r24, 0x018F
    6230:	0e 94 47 20 	call	0x408e	; 0x408e <SSD_Write>
    6234:	80 e0       	ldi	r24, 0x00	; 0
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	a0 e8       	ldi	r26, 0x80	; 128
    623a:	bf e3       	ldi	r27, 0x3F	; 63
    623c:	8b 87       	std	Y+11, r24	; 0x0b
    623e:	9c 87       	std	Y+12, r25	; 0x0c
    6240:	ad 87       	std	Y+13, r26	; 0x0d
    6242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6244:	6b 85       	ldd	r22, Y+11	; 0x0b
    6246:	7c 85       	ldd	r23, Y+12	; 0x0c
    6248:	8d 85       	ldd	r24, Y+13	; 0x0d
    624a:	9e 85       	ldd	r25, Y+14	; 0x0e
    624c:	20 e0       	ldi	r18, 0x00	; 0
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	4a ef       	ldi	r20, 0xFA	; 250
    6252:	54 e4       	ldi	r21, 0x44	; 68
    6254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6258:	dc 01       	movw	r26, r24
    625a:	cb 01       	movw	r24, r22
    625c:	8f 83       	std	Y+7, r24	; 0x07
    625e:	98 87       	std	Y+8, r25	; 0x08
    6260:	a9 87       	std	Y+9, r26	; 0x09
    6262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6264:	6f 81       	ldd	r22, Y+7	; 0x07
    6266:	78 85       	ldd	r23, Y+8	; 0x08
    6268:	89 85       	ldd	r24, Y+9	; 0x09
    626a:	9a 85       	ldd	r25, Y+10	; 0x0a
    626c:	20 e0       	ldi	r18, 0x00	; 0
    626e:	30 e0       	ldi	r19, 0x00	; 0
    6270:	40 e8       	ldi	r20, 0x80	; 128
    6272:	5f e3       	ldi	r21, 0x3F	; 63
    6274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6278:	88 23       	and	r24, r24
    627a:	2c f4       	brge	.+10     	; 0x6286 <Timer_Clock+0x6bc>
		__ticks = 1;
    627c:	81 e0       	ldi	r24, 0x01	; 1
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	9e 83       	std	Y+6, r25	; 0x06
    6282:	8d 83       	std	Y+5, r24	; 0x05
    6284:	3f c0       	rjmp	.+126    	; 0x6304 <Timer_Clock+0x73a>
	else if (__tmp > 65535)
    6286:	6f 81       	ldd	r22, Y+7	; 0x07
    6288:	78 85       	ldd	r23, Y+8	; 0x08
    628a:	89 85       	ldd	r24, Y+9	; 0x09
    628c:	9a 85       	ldd	r25, Y+10	; 0x0a
    628e:	20 e0       	ldi	r18, 0x00	; 0
    6290:	3f ef       	ldi	r19, 0xFF	; 255
    6292:	4f e7       	ldi	r20, 0x7F	; 127
    6294:	57 e4       	ldi	r21, 0x47	; 71
    6296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    629a:	18 16       	cp	r1, r24
    629c:	4c f5       	brge	.+82     	; 0x62f0 <Timer_Clock+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    629e:	6b 85       	ldd	r22, Y+11	; 0x0b
    62a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    62a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    62a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    62a6:	20 e0       	ldi	r18, 0x00	; 0
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	40 e2       	ldi	r20, 0x20	; 32
    62ac:	51 e4       	ldi	r21, 0x41	; 65
    62ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62b2:	dc 01       	movw	r26, r24
    62b4:	cb 01       	movw	r24, r22
    62b6:	bc 01       	movw	r22, r24
    62b8:	cd 01       	movw	r24, r26
    62ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62be:	dc 01       	movw	r26, r24
    62c0:	cb 01       	movw	r24, r22
    62c2:	9e 83       	std	Y+6, r25	; 0x06
    62c4:	8d 83       	std	Y+5, r24	; 0x05
    62c6:	0f c0       	rjmp	.+30     	; 0x62e6 <Timer_Clock+0x71c>
    62c8:	88 ec       	ldi	r24, 0xC8	; 200
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	9c 83       	std	Y+4, r25	; 0x04
    62ce:	8b 83       	std	Y+3, r24	; 0x03
    62d0:	8b 81       	ldd	r24, Y+3	; 0x03
    62d2:	9c 81       	ldd	r25, Y+4	; 0x04
    62d4:	01 97       	sbiw	r24, 0x01	; 1
    62d6:	f1 f7       	brne	.-4      	; 0x62d4 <Timer_Clock+0x70a>
    62d8:	9c 83       	std	Y+4, r25	; 0x04
    62da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62dc:	8d 81       	ldd	r24, Y+5	; 0x05
    62de:	9e 81       	ldd	r25, Y+6	; 0x06
    62e0:	01 97       	sbiw	r24, 0x01	; 1
    62e2:	9e 83       	std	Y+6, r25	; 0x06
    62e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62e6:	8d 81       	ldd	r24, Y+5	; 0x05
    62e8:	9e 81       	ldd	r25, Y+6	; 0x06
    62ea:	00 97       	sbiw	r24, 0x00	; 0
    62ec:	69 f7       	brne	.-38     	; 0x62c8 <Timer_Clock+0x6fe>
    62ee:	14 c0       	rjmp	.+40     	; 0x6318 <Timer_Clock+0x74e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62f0:	6f 81       	ldd	r22, Y+7	; 0x07
    62f2:	78 85       	ldd	r23, Y+8	; 0x08
    62f4:	89 85       	ldd	r24, Y+9	; 0x09
    62f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    62f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62fc:	dc 01       	movw	r26, r24
    62fe:	cb 01       	movw	r24, r22
    6300:	9e 83       	std	Y+6, r25	; 0x06
    6302:	8d 83       	std	Y+5, r24	; 0x05
    6304:	8d 81       	ldd	r24, Y+5	; 0x05
    6306:	9e 81       	ldd	r25, Y+6	; 0x06
    6308:	9a 83       	std	Y+2, r25	; 0x02
    630a:	89 83       	std	Y+1, r24	; 0x01
    630c:	89 81       	ldd	r24, Y+1	; 0x01
    630e:	9a 81       	ldd	r25, Y+2	; 0x02
    6310:	01 97       	sbiw	r24, 0x01	; 1
    6312:	f1 f7       	brne	.-4      	; 0x6310 <Timer_Clock+0x746>
    6314:	9a 83       	std	Y+2, r25	; 0x02
    6316:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA, DIO_PIN1, DIO_LOW);
    6318:	80 e0       	ldi	r24, 0x00	; 0
    631a:	61 e0       	ldi	r22, 0x01	; 1
    631c:	40 e0       	ldi	r20, 0x00	; 0
    631e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
}
    6322:	cc 5a       	subi	r28, 0xAC	; 172
    6324:	df 4f       	sbci	r29, 0xFF	; 255
    6326:	0f b6       	in	r0, 0x3f	; 63
    6328:	f8 94       	cli
    632a:	de bf       	out	0x3e, r29	; 62
    632c:	0f be       	out	0x3f, r0	; 63
    632e:	cd bf       	out	0x3d, r28	; 61
    6330:	cf 91       	pop	r28
    6332:	df 91       	pop	r29
    6334:	1f 91       	pop	r17
    6336:	0f 91       	pop	r16
    6338:	08 95       	ret

0000633a <Recieve_UART_data>:

void Recieve_UART_data()
{
    633a:	0f 93       	push	r16
    633c:	1f 93       	push	r17
    633e:	df 93       	push	r29
    6340:	cf 93       	push	r28
    6342:	cd b7       	in	r28, 0x3d	; 61
    6344:	de b7       	in	r29, 0x3e	; 62
    6346:	60 97       	sbiw	r28, 0x10	; 16
    6348:	0f b6       	in	r0, 0x3f	; 63
    634a:	f8 94       	cli
    634c:	de bf       	out	0x3e, r29	; 62
    634e:	0f be       	out	0x3f, r0	; 63
    6350:	cd bf       	out	0x3d, r28	; 61
    u8 c = Recieve_Data();
    6352:	0e 94 0f 2a 	call	0x541e	; 0x541e <Recieve_Data>
    6356:	88 8b       	std	Y+16, r24	; 0x10
    if (c == 5)
    6358:	88 89       	ldd	r24, Y+16	; 0x10
    635a:	85 30       	cpi	r24, 0x05	; 5
    635c:	69 f5       	brne	.+90     	; 0x63b8 <Recieve_UART_data+0x7e>
    {
        DIO_SetPinLevel(DIO_PORTD, DIO_PIN7, DIO_LOW);
    635e:	83 e0       	ldi	r24, 0x03	; 3
    6360:	67 e0       	ldi	r22, 0x07	; 7
    6362:	40 e0       	ldi	r20, 0x00	; 0
    6364:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        c = Recieve_Data();
    6368:	0e 94 0f 2a 	call	0x541e	; 0x541e <Recieve_Data>
    636c:	88 8b       	std	Y+16, r24	; 0x10
        u8 x = Recieve_Data();
    636e:	0e 94 0f 2a 	call	0x541e	; 0x541e <Recieve_Data>
    6372:	8f 87       	std	Y+15, r24	; 0x0f
        q = x / 10;
    6374:	8f 85       	ldd	r24, Y+15	; 0x0f
    6376:	9a e0       	ldi	r25, 0x0A	; 10
    6378:	69 2f       	mov	r22, r25
    637a:	0e 94 95 32 	call	0x652a	; 0x652a <__udivmodqi4>
    637e:	80 93 8f 01 	sts	0x018F, r24
        p = x % 10;
    6382:	8f 85       	ldd	r24, Y+15	; 0x0f
    6384:	9a e0       	ldi	r25, 0x0A	; 10
    6386:	69 2f       	mov	r22, r25
    6388:	0e 94 95 32 	call	0x652a	; 0x652a <__udivmodqi4>
    638c:	89 2f       	mov	r24, r25
    638e:	80 93 8e 01 	sts	0x018E, r24
        x = Recieve_Data();
    6392:	0e 94 0f 2a 	call	0x541e	; 0x541e <Recieve_Data>
    6396:	8f 87       	std	Y+15, r24	; 0x0f
        n = x / 10;
    6398:	8f 85       	ldd	r24, Y+15	; 0x0f
    639a:	9a e0       	ldi	r25, 0x0A	; 10
    639c:	69 2f       	mov	r22, r25
    639e:	0e 94 95 32 	call	0x652a	; 0x652a <__udivmodqi4>
    63a2:	80 93 8d 01 	sts	0x018D, r24
        m = x % 10;
    63a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    63a8:	9a e0       	ldi	r25, 0x0A	; 10
    63aa:	69 2f       	mov	r22, r25
    63ac:	0e 94 95 32 	call	0x652a	; 0x652a <__udivmodqi4>
    63b0:	89 2f       	mov	r24, r25
    63b2:	80 93 8c 01 	sts	0x018C, r24
    63b6:	93 c0       	rjmp	.+294    	; 0x64de <Recieve_UART_data+0x1a4>
    }
    else if (c == 6)
    63b8:	88 89       	ldd	r24, Y+16	; 0x10
    63ba:	86 30       	cpi	r24, 0x06	; 6
    63bc:	09 f0       	breq	.+2      	; 0x63c0 <Recieve_UART_data+0x86>
    63be:	8f c0       	rjmp	.+286    	; 0x64de <Recieve_UART_data+0x1a4>
    {
        for (i = 0; i < 10; i++)
    63c0:	10 92 8a 01 	sts	0x018A, r1
    63c4:	87 c0       	rjmp	.+270    	; 0x64d4 <Recieve_UART_data+0x19a>
        {
            arr[i] = Recieve_Data();
    63c6:	80 91 8a 01 	lds	r24, 0x018A
    63ca:	08 2f       	mov	r16, r24
    63cc:	10 e0       	ldi	r17, 0x00	; 0
    63ce:	0e 94 0f 2a 	call	0x541e	; 0x541e <Recieve_Data>
    63d2:	28 2f       	mov	r18, r24
    63d4:	30 e0       	ldi	r19, 0x00	; 0
    63d6:	c8 01       	movw	r24, r16
    63d8:	88 0f       	add	r24, r24
    63da:	99 1f       	adc	r25, r25
    63dc:	fc 01       	movw	r30, r24
    63de:	e4 55       	subi	r30, 0x54	; 84
    63e0:	fe 4f       	sbci	r31, 0xFE	; 254
    63e2:	31 83       	std	Z+1, r19	; 0x01
    63e4:	20 83       	st	Z, r18
    63e6:	80 e0       	ldi	r24, 0x00	; 0
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	a8 e4       	ldi	r26, 0x48	; 72
    63ec:	b3 e4       	ldi	r27, 0x43	; 67
    63ee:	8b 87       	std	Y+11, r24	; 0x0b
    63f0:	9c 87       	std	Y+12, r25	; 0x0c
    63f2:	ad 87       	std	Y+13, r26	; 0x0d
    63f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    63f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    63fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    63fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    63fe:	20 e0       	ldi	r18, 0x00	; 0
    6400:	30 e0       	ldi	r19, 0x00	; 0
    6402:	4a ef       	ldi	r20, 0xFA	; 250
    6404:	54 e4       	ldi	r21, 0x44	; 68
    6406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    640a:	dc 01       	movw	r26, r24
    640c:	cb 01       	movw	r24, r22
    640e:	8f 83       	std	Y+7, r24	; 0x07
    6410:	98 87       	std	Y+8, r25	; 0x08
    6412:	a9 87       	std	Y+9, r26	; 0x09
    6414:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6416:	6f 81       	ldd	r22, Y+7	; 0x07
    6418:	78 85       	ldd	r23, Y+8	; 0x08
    641a:	89 85       	ldd	r24, Y+9	; 0x09
    641c:	9a 85       	ldd	r25, Y+10	; 0x0a
    641e:	20 e0       	ldi	r18, 0x00	; 0
    6420:	30 e0       	ldi	r19, 0x00	; 0
    6422:	40 e8       	ldi	r20, 0x80	; 128
    6424:	5f e3       	ldi	r21, 0x3F	; 63
    6426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    642a:	88 23       	and	r24, r24
    642c:	2c f4       	brge	.+10     	; 0x6438 <Recieve_UART_data+0xfe>
		__ticks = 1;
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	9e 83       	std	Y+6, r25	; 0x06
    6434:	8d 83       	std	Y+5, r24	; 0x05
    6436:	3f c0       	rjmp	.+126    	; 0x64b6 <Recieve_UART_data+0x17c>
	else if (__tmp > 65535)
    6438:	6f 81       	ldd	r22, Y+7	; 0x07
    643a:	78 85       	ldd	r23, Y+8	; 0x08
    643c:	89 85       	ldd	r24, Y+9	; 0x09
    643e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6440:	20 e0       	ldi	r18, 0x00	; 0
    6442:	3f ef       	ldi	r19, 0xFF	; 255
    6444:	4f e7       	ldi	r20, 0x7F	; 127
    6446:	57 e4       	ldi	r21, 0x47	; 71
    6448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    644c:	18 16       	cp	r1, r24
    644e:	4c f5       	brge	.+82     	; 0x64a2 <Recieve_UART_data+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6450:	6b 85       	ldd	r22, Y+11	; 0x0b
    6452:	7c 85       	ldd	r23, Y+12	; 0x0c
    6454:	8d 85       	ldd	r24, Y+13	; 0x0d
    6456:	9e 85       	ldd	r25, Y+14	; 0x0e
    6458:	20 e0       	ldi	r18, 0x00	; 0
    645a:	30 e0       	ldi	r19, 0x00	; 0
    645c:	40 e2       	ldi	r20, 0x20	; 32
    645e:	51 e4       	ldi	r21, 0x41	; 65
    6460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6464:	dc 01       	movw	r26, r24
    6466:	cb 01       	movw	r24, r22
    6468:	bc 01       	movw	r22, r24
    646a:	cd 01       	movw	r24, r26
    646c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6470:	dc 01       	movw	r26, r24
    6472:	cb 01       	movw	r24, r22
    6474:	9e 83       	std	Y+6, r25	; 0x06
    6476:	8d 83       	std	Y+5, r24	; 0x05
    6478:	0f c0       	rjmp	.+30     	; 0x6498 <Recieve_UART_data+0x15e>
    647a:	88 ec       	ldi	r24, 0xC8	; 200
    647c:	90 e0       	ldi	r25, 0x00	; 0
    647e:	9c 83       	std	Y+4, r25	; 0x04
    6480:	8b 83       	std	Y+3, r24	; 0x03
    6482:	8b 81       	ldd	r24, Y+3	; 0x03
    6484:	9c 81       	ldd	r25, Y+4	; 0x04
    6486:	01 97       	sbiw	r24, 0x01	; 1
    6488:	f1 f7       	brne	.-4      	; 0x6486 <Recieve_UART_data+0x14c>
    648a:	9c 83       	std	Y+4, r25	; 0x04
    648c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    648e:	8d 81       	ldd	r24, Y+5	; 0x05
    6490:	9e 81       	ldd	r25, Y+6	; 0x06
    6492:	01 97       	sbiw	r24, 0x01	; 1
    6494:	9e 83       	std	Y+6, r25	; 0x06
    6496:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6498:	8d 81       	ldd	r24, Y+5	; 0x05
    649a:	9e 81       	ldd	r25, Y+6	; 0x06
    649c:	00 97       	sbiw	r24, 0x00	; 0
    649e:	69 f7       	brne	.-38     	; 0x647a <Recieve_UART_data+0x140>
    64a0:	14 c0       	rjmp	.+40     	; 0x64ca <Recieve_UART_data+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64a2:	6f 81       	ldd	r22, Y+7	; 0x07
    64a4:	78 85       	ldd	r23, Y+8	; 0x08
    64a6:	89 85       	ldd	r24, Y+9	; 0x09
    64a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    64aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64ae:	dc 01       	movw	r26, r24
    64b0:	cb 01       	movw	r24, r22
    64b2:	9e 83       	std	Y+6, r25	; 0x06
    64b4:	8d 83       	std	Y+5, r24	; 0x05
    64b6:	8d 81       	ldd	r24, Y+5	; 0x05
    64b8:	9e 81       	ldd	r25, Y+6	; 0x06
    64ba:	9a 83       	std	Y+2, r25	; 0x02
    64bc:	89 83       	std	Y+1, r24	; 0x01
    64be:	89 81       	ldd	r24, Y+1	; 0x01
    64c0:	9a 81       	ldd	r25, Y+2	; 0x02
    64c2:	01 97       	sbiw	r24, 0x01	; 1
    64c4:	f1 f7       	brne	.-4      	; 0x64c2 <Recieve_UART_data+0x188>
    64c6:	9a 83       	std	Y+2, r25	; 0x02
    64c8:	89 83       	std	Y+1, r24	; 0x01
        n = x / 10;
        m = x % 10;
    }
    else if (c == 6)
    {
        for (i = 0; i < 10; i++)
    64ca:	80 91 8a 01 	lds	r24, 0x018A
    64ce:	8f 5f       	subi	r24, 0xFF	; 255
    64d0:	80 93 8a 01 	sts	0x018A, r24
    64d4:	80 91 8a 01 	lds	r24, 0x018A
    64d8:	8a 30       	cpi	r24, 0x0A	; 10
    64da:	08 f4       	brcc	.+2      	; 0x64de <Recieve_UART_data+0x1a4>
    64dc:	74 cf       	rjmp	.-280    	; 0x63c6 <Recieve_UART_data+0x8c>
        {
            arr[i] = Recieve_Data();
            _delay_ms(200);
        }
    }
}
    64de:	60 96       	adiw	r28, 0x10	; 16
    64e0:	0f b6       	in	r0, 0x3f	; 63
    64e2:	f8 94       	cli
    64e4:	de bf       	out	0x3e, r29	; 62
    64e6:	0f be       	out	0x3f, r0	; 63
    64e8:	cd bf       	out	0x3d, r28	; 61
    64ea:	cf 91       	pop	r28
    64ec:	df 91       	pop	r29
    64ee:	1f 91       	pop	r17
    64f0:	0f 91       	pop	r16
    64f2:	08 95       	ret

000064f4 <Print_ON_LCD>:

void Print_ON_LCD() {
    64f4:	df 93       	push	r29
    64f6:	cf 93       	push	r28
    64f8:	cd b7       	in	r28, 0x3d	; 61
    64fa:	de b7       	in	r29, 0x3e	; 62
    if (Prayer != " ") {
    64fc:	80 91 85 01 	lds	r24, 0x0185
    6500:	90 91 86 01 	lds	r25, 0x0186
    6504:	20 e0       	ldi	r18, 0x00	; 0
    6506:	80 36       	cpi	r24, 0x60	; 96
    6508:	92 07       	cpc	r25, r18
    650a:	31 f0       	breq	.+12     	; 0x6518 <Print_ON_LCD+0x24>
    LCD_DisplayString(Prayer);
    650c:	80 91 85 01 	lds	r24, 0x0185
    6510:	90 91 86 01 	lds	r25, 0x0186
    6514:	0e 94 bd 1c 	call	0x397a	; 0x397a <LCD_DisplayString>
    }
    Prayer=" ";
    6518:	80 e6       	ldi	r24, 0x60	; 96
    651a:	90 e0       	ldi	r25, 0x00	; 0
    651c:	90 93 86 01 	sts	0x0186, r25
    6520:	80 93 85 01 	sts	0x0185, r24
}
    6524:	cf 91       	pop	r28
    6526:	df 91       	pop	r29
    6528:	08 95       	ret

0000652a <__udivmodqi4>:
    652a:	99 1b       	sub	r25, r25
    652c:	79 e0       	ldi	r23, 0x09	; 9
    652e:	04 c0       	rjmp	.+8      	; 0x6538 <__udivmodqi4_ep>

00006530 <__udivmodqi4_loop>:
    6530:	99 1f       	adc	r25, r25
    6532:	96 17       	cp	r25, r22
    6534:	08 f0       	brcs	.+2      	; 0x6538 <__udivmodqi4_ep>
    6536:	96 1b       	sub	r25, r22

00006538 <__udivmodqi4_ep>:
    6538:	88 1f       	adc	r24, r24
    653a:	7a 95       	dec	r23
    653c:	c9 f7       	brne	.-14     	; 0x6530 <__udivmodqi4_loop>
    653e:	80 95       	com	r24
    6540:	08 95       	ret

00006542 <__udivmodhi4>:
    6542:	aa 1b       	sub	r26, r26
    6544:	bb 1b       	sub	r27, r27
    6546:	51 e1       	ldi	r21, 0x11	; 17
    6548:	07 c0       	rjmp	.+14     	; 0x6558 <__udivmodhi4_ep>

0000654a <__udivmodhi4_loop>:
    654a:	aa 1f       	adc	r26, r26
    654c:	bb 1f       	adc	r27, r27
    654e:	a6 17       	cp	r26, r22
    6550:	b7 07       	cpc	r27, r23
    6552:	10 f0       	brcs	.+4      	; 0x6558 <__udivmodhi4_ep>
    6554:	a6 1b       	sub	r26, r22
    6556:	b7 0b       	sbc	r27, r23

00006558 <__udivmodhi4_ep>:
    6558:	88 1f       	adc	r24, r24
    655a:	99 1f       	adc	r25, r25
    655c:	5a 95       	dec	r21
    655e:	a9 f7       	brne	.-22     	; 0x654a <__udivmodhi4_loop>
    6560:	80 95       	com	r24
    6562:	90 95       	com	r25
    6564:	bc 01       	movw	r22, r24
    6566:	cd 01       	movw	r24, r26
    6568:	08 95       	ret

0000656a <__divmodhi4>:
    656a:	97 fb       	bst	r25, 7
    656c:	09 2e       	mov	r0, r25
    656e:	07 26       	eor	r0, r23
    6570:	0a d0       	rcall	.+20     	; 0x6586 <__divmodhi4_neg1>
    6572:	77 fd       	sbrc	r23, 7
    6574:	04 d0       	rcall	.+8      	; 0x657e <__divmodhi4_neg2>
    6576:	e5 df       	rcall	.-54     	; 0x6542 <__udivmodhi4>
    6578:	06 d0       	rcall	.+12     	; 0x6586 <__divmodhi4_neg1>
    657a:	00 20       	and	r0, r0
    657c:	1a f4       	brpl	.+6      	; 0x6584 <__divmodhi4_exit>

0000657e <__divmodhi4_neg2>:
    657e:	70 95       	com	r23
    6580:	61 95       	neg	r22
    6582:	7f 4f       	sbci	r23, 0xFF	; 255

00006584 <__divmodhi4_exit>:
    6584:	08 95       	ret

00006586 <__divmodhi4_neg1>:
    6586:	f6 f7       	brtc	.-4      	; 0x6584 <__divmodhi4_exit>
    6588:	90 95       	com	r25
    658a:	81 95       	neg	r24
    658c:	9f 4f       	sbci	r25, 0xFF	; 255
    658e:	08 95       	ret

00006590 <__prologue_saves__>:
    6590:	2f 92       	push	r2
    6592:	3f 92       	push	r3
    6594:	4f 92       	push	r4
    6596:	5f 92       	push	r5
    6598:	6f 92       	push	r6
    659a:	7f 92       	push	r7
    659c:	8f 92       	push	r8
    659e:	9f 92       	push	r9
    65a0:	af 92       	push	r10
    65a2:	bf 92       	push	r11
    65a4:	cf 92       	push	r12
    65a6:	df 92       	push	r13
    65a8:	ef 92       	push	r14
    65aa:	ff 92       	push	r15
    65ac:	0f 93       	push	r16
    65ae:	1f 93       	push	r17
    65b0:	cf 93       	push	r28
    65b2:	df 93       	push	r29
    65b4:	cd b7       	in	r28, 0x3d	; 61
    65b6:	de b7       	in	r29, 0x3e	; 62
    65b8:	ca 1b       	sub	r28, r26
    65ba:	db 0b       	sbc	r29, r27
    65bc:	0f b6       	in	r0, 0x3f	; 63
    65be:	f8 94       	cli
    65c0:	de bf       	out	0x3e, r29	; 62
    65c2:	0f be       	out	0x3f, r0	; 63
    65c4:	cd bf       	out	0x3d, r28	; 61
    65c6:	09 94       	ijmp

000065c8 <__epilogue_restores__>:
    65c8:	2a 88       	ldd	r2, Y+18	; 0x12
    65ca:	39 88       	ldd	r3, Y+17	; 0x11
    65cc:	48 88       	ldd	r4, Y+16	; 0x10
    65ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    65d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    65d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    65d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    65d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    65d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    65da:	b9 84       	ldd	r11, Y+9	; 0x09
    65dc:	c8 84       	ldd	r12, Y+8	; 0x08
    65de:	df 80       	ldd	r13, Y+7	; 0x07
    65e0:	ee 80       	ldd	r14, Y+6	; 0x06
    65e2:	fd 80       	ldd	r15, Y+5	; 0x05
    65e4:	0c 81       	ldd	r16, Y+4	; 0x04
    65e6:	1b 81       	ldd	r17, Y+3	; 0x03
    65e8:	aa 81       	ldd	r26, Y+2	; 0x02
    65ea:	b9 81       	ldd	r27, Y+1	; 0x01
    65ec:	ce 0f       	add	r28, r30
    65ee:	d1 1d       	adc	r29, r1
    65f0:	0f b6       	in	r0, 0x3f	; 63
    65f2:	f8 94       	cli
    65f4:	de bf       	out	0x3e, r29	; 62
    65f6:	0f be       	out	0x3f, r0	; 63
    65f8:	cd bf       	out	0x3d, r28	; 61
    65fa:	ed 01       	movw	r28, r26
    65fc:	08 95       	ret

000065fe <_exit>:
    65fe:	f8 94       	cli

00006600 <__stop_program>:
    6600:	ff cf       	rjmp	.-2      	; 0x6600 <__stop_program>
